package org.gentoo.libbash;
// $ANTLR 3.1.3 October 08, 2012 14:11:41 java_libbash.g 2012-10-08 14:22:30

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class java_libbashParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANSI_C_QUOTING", "ARG", "ARRAY", "ARRAY_SIZE", "BRACE_EXP", "COMMAND_SUB", "CASE_PATTERN", "CASE_COMMAND", "SUBSHELL", "CURRENT_SHELL", "COMPOUND_COND", "CFOR", "FOR_INIT", "FOR_COND", "FOR_MOD", "IF_STATEMENT", "OP", "PRE_INCR", "PRE_DECR", "POST_INCR", "POST_DECR", "PROCESS_SUBSTITUTION", "VAR_REF", "NEGATION", "LIST", "STRING", "COMMAND", "FILE_DESCRIPTOR", "FILE_DESCRIPTOR_MOVE", "REDIR", "ARITHMETIC_CONDITION", "ARITHMETIC_EXPRESSION", "ARITHMETIC", "KEYWORD_TEST", "BUILTIN_TEST", "MATCH_ANY_EXCEPT", "EXTENDED_MATCH_EXACTLY_ONE", "EXTENDED_MATCH_AT_MOST_ONE", "EXTENDED_MATCH_NONE", "EXTENDED_MATCH_ANY", "EXTENDED_MATCH_AT_LEAST_ONE", "BRANCH", "MATCH_PATTERN", "MATCH_REGULAR_EXPRESSION", "ESCAPED_CHAR", "NOT_MATCH_PATTERN", "MATCH_ANY", "MATCH_ALL", "MATCH_ONE", "CHARACTER_CLASS", "EQUIVALENCE_CLASS", "COLLATING_SYMBOL", "DOUBLE_QUOTED_STRING", "SINGLE_QUOTED_STRING", "VARIABLE_DEFINITIONS", "USE_DEFAULT_WHEN_UNSET", "USE_ALTERNATE_WHEN_UNSET", "DISPLAY_ERROR_WHEN_UNSET", "ASSIGN_DEFAULT_WHEN_UNSET", "USE_DEFAULT_WHEN_UNSET_OR_NULL", "USE_ALTERNATE_WHEN_UNSET_OR_NULL", "DISPLAY_ERROR_WHEN_UNSET_OR_NULL", "ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL", "OFFSET", "LIST_EXPAND", "REPLACE_FIRST", "REPLACE_ALL", "REPLACE_AT_START", "REPLACE_AT_END", "LAZY_REMOVE_AT_START", "LAZY_REMOVE_AT_END", "EMPTY_EXPANSION_VALUE", "PLUS_SIGN", "MINUS_SIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "DIVIDE_ASSIGN", "MUL_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "LEQ", "GEQ", "NOT_EQUALS", "EQUALS_TO", "BUILTIN_LOGIC_AND", "BUILTIN_LOGIC_OR", "FUNCTION", "EOL", "BLANK", "SEMIC", "AMP", "POUND", "LOGICAND", "LOGICOR", "BANG", "PIPE", "TIME", "MINUS", "LETTER", "LESS_THAN", "GREATER_THAN", "LPAREN", "RPAREN", "DIGIT", "HERE_STRING_OP", "LSHIFT", "RSHIFT", "AMP_LESS_THAN", "AMP_GREATER_THAN", "AMP_RSHIFT", "NAME", "EXPORT", "LOCAL", "DECLARE", "LSQUARE", "RSQUARE", "EQUALS", "PLUS", "DQUOTE", "LBRACE", "RBRACE", "FOR", "IN", "DO", "DONE", "LLPAREN", "DOUBLE_SEMIC", "SELECT", "IF", "THEN", "ELSE", "FI", "ELIF", "WHILE", "UNTIL", "CASE", "ESAC", "TILDE", "ESC", "ESC_LT", "ESC_GT", "UNDERSCORE", "NUMBER", "DOLLAR", "SINGLE_QUOTED_STRING_TOKEN", "TICK", "SLASH", "OTHER", "PCT", "PCTPCT", "DOT", "DOTDOT", "COLON", "CARET", "COMMA", "AT", "ESC_RPAREN", "ESC_LPAREN", "ESC_RSQUARE", "ESC_LSQUARE", "ESC_DOLLAR", "ESC_TICK", "ESC_DQUOTE", "ESC_SQUOTE", "TIMES", "QMARK", "ALPHANUM", "SQUOTE", "COMMAND_SUBSTITUTION_PAREN", "COMMAND_SUBSTITUTION_TICK", "EXP", "COMMENT", "CONTINUE_LINE"
    };
    public static final int FUNCTION=94;
    public static final int DIVIDE_ASSIGN=80;
    public static final int LSQUARE=122;
    public static final int WHILE=141;
    public static final int LETTER=106;
    public static final int SINGLE_QUOTED_STRING_TOKEN=152;
    public static final int BUILTIN_LOGIC_AND=92;
    public static final int MOD_ASSIGN=82;
    public static final int CASE=143;
    public static final int AMP_GREATER_THAN=116;
    public static final int COMMAND_SUBSTITUTION_TICK=177;
    public static final int DO=131;
    public static final int DQUOTE=126;
    public static final int REDIR=33;
    public static final int EQUALS=124;
    public static final int ESC_TICK=169;
    public static final int MATCH_ALL=51;
    public static final int EOF=-1;
    public static final int FILE_DESCRIPTOR_MOVE=32;
    public static final int FILE_DESCRIPTOR=31;
    public static final int COMMAND=30;
    public static final int SUBSHELL=12;
    public static final int CASE_COMMAND=11;
    public static final int MUL_ASSIGN=81;
    public static final int RPAREN=110;
    public static final int NAME=118;
    public static final int EOL=95;
    public static final int ARG=5;
    public static final int USE_ALTERNATE_WHEN_UNSET=60;
    public static final int EXP=178;
    public static final int DONE=132;
    public static final int ESC_LSQUARE=167;
    public static final int CARET=161;
    public static final int ARITHMETIC=36;
    public static final int CFOR=15;
    public static final int ESC_DOLLAR=168;
    public static final int KEYWORD_TEST=37;
    public static final int LIST_EXPAND=68;
    public static final int EXPORT=119;
    public static final int AMP_RSHIFT=117;
    public static final int GEQ=89;
    public static final int COMMENT=179;
    public static final int SELECT=135;
    public static final int ARRAY=6;
    public static final int PRE_DECR=22;
    public static final int ESC_LT=147;
    public static final int ARRAY_SIZE=7;
    public static final int ESC_DQUOTE=170;
    public static final int LSHIFT_ASSIGN=83;
    public static final int EXTENDED_MATCH_AT_MOST_ONE=41;
    public static final int AMP_LESS_THAN=115;
    public static final int LOGICAND=100;
    public static final int FOR_MOD=18;
    public static final int LLPAREN=133;
    public static final int LOGICOR=101;
    public static final int LAZY_REMOVE_AT_END=74;
    public static final int EMPTY_EXPANSION_VALUE=75;
    public static final int RBRACE=128;
    public static final int ESC_RPAREN=164;
    public static final int POUND=99;
    public static final int LSHIFT=113;
    public static final int REPLACE_FIRST=69;
    public static final int BUILTIN_TEST=38;
    public static final int ELSE=138;
    public static final int BLANK=96;
    public static final int MINUS_ASSIGN=79;
    public static final int NUMBER=150;
    public static final int VAR_REF=26;
    public static final int UNDERSCORE=149;
    public static final int FOR_COND=17;
    public static final int LOCAL=120;
    public static final int ARITHMETIC_EXPRESSION=35;
    public static final int LIST=28;
    public static final int COMMAND_SUB=9;
    public static final int MATCH_ONE=52;
    public static final int ALPHANUM=174;
    public static final int REPLACE_AT_START=71;
    public static final int FI=139;
    public static final int IF_STATEMENT=19;
    public static final int ELIF=140;
    public static final int ANSI_C_QUOTING=4;
    public static final int REPLACE_AT_END=72;
    public static final int USE_DEFAULT_WHEN_UNSET=59;
    public static final int EXTENDED_MATCH_ANY=43;
    public static final int UNTIL=142;
    public static final int OP=20;
    public static final int ARITHMETIC_CONDITION=34;
    public static final int LESS_THAN=107;
    public static final int USE_DEFAULT_WHEN_UNSET_OR_NULL=63;
    public static final int POST_INCR=23;
    public static final int COMMAND_SUBSTITUTION_PAREN=176;
    public static final int QMARK=173;
    public static final int EQUIVALENCE_CLASS=54;
    public static final int FOR_INIT=16;
    public static final int DOLLAR=151;
    public static final int MATCH_ANY_EXCEPT=39;
    public static final int AMP=98;
    public static final int ESC=146;
    public static final int LBRACE=127;
    public static final int PROCESS_SUBSTITUTION=25;
    public static final int LAZY_REMOVE_AT_START=73;
    public static final int ESAC=144;
    public static final int ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL=66;
    public static final int ESC_GT=148;
    public static final int ASSIGN_DEFAULT_WHEN_UNSET=62;
    public static final int FOR=129;
    public static final int REPLACE_ALL=70;
    public static final int DOTDOT=159;
    public static final int ESC_LPAREN=165;
    public static final int ESCAPED_CHAR=48;
    public static final int AND_ASSIGN=85;
    public static final int NOT_EQUALS=90;
    public static final int LPAREN=109;
    public static final int IF=136;
    public static final int AT=163;
    public static final int TIME=104;
    public static final int CHARACTER_CLASS=53;
    public static final int SLASH=154;
    public static final int THEN=137;
    public static final int IN=130;
    public static final int COMMA=162;
    public static final int OFFSET=67;
    public static final int MINUS_SIGN=77;
    public static final int CURRENT_SHELL=13;
    public static final int XOR_ASSIGN=86;
    public static final int TILDE=145;
    public static final int MATCH_ANY=50;
    public static final int CASE_PATTERN=10;
    public static final int PLUS=125;
    public static final int PIPE=103;
    public static final int EXTENDED_MATCH_AT_LEAST_ONE=44;
    public static final int DIGIT=111;
    public static final int POST_DECR=24;
    public static final int DOT=158;
    public static final int RSHIFT=114;
    public static final int DOUBLE_QUOTED_STRING=56;
    public static final int TICK=153;
    public static final int DOUBLE_SEMIC=134;
    public static final int OTHER=155;
    public static final int GREATER_THAN=108;
    public static final int MATCH_PATTERN=46;
    public static final int SINGLE_QUOTED_STRING=57;
    public static final int PLUS_SIGN=76;
    public static final int ESC_SQUOTE=171;
    public static final int USE_ALTERNATE_WHEN_UNSET_OR_NULL=64;
    public static final int BANG=102;
    public static final int BRACE_EXP=8;
    public static final int VARIABLE_DEFINITIONS=58;
    public static final int CONTINUE_LINE=180;
    public static final int SQUOTE=175;
    public static final int RSQUARE=123;
    public static final int MINUS=105;
    public static final int RSHIFT_ASSIGN=84;
    public static final int MATCH_REGULAR_EXPRESSION=47;
    public static final int EXTENDED_MATCH_EXACTLY_ONE=40;
    public static final int COLLATING_SYMBOL=55;
    public static final int EQUALS_TO=91;
    public static final int COLON=160;
    public static final int BUILTIN_LOGIC_OR=93;
    public static final int DISPLAY_ERROR_WHEN_UNSET_OR_NULL=65;
    public static final int OR_ASSIGN=87;
    public static final int EXTENDED_MATCH_NONE=42;
    public static final int HERE_STRING_OP=112;
    public static final int PCTPCT=157;
    public static final int NEGATION=27;
    public static final int ESC_RSQUARE=166;
    public static final int DISPLAY_ERROR_WHEN_UNSET=61;
    public static final int BRANCH=45;
    public static final int PLUS_ASSIGN=78;
    public static final int DECLARE=121;
    public static final int NOT_MATCH_PATTERN=49;
    public static final int PCT=156;
    public static final int TIMES=172;
    public static final int SEMIC=97;
    public static final int COMPOUND_COND=14;
    public static final int PRE_INCR=21;
    public static final int STRING=29;
    public static final int LEQ=88;

    // delegates
    // delegators


        public java_libbashParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public java_libbashParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return java_libbashParser.tokenNames; }
    public String getGrammarFileName() { return "java_libbash.g"; }


     boolean is_here_end(String here_document_word, int number_of_tokens) {
      String word = "";
      for(int i = 1; i <= number_of_tokens; ++i)
       word += input.LT(i).getText();
      return (word.equals(here_document_word));
     }

     String get_string(Token token) {
      return token.getText();
     }

     Token LT(int index) {
      return input.LT(index);
     }

     int LA(int index) {
      return input.LA(index);
     }




     boolean is_special_token(int token)

     {
      return token == AMP
      ||token == BLANK

      ||token == LESS_THAN
      ||token == GREATER_THAN
      ||token == RSHIFT
      ||token == AMP_LESS_THAN
      ||token == AMP_GREATER_THAN
      ||token == AMP_RSHIFT

      ||token == SEMIC
      ||token == EOL

      ||token == LPAREN
      ||token == RPAREN

      ||token == DOUBLE_SEMIC

      ||token == LOGICAND
      ||token == LOGICOR

      ||token == PIPE

      ||token == HERE_STRING_OP
      ||token == LSHIFT;
     }


    public static class start_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start"
    // java_libbash.g:196:1: start : ( ( POUND )=> first_line_comment )? ( EOL )* ( BLANK )? command_list ( BLANK )? ( SEMIC | AMP | EOL )? EOF -> command_list ;
    public final java_libbashParser.start_return start() throws RecognitionException {
        java_libbashParser.start_return retval = new java_libbashParser.start_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOL2=null;
        Token BLANK3=null;
        Token BLANK5=null;
        Token SEMIC6=null;
        Token AMP7=null;
        Token EOL8=null;
        Token EOF9=null;
        java_libbashParser.first_line_comment_return first_line_comment1 = null;

        java_libbashParser.command_list_return command_list4 = null;


        CommonTree EOL2_tree=null;
        CommonTree BLANK3_tree=null;
        CommonTree BLANK5_tree=null;
        CommonTree SEMIC6_tree=null;
        CommonTree AMP7_tree=null;
        CommonTree EOL8_tree=null;
        CommonTree EOF9_tree=null;
        RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
        RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_first_line_comment=new RewriteRuleSubtreeStream(adaptor,"rule first_line_comment");
        try {
            // java_libbash.g:197:2: ( ( ( POUND )=> first_line_comment )? ( EOL )* ( BLANK )? command_list ( BLANK )? ( SEMIC | AMP | EOL )? EOF -> command_list )
            // java_libbash.g:197:4: ( ( POUND )=> first_line_comment )? ( EOL )* ( BLANK )? command_list ( BLANK )? ( SEMIC | AMP | EOL )? EOF
            {
            // java_libbash.g:197:4: ( ( POUND )=> first_line_comment )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // java_libbash.g:197:5: ( POUND )=> first_line_comment
                    {
                    pushFollow(FOLLOW_first_line_comment_in_start461);
                    first_line_comment1=first_line_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_first_line_comment.add(first_line_comment1.getTree());

                    }
                    break;

            }

            // java_libbash.g:197:36: ( EOL )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EOL) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // java_libbash.g:197:36: EOL
            	    {
            	    EOL2=(Token)match(input,EOL,FOLLOW_EOL_in_start465); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_EOL.add(EOL2);


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            // java_libbash.g:197:41: ( BLANK )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==BLANK) ) {
                int LA3_1 = input.LA(2);

                if ( (!(((LA(1) == GREATER_THAN)))) ) {
                    alt3=1;
                }
            }
            switch (alt3) {
                case 1 :
                    // java_libbash.g:197:41: BLANK
                    {
                    BLANK3=(Token)match(input,BLANK,FOLLOW_BLANK_in_start468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK3);


                    }
                    break;

            }

            pushFollow(FOLLOW_command_list_in_start471);
            command_list4=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(command_list4.getTree());
            // java_libbash.g:197:61: ( BLANK )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==BLANK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // java_libbash.g:197:61: BLANK
                    {
                    BLANK5=(Token)match(input,BLANK,FOLLOW_BLANK_in_start473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK5);


                    }
                    break;

            }

            // java_libbash.g:197:68: ( SEMIC | AMP | EOL )?
            int alt5=4;
            switch ( input.LA(1) ) {
                case SEMIC:
                    {
                    alt5=1;
                    }
                    break;
                case AMP:
                    {
                    alt5=2;
                    }
                    break;
                case EOL:
                    {
                    alt5=3;
                    }
                    break;
            }

            switch (alt5) {
                case 1 :
                    // java_libbash.g:197:69: SEMIC
                    {
                    SEMIC6=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_start477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC6);


                    }
                    break;
                case 2 :
                    // java_libbash.g:197:75: AMP
                    {
                    AMP7=(Token)match(input,AMP,FOLLOW_AMP_in_start479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMP.add(AMP7);


                    }
                    break;
                case 3 :
                    // java_libbash.g:197:79: EOL
                    {
                    EOL8=(Token)match(input,EOL,FOLLOW_EOL_in_start481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EOL.add(EOL8);


                    }
                    break;

            }

            EOF9=(Token)match(input,EOF,FOLLOW_EOF_in_start485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF9);



            // AST REWRITE
            // elements: command_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 197:89: -> command_list
            {
                adaptor.addChild(root_0, stream_command_list.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "start"

    public static class first_line_comment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "first_line_comment"
    // java_libbash.g:199:1: first_line_comment : POUND (~ ( EOL ) )* EOL ;
    public final java_libbashParser.first_line_comment_return first_line_comment() throws RecognitionException {
        java_libbashParser.first_line_comment_return retval = new java_libbashParser.first_line_comment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token POUND10=null;
        Token set11=null;
        Token EOL12=null;

        CommonTree POUND10_tree=null;
        CommonTree set11_tree=null;
        CommonTree EOL12_tree=null;

        try {
            // java_libbash.g:200:2: ( POUND (~ ( EOL ) )* EOL )
            // java_libbash.g:200:4: POUND (~ ( EOL ) )* EOL
            {
            root_0 = (CommonTree)adaptor.nil();

            POUND10=(Token)match(input,POUND,FOLLOW_POUND_in_first_line_comment498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            POUND10_tree = (CommonTree)adaptor.create(POUND10);
            adaptor.addChild(root_0, POUND10_tree);
            }
            // java_libbash.g:200:10: (~ ( EOL ) )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( ((LA6_0>=ANSI_C_QUOTING && LA6_0<=FUNCTION)||(LA6_0>=BLANK && LA6_0<=CONTINUE_LINE)) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // java_libbash.g:200:10: ~ ( EOL )
            	    {
            	    set11=(Token)input.LT(1);
            	    if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=FUNCTION)||(input.LA(1)>=BLANK && input.LA(1)<=CONTINUE_LINE) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set11));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            EOL12=(Token)match(input,EOL,FOLLOW_EOL_in_first_line_comment506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOL12_tree = (CommonTree)adaptor.create(EOL12);
            adaptor.addChild(root_0, EOL12_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "first_line_comment"

    public static class command_list_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command_list"
    // java_libbash.g:202:1: command_list : list_level_2 -> ^( LIST list_level_2 ) ;
    public final java_libbashParser.command_list_return command_list() throws RecognitionException {
        java_libbashParser.command_list_return retval = new java_libbashParser.command_list_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.list_level_2_return list_level_213 = null;


        RewriteRuleSubtreeStream stream_list_level_2=new RewriteRuleSubtreeStream(adaptor,"rule list_level_2");
        try {
            // java_libbash.g:203:2: ( list_level_2 -> ^( LIST list_level_2 ) )
            // java_libbash.g:203:4: list_level_2
            {
            pushFollow(FOLLOW_list_level_2_in_command_list515);
            list_level_213=list_level_2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_list_level_2.add(list_level_213.getTree());


            // AST REWRITE
            // elements: list_level_2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 203:17: -> ^( LIST list_level_2 )
            {
                // java_libbash.g:203:20: ^( LIST list_level_2 )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST, "LIST"), root_1);

                adaptor.addChild(root_1, stream_list_level_2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_list"

    public static class list_level_1_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_level_1"
    // java_libbash.g:204:1: list_level_1 : pipeline ( ( BLANK )? ( LOGICAND | LOGICOR ) ( BLANK | EOL )* pipeline )* ;
    public final java_libbashParser.list_level_1_return list_level_1() throws RecognitionException {
        java_libbashParser.list_level_1_return retval = new java_libbashParser.list_level_1_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK15=null;
        Token LOGICAND16=null;
        Token LOGICOR17=null;
        Token BLANK18=null;
        Token EOL19=null;
        java_libbashParser.pipeline_return pipeline14 = null;

        java_libbashParser.pipeline_return pipeline20 = null;


        CommonTree BLANK15_tree=null;
        CommonTree LOGICAND16_tree=null;
        CommonTree LOGICOR17_tree=null;
        CommonTree BLANK18_tree=null;
        CommonTree EOL19_tree=null;

        try {
            // java_libbash.g:205:2: ( pipeline ( ( BLANK )? ( LOGICAND | LOGICOR ) ( BLANK | EOL )* pipeline )* )
            // java_libbash.g:205:4: pipeline ( ( BLANK )? ( LOGICAND | LOGICOR ) ( BLANK | EOL )* pipeline )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_pipeline_in_list_level_1531);
            pipeline14=pipeline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pipeline14.getTree());
            // java_libbash.g:205:13: ( ( BLANK )? ( LOGICAND | LOGICOR ) ( BLANK | EOL )* pipeline )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==BLANK) ) {
                    int LA10_1 = input.LA(2);

                    if ( ((LA10_1>=LOGICAND && LA10_1<=LOGICOR)) ) {
                        alt10=1;
                    }


                }
                else if ( ((LA10_0>=LOGICAND && LA10_0<=LOGICOR)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // java_libbash.g:205:14: ( BLANK )? ( LOGICAND | LOGICOR ) ( BLANK | EOL )* pipeline
            	    {
            	    // java_libbash.g:205:19: ( BLANK )?
            	    int alt7=2;
            	    int LA7_0 = input.LA(1);

            	    if ( (LA7_0==BLANK) ) {
            	        alt7=1;
            	    }
            	    switch (alt7) {
            	        case 1 :
            	            // java_libbash.g:205:19: BLANK
            	            {
            	            BLANK15=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_1534); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    // java_libbash.g:205:21: ( LOGICAND | LOGICOR )
            	    int alt8=2;
            	    int LA8_0 = input.LA(1);

            	    if ( (LA8_0==LOGICAND) ) {
            	        alt8=1;
            	    }
            	    else if ( (LA8_0==LOGICOR) ) {
            	        alt8=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 8, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt8) {
            	        case 1 :
            	            // java_libbash.g:205:22: LOGICAND
            	            {
            	            LOGICAND16=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_list_level_1538); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LOGICAND16_tree = (CommonTree)adaptor.create(LOGICAND16);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND16_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // java_libbash.g:205:32: LOGICOR
            	            {
            	            LOGICOR17=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_list_level_1541); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LOGICOR17_tree = (CommonTree)adaptor.create(LOGICOR17);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR17_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // java_libbash.g:205:41: ( BLANK | EOL )*
            	    loop9:
            	    do {
            	        int alt9=3;
            	        alt9 = dfa9.predict(input);
            	        switch (alt9) {
            	    	case 1 :
            	    	    // java_libbash.g:205:42: BLANK
            	    	    {
            	    	    BLANK18=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_1545); if (state.failed) return retval;

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // java_libbash.g:205:49: EOL
            	    	    {
            	    	    EOL19=(Token)match(input,EOL,FOLLOW_EOL_in_list_level_1548); if (state.failed) return retval;

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop9;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_pipeline_in_list_level_1553);
            	    pipeline20=pipeline();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pipeline20.getTree());

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_level_1"

    public static class list_level_2_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_level_2"
    // java_libbash.g:206:1: list_level_2 : list_level_1 ( ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1 )* ;
    public final java_libbashParser.list_level_2_return list_level_2() throws RecognitionException {
        java_libbashParser.list_level_2_return retval = new java_libbashParser.list_level_2_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK22=null;
        Token BLANK24=null;
        Token EOL25=null;
        Token BLANK26=null;
        java_libbashParser.list_level_1_return list_level_121 = null;

        java_libbashParser.command_separator_return command_separator23 = null;

        java_libbashParser.list_level_1_return list_level_127 = null;


        CommonTree BLANK22_tree=null;
        CommonTree BLANK24_tree=null;
        CommonTree EOL25_tree=null;
        CommonTree BLANK26_tree=null;

        try {
            // java_libbash.g:207:2: ( list_level_1 ( ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1 )* )
            // java_libbash.g:207:4: list_level_1 ( ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_list_level_1_in_list_level_2563);
            list_level_121=list_level_1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, list_level_121.getTree());
            // java_libbash.g:207:17: ( ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1 )*
            loop15:
            do {
                int alt15=2;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // java_libbash.g:207:18: ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1
            	    {
            	    // java_libbash.g:207:23: ( BLANK )?
            	    int alt11=2;
            	    int LA11_0 = input.LA(1);

            	    if ( (LA11_0==BLANK) ) {
            	        alt11=1;
            	    }
            	    switch (alt11) {
            	        case 1 :
            	            // java_libbash.g:207:23: BLANK
            	            {
            	            BLANK22=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2566); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_command_separator_in_list_level_2570);
            	    command_separator23=command_separator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command_separator23.getTree());
            	    // java_libbash.g:207:44: ( ( BLANK )? EOL )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // java_libbash.g:207:45: ( BLANK )? EOL
            	    	    {
            	    	    // java_libbash.g:207:50: ( BLANK )?
            	    	    int alt12=2;
            	    	    int LA12_0 = input.LA(1);

            	    	    if ( (LA12_0==BLANK) ) {
            	    	        alt12=1;
            	    	    }
            	    	    switch (alt12) {
            	    	        case 1 :
            	    	            // java_libbash.g:207:50: BLANK
            	    	            {
            	    	            BLANK24=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2573); if (state.failed) return retval;

            	    	            }
            	    	            break;

            	    	    }

            	    	    EOL25=(Token)match(input,EOL,FOLLOW_EOL_in_list_level_2577); if (state.failed) return retval;

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // java_libbash.g:207:65: ( BLANK )?
            	    int alt14=2;
            	    int LA14_0 = input.LA(1);

            	    if ( (LA14_0==BLANK) ) {
            	        int LA14_1 = input.LA(2);

            	        if ( (!(((LA(1) == GREATER_THAN)))) ) {
            	            alt14=1;
            	        }
            	    }
            	    switch (alt14) {
            	        case 1 :
            	            // java_libbash.g:207:65: BLANK
            	            {
            	            BLANK26=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2582); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_list_level_1_in_list_level_2586);
            	    list_level_127=list_level_1();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_level_127.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_level_2"

    public static class command_separator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command_separator"
    // java_libbash.g:208:1: command_separator : ( SEMIC | AMP | EOL );
    public final java_libbashParser.command_separator_return command_separator() throws RecognitionException {
        java_libbashParser.command_separator_return retval = new java_libbashParser.command_separator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEMIC28=null;
        Token AMP29=null;
        Token EOL30=null;

        CommonTree SEMIC28_tree=null;
        CommonTree AMP29_tree=null;
        CommonTree EOL30_tree=null;

        try {
            // java_libbash.g:209:2: ( SEMIC | AMP | EOL )
            int alt16=3;
            switch ( input.LA(1) ) {
            case SEMIC:
                {
                alt16=1;
                }
                break;
            case AMP:
                {
                alt16=2;
                }
                break;
            case EOL:
                {
                alt16=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // java_libbash.g:209:4: SEMIC
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMIC28=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_command_separator596); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // java_libbash.g:210:4: AMP
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AMP29=(Token)match(input,AMP,FOLLOW_AMP_in_command_separator602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AMP29_tree = (CommonTree)adaptor.create(AMP29);
                    root_0 = (CommonTree)adaptor.becomeRoot(AMP29_tree, root_0);
                    }

                    }
                    break;
                case 3 :
                    // java_libbash.g:211:4: EOL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EOL30=(Token)match(input,EOL,FOLLOW_EOL_in_command_separator608); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_separator"

    public static class pipeline_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pipeline"
    // java_libbash.g:212:1: pipeline : ( time )? ( ( BANG )=> ( BANG BLANK ) )? command ( ( BLANK )? PIPE ( wspace )? command )* ;
    public final java_libbashParser.pipeline_return pipeline() throws RecognitionException {
        java_libbashParser.pipeline_return retval = new java_libbashParser.pipeline_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BANG32=null;
        Token BLANK33=null;
        Token BLANK35=null;
        Token PIPE36=null;
        java_libbashParser.time_return time31 = null;

        java_libbashParser.command_return command34 = null;

        java_libbashParser.wspace_return wspace37 = null;

        java_libbashParser.command_return command38 = null;


        CommonTree BANG32_tree=null;
        CommonTree BLANK33_tree=null;
        CommonTree BLANK35_tree=null;
        CommonTree PIPE36_tree=null;

        try {
            // java_libbash.g:213:2: ( ( time )? ( ( BANG )=> ( BANG BLANK ) )? command ( ( BLANK )? PIPE ( wspace )? command )* )
            // java_libbash.g:213:4: ( time )? ( ( BANG )=> ( BANG BLANK ) )? command ( ( BLANK )? PIPE ( wspace )? command )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:213:4: ( time )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==TIME) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // java_libbash.g:213:4: time
                    {
                    pushFollow(FOLLOW_time_in_pipeline617);
                    time31=time();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, time31.getTree());

                    }
                    break;

            }

            // java_libbash.g:213:10: ( ( BANG )=> ( BANG BLANK ) )?
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // java_libbash.g:213:11: ( BANG )=> ( BANG BLANK )
                    {
                    // java_libbash.g:213:21: ( BANG BLANK )
                    // java_libbash.g:213:22: BANG BLANK
                    {
                    BANG32=(Token)match(input,BANG,FOLLOW_BANG_in_pipeline628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BANG32_tree = (CommonTree)adaptor.create(BANG32);
                    adaptor.addChild(root_0, BANG32_tree);
                    }
                    BLANK33=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline630); if (state.failed) return retval;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_command_in_pipeline636);
            command34=command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(command34.getTree(), root_0);
            // java_libbash.g:213:46: ( ( BLANK )? PIPE ( wspace )? command )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==BLANK) ) {
                    int LA21_1 = input.LA(2);

                    if ( (LA21_1==PIPE) ) {
                        alt21=1;
                    }


                }
                else if ( (LA21_0==PIPE) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // java_libbash.g:213:47: ( BLANK )? PIPE ( wspace )? command
            	    {
            	    // java_libbash.g:213:52: ( BLANK )?
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==BLANK) ) {
            	        alt19=1;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // java_libbash.g:213:52: BLANK
            	            {
            	            BLANK35=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline640); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    PIPE36=(Token)match(input,PIPE,FOLLOW_PIPE_in_pipeline644); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE36_tree = (CommonTree)adaptor.create(PIPE36);
            	    root_0 = (CommonTree)adaptor.becomeRoot(PIPE36_tree, root_0);
            	    }
            	    // java_libbash.g:213:67: ( wspace )?
            	    int alt20=2;
            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==BLANK) ) {
            	        int LA20_1 = input.LA(2);

            	        if ( (!(((LA(1) == GREATER_THAN)))) ) {
            	            alt20=1;
            	        }
            	    }
            	    else if ( (LA20_0==EOL) ) {
            	        alt20=1;
            	    }
            	    switch (alt20) {
            	        case 1 :
            	            // java_libbash.g:213:67: wspace
            	            {
            	            pushFollow(FOLLOW_wspace_in_pipeline647);
            	            wspace37=wspace();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_command_in_pipeline651);
            	    command38=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command38.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pipeline"

    public static class time_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "time"
    // java_libbash.g:215:1: time : TIME BLANK ( ( time_posix )=> time_posix )? ;
    public final java_libbashParser.time_return time() throws RecognitionException {
        java_libbashParser.time_return retval = new java_libbashParser.time_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TIME39=null;
        Token BLANK40=null;
        java_libbashParser.time_posix_return time_posix41 = null;


        CommonTree TIME39_tree=null;
        CommonTree BLANK40_tree=null;

        try {
            // java_libbash.g:216:2: ( TIME BLANK ( ( time_posix )=> time_posix )? )
            // java_libbash.g:216:4: TIME BLANK ( ( time_posix )=> time_posix )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TIME39=(Token)match(input,TIME,FOLLOW_TIME_in_time662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TIME39_tree = (CommonTree)adaptor.create(TIME39);
            root_0 = (CommonTree)adaptor.becomeRoot(TIME39_tree, root_0);
            }
            BLANK40=(Token)match(input,BLANK,FOLLOW_BLANK_in_time665); if (state.failed) return retval;
            // java_libbash.g:216:17: ( ( time_posix )=> time_posix )?
            int alt22=2;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // java_libbash.g:216:18: ( time_posix )=> time_posix
                    {
                    pushFollow(FOLLOW_time_posix_in_time675);
                    time_posix41=time_posix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, time_posix41.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "time"

    public static class time_posix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "time_posix"
    // java_libbash.g:217:1: time_posix : MINUS LETTER BLANK ;
    public final java_libbashParser.time_posix_return time_posix() throws RecognitionException {
        java_libbashParser.time_posix_return retval = new java_libbashParser.time_posix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS42=null;
        Token LETTER43=null;
        Token BLANK44=null;

        CommonTree MINUS42_tree=null;
        CommonTree LETTER43_tree=null;
        CommonTree BLANK44_tree=null;

        try {
            // java_libbash.g:218:2: ( MINUS LETTER BLANK )
            // java_libbash.g:218:4: MINUS LETTER BLANK
            {
            root_0 = (CommonTree)adaptor.nil();

            MINUS42=(Token)match(input,MINUS,FOLLOW_MINUS_in_time_posix685); if (state.failed) return retval;
            LETTER43=(Token)match(input,LETTER,FOLLOW_LETTER_in_time_posix688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LETTER43_tree = (CommonTree)adaptor.create(LETTER43);
            adaptor.addChild(root_0, LETTER43_tree);
            }
            BLANK44=(Token)match(input,BLANK,FOLLOW_BLANK_in_time_posix690); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "time_posix"

    public static class redirection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "redirection"
    // java_libbash.g:220:1: redirection : ( redirection_atom )+ ;
    public final java_libbashParser.redirection_return redirection() throws RecognitionException {
        java_libbashParser.redirection_return retval = new java_libbashParser.redirection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.redirection_atom_return redirection_atom45 = null;



        try {
            // java_libbash.g:221:2: ( ( redirection_atom )+ )
            // java_libbash.g:221:4: ( redirection_atom )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:221:4: ( redirection_atom )+
            int cnt23=0;
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==BLANK) ) {
                    int LA23_2 = input.LA(2);

                    if ( ((LA23_2>=LESS_THAN && LA23_2<=GREATER_THAN)||(LA23_2>=DIGIT && LA23_2<=HERE_STRING_OP)||(LA23_2>=RSHIFT && LA23_2<=AMP_RSHIFT)) ) {
                        alt23=1;
                    }


                }
                else if ( ((LA23_0>=LESS_THAN && LA23_0<=GREATER_THAN)||LA23_0==HERE_STRING_OP||(LA23_0>=RSHIFT && LA23_0<=AMP_RSHIFT)) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // java_libbash.g:221:4: redirection_atom
            	    {
            	    pushFollow(FOLLOW_redirection_atom_in_redirection700);
            	    redirection_atom45=redirection_atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, redirection_atom45.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt23 >= 1 ) break loop23;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(23, input);
                        throw eee;
                }
                cnt23++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection"

    public static class redirection_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "redirection_atom"
    // java_libbash.g:222:1: redirection_atom : ( redirection_operator redirection_destination -> ^( REDIR redirection_operator redirection_destination ) | BLANK process_substitution | here_string );
    public final java_libbashParser.redirection_atom_return redirection_atom() throws RecognitionException {
        java_libbashParser.redirection_atom_return retval = new java_libbashParser.redirection_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK48=null;
        java_libbashParser.redirection_operator_return redirection_operator46 = null;

        java_libbashParser.redirection_destination_return redirection_destination47 = null;

        java_libbashParser.process_substitution_return process_substitution49 = null;

        java_libbashParser.here_string_return here_string50 = null;


        CommonTree BLANK48_tree=null;
        RewriteRuleSubtreeStream stream_redirection_operator=new RewriteRuleSubtreeStream(adaptor,"rule redirection_operator");
        RewriteRuleSubtreeStream stream_redirection_destination=new RewriteRuleSubtreeStream(adaptor,"rule redirection_destination");
        try {
            // java_libbash.g:223:2: ( redirection_operator redirection_destination -> ^( REDIR redirection_operator redirection_destination ) | BLANK process_substitution | here_string )
            int alt24=3;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                switch ( input.LA(2) ) {
                case DIGIT:
                case RSHIFT:
                case AMP_LESS_THAN:
                case AMP_GREATER_THAN:
                case AMP_RSHIFT:
                    {
                    alt24=1;
                    }
                    break;
                case HERE_STRING_OP:
                    {
                    alt24=3;
                    }
                    break;
                case LESS_THAN:
                    {
                    int LA24_4 = input.LA(3);

                    if ( (LA24_4==BLANK||(LA24_4>=AMP && LA24_4<=POUND)||LA24_4==BANG||(LA24_4>=TIME && LA24_4<=LETTER)||LA24_4==GREATER_THAN||LA24_4==DIGIT||(LA24_4>=NAME && LA24_4<=LBRACE)||(LA24_4>=FOR && LA24_4<=DONE)||(LA24_4>=SELECT && LA24_4<=SINGLE_QUOTED_STRING_TOKEN)||(LA24_4>=SLASH && LA24_4<=QMARK)||(LA24_4>=COMMAND_SUBSTITUTION_PAREN && LA24_4<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt24=1;
                    }
                    else if ( (LA24_4==LPAREN) ) {
                        alt24=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 24, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case GREATER_THAN:
                    {
                    int LA24_5 = input.LA(3);

                    if ( (LA24_5==BLANK||(LA24_5>=AMP && LA24_5<=POUND)||LA24_5==BANG||(LA24_5>=TIME && LA24_5<=LETTER)||LA24_5==DIGIT||(LA24_5>=NAME && LA24_5<=LBRACE)||(LA24_5>=FOR && LA24_5<=DONE)||(LA24_5>=SELECT && LA24_5<=SINGLE_QUOTED_STRING_TOKEN)||(LA24_5>=SLASH && LA24_5<=QMARK)||(LA24_5>=COMMAND_SUBSTITUTION_PAREN && LA24_5<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt24=1;
                    }
                    else if ( (LA24_5==LPAREN) ) {
                        alt24=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 24, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }

                }
                break;
            case LESS_THAN:
            case GREATER_THAN:
            case RSHIFT:
            case AMP_LESS_THAN:
            case AMP_GREATER_THAN:
            case AMP_RSHIFT:
                {
                alt24=1;
                }
                break;
            case HERE_STRING_OP:
                {
                alt24=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // java_libbash.g:223:4: redirection_operator redirection_destination
                    {
                    pushFollow(FOLLOW_redirection_operator_in_redirection_atom709);
                    redirection_operator46=redirection_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redirection_operator.add(redirection_operator46.getTree());
                    pushFollow(FOLLOW_redirection_destination_in_redirection_atom711);
                    redirection_destination47=redirection_destination();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redirection_destination.add(redirection_destination47.getTree());


                    // AST REWRITE
                    // elements: redirection_destination, redirection_operator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 223:49: -> ^( REDIR redirection_operator redirection_destination )
                    {
                        // java_libbash.g:223:52: ^( REDIR redirection_operator redirection_destination )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REDIR, "REDIR"), root_1);

                        adaptor.addChild(root_1, stream_redirection_operator.nextTree());
                        adaptor.addChild(root_1, stream_redirection_destination.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:224:4: BLANK process_substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BLANK48=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_atom726); if (state.failed) return retval;
                    pushFollow(FOLLOW_process_substitution_in_redirection_atom729);
                    process_substitution49=process_substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, process_substitution49.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:225:4: here_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_here_string_in_redirection_atom734);
                    here_string50=here_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, here_string50.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection_atom"

    public static class process_substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "process_substitution"
    // java_libbash.g:227:1: process_substitution : (dir= LESS_THAN | dir= GREATER_THAN ) LPAREN ( BLANK )* command_list ( BLANK )* RPAREN -> ^( PROCESS_SUBSTITUTION $dir command_list ) ;
    public final java_libbashParser.process_substitution_return process_substitution() throws RecognitionException {
        java_libbashParser.process_substitution_return retval = new java_libbashParser.process_substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token dir=null;
        Token LPAREN51=null;
        Token BLANK52=null;
        Token BLANK54=null;
        Token RPAREN55=null;
        java_libbashParser.command_list_return command_list53 = null;


        CommonTree dir_tree=null;
        CommonTree LPAREN51_tree=null;
        CommonTree BLANK52_tree=null;
        CommonTree BLANK54_tree=null;
        CommonTree RPAREN55_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_GREATER_THAN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        try {
            // java_libbash.g:228:2: ( (dir= LESS_THAN | dir= GREATER_THAN ) LPAREN ( BLANK )* command_list ( BLANK )* RPAREN -> ^( PROCESS_SUBSTITUTION $dir command_list ) )
            // java_libbash.g:228:4: (dir= LESS_THAN | dir= GREATER_THAN ) LPAREN ( BLANK )* command_list ( BLANK )* RPAREN
            {
            // java_libbash.g:228:4: (dir= LESS_THAN | dir= GREATER_THAN )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==LESS_THAN) ) {
                alt25=1;
            }
            else if ( (LA25_0==GREATER_THAN) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // java_libbash.g:228:5: dir= LESS_THAN
                    {
                    dir=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_process_substitution746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LESS_THAN.add(dir);


                    }
                    break;
                case 2 :
                    // java_libbash.g:228:19: dir= GREATER_THAN
                    {
                    dir=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_process_substitution750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER_THAN.add(dir);


                    }
                    break;

            }

            LPAREN51=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_process_substitution752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN51);

            // java_libbash.g:228:43: ( BLANK )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==BLANK) ) {
                    int LA26_6 = input.LA(2);

                    if ( (!(((LA(1) == GREATER_THAN)))) ) {
                        alt26=1;
                    }


                }


                switch (alt26) {
            	case 1 :
            	    // java_libbash.g:228:43: BLANK
            	    {
            	    BLANK52=(Token)match(input,BLANK,FOLLOW_BLANK_in_process_substitution754); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK52);


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            pushFollow(FOLLOW_command_list_in_process_substitution757);
            command_list53=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(command_list53.getTree());
            // java_libbash.g:228:63: ( BLANK )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==BLANK) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // java_libbash.g:228:63: BLANK
            	    {
            	    BLANK54=(Token)match(input,BLANK,FOLLOW_BLANK_in_process_substitution759); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK54);


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            RPAREN55=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_process_substitution762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN55);



            // AST REWRITE
            // elements: dir, command_list
            // token labels: dir
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_dir=new RewriteRuleTokenStream(adaptor,"token dir",dir);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 229:4: -> ^( PROCESS_SUBSTITUTION $dir command_list )
            {
                // java_libbash.g:229:7: ^( PROCESS_SUBSTITUTION $dir command_list )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROCESS_SUBSTITUTION, "PROCESS_SUBSTITUTION"), root_1);

                adaptor.addChild(root_1, stream_dir.nextNode());
                adaptor.addChild(root_1, stream_command_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "process_substitution"

    public static class redirection_destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "redirection_destination"
    // java_libbash.g:231:1: redirection_destination : ( ( ( BLANK )? file_descriptor )=> ( BLANK )? file_descriptor | BLANK process_substitution | ( BLANK )? string_expr );
    public final java_libbashParser.redirection_destination_return redirection_destination() throws RecognitionException {
        java_libbashParser.redirection_destination_return retval = new java_libbashParser.redirection_destination_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK56=null;
        Token BLANK58=null;
        Token BLANK60=null;
        java_libbashParser.file_descriptor_return file_descriptor57 = null;

        java_libbashParser.process_substitution_return process_substitution59 = null;

        java_libbashParser.string_expr_return string_expr61 = null;


        CommonTree BLANK56_tree=null;
        CommonTree BLANK58_tree=null;
        CommonTree BLANK60_tree=null;

        try {
            // java_libbash.g:232:2: ( ( ( BLANK )? file_descriptor )=> ( BLANK )? file_descriptor | BLANK process_substitution | ( BLANK )? string_expr )
            int alt30=3;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                switch ( input.LA(2) ) {
                case DIGIT:
                    {
                    int LA30_2 = input.LA(3);

                    if ( (synpred4_java_libbash()) ) {
                        alt30=1;
                    }
                    else if ( (true) ) {
                        alt30=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 30, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case POUND:
                case BANG:
                case TIME:
                case MINUS:
                case LETTER:
                case NAME:
                case EXPORT:
                case LOCAL:
                case DECLARE:
                case LSQUARE:
                case RSQUARE:
                case EQUALS:
                case PLUS:
                case DQUOTE:
                case LBRACE:
                case FOR:
                case IN:
                case DO:
                case DONE:
                case SELECT:
                case IF:
                case THEN:
                case ELSE:
                case FI:
                case ELIF:
                case WHILE:
                case UNTIL:
                case CASE:
                case ESAC:
                case TILDE:
                case ESC:
                case ESC_LT:
                case ESC_GT:
                case UNDERSCORE:
                case NUMBER:
                case DOLLAR:
                case SINGLE_QUOTED_STRING_TOKEN:
                case SLASH:
                case OTHER:
                case PCT:
                case PCTPCT:
                case DOT:
                case DOTDOT:
                case COLON:
                case CARET:
                case COMMA:
                case AT:
                case ESC_RPAREN:
                case ESC_LPAREN:
                case ESC_RSQUARE:
                case ESC_LSQUARE:
                case ESC_DOLLAR:
                case ESC_TICK:
                case ESC_DQUOTE:
                case ESC_SQUOTE:
                case TIMES:
                case QMARK:
                case COMMAND_SUBSTITUTION_PAREN:
                case COMMAND_SUBSTITUTION_TICK:
                    {
                    alt30=3;
                    }
                    break;
                case LESS_THAN:
                case GREATER_THAN:
                    {
                    alt30=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 30, 1, input);

                    throw nvae;
                }

                }
                break;
            case DIGIT:
                {
                int LA30_2 = input.LA(2);

                if ( (synpred4_java_libbash()) ) {
                    alt30=1;
                }
                else if ( (true) ) {
                    alt30=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 30, 2, input);

                    throw nvae;
                }
                }
                break;
            case POUND:
            case BANG:
            case TIME:
            case MINUS:
            case LETTER:
            case NAME:
            case EXPORT:
            case LOCAL:
            case DECLARE:
            case LSQUARE:
            case RSQUARE:
            case EQUALS:
            case PLUS:
            case DQUOTE:
            case LBRACE:
            case FOR:
            case IN:
            case DO:
            case DONE:
            case SELECT:
            case IF:
            case THEN:
            case ELSE:
            case FI:
            case ELIF:
            case WHILE:
            case UNTIL:
            case CASE:
            case ESAC:
            case TILDE:
            case ESC:
            case ESC_LT:
            case ESC_GT:
            case UNDERSCORE:
            case NUMBER:
            case DOLLAR:
            case SINGLE_QUOTED_STRING_TOKEN:
            case SLASH:
            case OTHER:
            case PCT:
            case PCTPCT:
            case DOT:
            case DOTDOT:
            case COLON:
            case CARET:
            case COMMA:
            case AT:
            case ESC_RPAREN:
            case ESC_LPAREN:
            case ESC_RSQUARE:
            case ESC_LSQUARE:
            case ESC_DOLLAR:
            case ESC_TICK:
            case ESC_DQUOTE:
            case ESC_SQUOTE:
            case TIMES:
            case QMARK:
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt30=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // java_libbash.g:232:4: ( ( BLANK )? file_descriptor )=> ( BLANK )? file_descriptor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:232:37: ( BLANK )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==BLANK) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // java_libbash.g:232:37: BLANK
                            {
                            BLANK56=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_destination794); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_file_descriptor_in_redirection_destination798);
                    file_descriptor57=file_descriptor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, file_descriptor57.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:233:4: BLANK process_substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BLANK58=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_destination803); if (state.failed) return retval;
                    pushFollow(FOLLOW_process_substitution_in_redirection_destination806);
                    process_substitution59=process_substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, process_substitution59.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:234:4: ( BLANK )? string_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:234:9: ( BLANK )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==BLANK) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // java_libbash.g:234:9: BLANK
                            {
                            BLANK60=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_destination811); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_string_expr_in_redirection_destination815);
                    string_expr61=string_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection_destination"

    public static class file_descriptor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "file_descriptor"
    // java_libbash.g:235:1: file_descriptor : ( DIGIT -> ^( FILE_DESCRIPTOR DIGIT ) | DIGIT MINUS -> ^( FILE_DESCRIPTOR_MOVE DIGIT ) );
    public final java_libbashParser.file_descriptor_return file_descriptor() throws RecognitionException {
        java_libbashParser.file_descriptor_return retval = new java_libbashParser.file_descriptor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIGIT62=null;
        Token DIGIT63=null;
        Token MINUS64=null;

        CommonTree DIGIT62_tree=null;
        CommonTree DIGIT63_tree=null;
        CommonTree MINUS64_tree=null;
        RewriteRuleTokenStream stream_DIGIT=new RewriteRuleTokenStream(adaptor,"token DIGIT");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");

        try {
            // java_libbash.g:236:2: ( DIGIT -> ^( FILE_DESCRIPTOR DIGIT ) | DIGIT MINUS -> ^( FILE_DESCRIPTOR_MOVE DIGIT ) )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==DIGIT) ) {
                int LA31_1 = input.LA(2);

                if ( (LA31_1==MINUS) ) {
                    alt31=2;
                }
                else if ( (LA31_1==EOF||(LA31_1>=EOL && LA31_1<=AMP)||(LA31_1>=LOGICAND && LA31_1<=LOGICOR)||LA31_1==PIPE||(LA31_1>=LESS_THAN && LA31_1<=RPAREN)||(LA31_1>=HERE_STRING_OP && LA31_1<=AMP_RSHIFT)||LA31_1==DOUBLE_SEMIC) ) {
                    alt31=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 31, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // java_libbash.g:236:4: DIGIT
                    {
                    DIGIT62=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_file_descriptor823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIGIT.add(DIGIT62);



                    // AST REWRITE
                    // elements: DIGIT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 236:10: -> ^( FILE_DESCRIPTOR DIGIT )
                    {
                        // java_libbash.g:236:13: ^( FILE_DESCRIPTOR DIGIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FILE_DESCRIPTOR, "FILE_DESCRIPTOR"), root_1);

                        adaptor.addChild(root_1, stream_DIGIT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:237:4: DIGIT MINUS
                    {
                    DIGIT63=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_file_descriptor836); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DIGIT.add(DIGIT63);

                    MINUS64=(Token)match(input,MINUS,FOLLOW_MINUS_in_file_descriptor838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS64);



                    // AST REWRITE
                    // elements: DIGIT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 237:16: -> ^( FILE_DESCRIPTOR_MOVE DIGIT )
                    {
                        // java_libbash.g:237:19: ^( FILE_DESCRIPTOR_MOVE DIGIT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FILE_DESCRIPTOR_MOVE, "FILE_DESCRIPTOR_MOVE"), root_1);

                        adaptor.addChild(root_1, stream_DIGIT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "file_descriptor"

    public static class here_string_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_string"
    // java_libbash.g:239:1: here_string : ( BLANK )? HERE_STRING_OP ( BLANK )? ( string_expr )=> string_expr ;
    public final java_libbashParser.here_string_return here_string() throws RecognitionException {
        java_libbashParser.here_string_return retval = new java_libbashParser.here_string_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK65=null;
        Token HERE_STRING_OP66=null;
        Token BLANK67=null;
        java_libbashParser.string_expr_return string_expr68 = null;


        CommonTree BLANK65_tree=null;
        CommonTree HERE_STRING_OP66_tree=null;
        CommonTree BLANK67_tree=null;

        try {
            // java_libbash.g:240:2: ( ( BLANK )? HERE_STRING_OP ( BLANK )? ( string_expr )=> string_expr )
            // java_libbash.g:240:4: ( BLANK )? HERE_STRING_OP ( BLANK )? ( string_expr )=> string_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:240:9: ( BLANK )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BLANK) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // java_libbash.g:240:9: BLANK
                    {
                    BLANK65=(Token)match(input,BLANK,FOLLOW_BLANK_in_here_string855); if (state.failed) return retval;

                    }
                    break;

            }

            HERE_STRING_OP66=(Token)match(input,HERE_STRING_OP,FOLLOW_HERE_STRING_OP_in_here_string859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            HERE_STRING_OP66_tree = (CommonTree)adaptor.create(HERE_STRING_OP66);
            root_0 = (CommonTree)adaptor.becomeRoot(HERE_STRING_OP66_tree, root_0);
            }
            // java_libbash.g:240:33: ( BLANK )?
            int alt33=2;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // java_libbash.g:240:33: BLANK
                    {
                    BLANK67=(Token)match(input,BLANK,FOLLOW_BLANK_in_here_string862); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_string_expr_in_here_string872);
            string_expr68=string_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr68.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "here_string"

    protected static class here_document_scope {
        String here_document_word;
        int number_of_tokens;
    }
    protected Stack here_document_stack = new Stack();

    public static class here_document_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_document"
    // java_libbash.g:242:1: here_document : ( BLANK )? ( here_document_operator )=> here_document_operator ( BLANK )? here_document_begin ( redirection )? EOL ( here_document_content )? here_document_end -> ^( here_document_operator ^( STRING ( here_document_content )? ) ( redirection )? ) ;
    public final java_libbashParser.here_document_return here_document() throws RecognitionException {
        here_document_stack.push(new here_document_scope());
        java_libbashParser.here_document_return retval = new java_libbashParser.here_document_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK69=null;
        Token BLANK71=null;
        Token EOL74=null;
        java_libbashParser.here_document_operator_return here_document_operator70 = null;

        java_libbashParser.here_document_begin_return here_document_begin72 = null;

        java_libbashParser.redirection_return redirection73 = null;

        java_libbashParser.here_document_content_return here_document_content75 = null;

        java_libbashParser.here_document_end_return here_document_end76 = null;


        CommonTree BLANK69_tree=null;
        CommonTree BLANK71_tree=null;
        CommonTree EOL74_tree=null;
        RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_redirection=new RewriteRuleSubtreeStream(adaptor,"rule redirection");
        RewriteRuleSubtreeStream stream_here_document_content=new RewriteRuleSubtreeStream(adaptor,"rule here_document_content");
        RewriteRuleSubtreeStream stream_here_document_begin=new RewriteRuleSubtreeStream(adaptor,"rule here_document_begin");
        RewriteRuleSubtreeStream stream_here_document_operator=new RewriteRuleSubtreeStream(adaptor,"rule here_document_operator");
        RewriteRuleSubtreeStream stream_here_document_end=new RewriteRuleSubtreeStream(adaptor,"rule here_document_end");

         ((here_document_scope)here_document_stack.peek()).here_document_word = "";
         ((here_document_scope)here_document_stack.peek()).number_of_tokens = 0;

        try {
            // java_libbash.g:252:2: ( ( BLANK )? ( here_document_operator )=> here_document_operator ( BLANK )? here_document_begin ( redirection )? EOL ( here_document_content )? here_document_end -> ^( here_document_operator ^( STRING ( here_document_content )? ) ( redirection )? ) )
            // java_libbash.g:252:4: ( BLANK )? ( here_document_operator )=> here_document_operator ( BLANK )? here_document_begin ( redirection )? EOL ( here_document_content )? here_document_end
            {
            // java_libbash.g:252:4: ( BLANK )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==BLANK) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // java_libbash.g:252:4: BLANK
                    {
                    BLANK69=(Token)match(input,BLANK,FOLLOW_BLANK_in_here_document891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK69);


                    }
                    break;

            }

            pushFollow(FOLLOW_here_document_operator_in_here_document900);
            here_document_operator70=here_document_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_here_document_operator.add(here_document_operator70.getTree());
            // java_libbash.g:252:62: ( BLANK )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==BLANK) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // java_libbash.g:252:62: BLANK
                    {
                    BLANK71=(Token)match(input,BLANK,FOLLOW_BLANK_in_here_document902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK71);


                    }
                    break;

            }

            pushFollow(FOLLOW_here_document_begin_in_here_document905);
            here_document_begin72=here_document_begin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_here_document_begin.add(here_document_begin72.getTree());
            // java_libbash.g:253:3: ( redirection )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==BLANK||(LA36_0>=LESS_THAN && LA36_0<=GREATER_THAN)||LA36_0==HERE_STRING_OP||(LA36_0>=RSHIFT && LA36_0<=AMP_RSHIFT)) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // java_libbash.g:253:3: redirection
                    {
                    pushFollow(FOLLOW_redirection_in_here_document909);
                    redirection73=redirection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redirection.add(redirection73.getTree());

                    }
                    break;

            }

            EOL74=(Token)match(input,EOL,FOLLOW_EOL_in_here_document912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOL.add(EOL74);

            // java_libbash.g:253:20: ( here_document_content )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( ((LA37_0>=ANSI_C_QUOTING && LA37_0<=CONTINUE_LINE)) && ((( !is_here_end(((here_document_scope)here_document_stack.peek()).here_document_word, ((here_document_scope)here_document_stack.peek()).number_of_tokens))||( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )))) {
                int LA37_1 = input.LA(2);

                if ( (( !is_here_end(((here_document_scope)here_document_stack.peek()).here_document_word, ((here_document_scope)here_document_stack.peek()).number_of_tokens))) ) {
                    alt37=1;
                }
            }
            switch (alt37) {
                case 1 :
                    // java_libbash.g:253:20: here_document_content
                    {
                    pushFollow(FOLLOW_here_document_content_in_here_document914);
                    here_document_content75=here_document_content();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_here_document_content.add(here_document_content75.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_here_document_end_in_here_document917);
            here_document_end76=here_document_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_here_document_end.add(here_document_end76.getTree());


            // AST REWRITE
            // elements: redirection, here_document_operator, here_document_content
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 254:4: -> ^( here_document_operator ^( STRING ( here_document_content )? ) ( redirection )? )
            {
                // java_libbash.g:254:7: ^( here_document_operator ^( STRING ( here_document_content )? ) ( redirection )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_here_document_operator.nextNode(), root_1);

                // java_libbash.g:254:32: ^( STRING ( here_document_content )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                // java_libbash.g:254:41: ( here_document_content )?
                if ( stream_here_document_content.hasNext() ) {
                    adaptor.addChild(root_2, stream_here_document_content.nextTree());

                }
                stream_here_document_content.reset();

                adaptor.addChild(root_1, root_2);
                }
                // java_libbash.g:254:65: ( redirection )?
                if ( stream_redirection.hasNext() ) {
                    adaptor.addChild(root_1, stream_redirection.nextTree());

                }
                stream_redirection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            here_document_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "here_document"

    public static class here_document_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_document_operator"
    // java_libbash.g:256:1: here_document_operator : LSHIFT ( ( MINUS )=> MINUS -> OP[\"<<-\"] | -> OP[\"<<\"] ) ;
    public final java_libbashParser.here_document_operator_return here_document_operator() throws RecognitionException {
        java_libbashParser.here_document_operator_return retval = new java_libbashParser.here_document_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSHIFT77=null;
        Token MINUS78=null;

        CommonTree LSHIFT77_tree=null;
        CommonTree MINUS78_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_LSHIFT=new RewriteRuleTokenStream(adaptor,"token LSHIFT");

        try {
            // java_libbash.g:257:2: ( LSHIFT ( ( MINUS )=> MINUS -> OP[\"<<-\"] | -> OP[\"<<\"] ) )
            // java_libbash.g:257:4: LSHIFT ( ( MINUS )=> MINUS -> OP[\"<<-\"] | -> OP[\"<<\"] )
            {
            LSHIFT77=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_here_document_operator945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LSHIFT.add(LSHIFT77);

            // java_libbash.g:258:3: ( ( MINUS )=> MINUS -> OP[\"<<-\"] | -> OP[\"<<\"] )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==MINUS) ) {
                int LA38_1 = input.LA(2);

                if ( (synpred7_java_libbash()) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA38_0==EOF||(LA38_0>=ANSI_C_QUOTING && LA38_0<=FUNCTION)||(LA38_0>=BLANK && LA38_0<=TIME)||LA38_0==LETTER||(LA38_0>=LPAREN && LA38_0<=DIGIT)||LA38_0==LSHIFT||(LA38_0>=NAME && LA38_0<=CONTINUE_LINE)) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // java_libbash.g:259:4: ( MINUS )=> MINUS
                    {
                    MINUS78=(Token)match(input,MINUS,FOLLOW_MINUS_in_here_document_operator960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS78);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 259:21: -> OP[\"<<-\"]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<<-"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:260:6: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 260:6: -> OP[\"<<\"]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<<"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "here_document_operator"

    public static class here_document_begin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_document_begin"
    // java_libbash.g:263:1: here_document_begin : (token=~ ( EOL | BLANK | LESS_THAN | HERE_STRING_OP | GREATER_THAN | RSHIFT | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT ) )+ ;
    public final java_libbashParser.here_document_begin_return here_document_begin() throws RecognitionException {
        java_libbashParser.here_document_begin_return retval = new java_libbashParser.here_document_begin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token token=null;

        CommonTree token_tree=null;

        try {
            // java_libbash.g:264:2: ( (token=~ ( EOL | BLANK | LESS_THAN | HERE_STRING_OP | GREATER_THAN | RSHIFT | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT ) )+ )
            // java_libbash.g:264:4: (token=~ ( EOL | BLANK | LESS_THAN | HERE_STRING_OP | GREATER_THAN | RSHIFT | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:264:4: (token=~ ( EOL | BLANK | LESS_THAN | HERE_STRING_OP | GREATER_THAN | RSHIFT | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT ) )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( ((LA39_0>=ANSI_C_QUOTING && LA39_0<=FUNCTION)||(LA39_0>=SEMIC && LA39_0<=LETTER)||(LA39_0>=LPAREN && LA39_0<=DIGIT)||LA39_0==LSHIFT||(LA39_0>=NAME && LA39_0<=CONTINUE_LINE)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // java_libbash.g:265:4: token=~ ( EOL | BLANK | LESS_THAN | HERE_STRING_OP | GREATER_THAN | RSHIFT | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT )
            	    {
            	    token=(Token)input.LT(1);
            	    if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=FUNCTION)||(input.LA(1)>=SEMIC && input.LA(1)<=LETTER)||(input.LA(1)>=LPAREN && input.LA(1)<=DIGIT)||input.LA(1)==LSHIFT||(input.LA(1)>=NAME && input.LA(1)<=CONTINUE_LINE) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(token));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {

            	          if(LA(-1) != DQUOTE && LA(-1) != ESC)
            	          {
            	           ((here_document_scope)here_document_stack.peek()).here_document_word += get_string(token);
            	           ((here_document_scope)here_document_stack.peek()).number_of_tokens++;
            	          }
            	         
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "here_document_begin"

    public static class here_document_end_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_document_end"
    // java_libbash.g:274:1: here_document_end : ({...}? => . )+ ;
    public final java_libbashParser.here_document_end_return here_document_end() throws RecognitionException {
        java_libbashParser.here_document_end_return retval = new java_libbashParser.here_document_end_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token wildcard79=null;

        CommonTree wildcard79_tree=null;

        try {
            // java_libbash.g:275:2: ( ({...}? => . )+ )
            // java_libbash.g:275:4: ({...}? => . )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:275:4: ({...}? => . )+
            int cnt40=0;
            loop40:
            do {
                int alt40=2;
                alt40 = dfa40.predict(input);
                switch (alt40) {
            	case 1 :
            	    // java_libbash.g:275:5: {...}? => .
            	    {
            	    if ( !(( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "here_document_end", " $here_document::number_of_tokens != 0 ");
            	    }
            	    wildcard79=(Token)input.LT(1);
            	    matchAny(input); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    wildcard79_tree = (CommonTree)adaptor.create(wildcard79);
            	    adaptor.addChild(root_0, wildcard79_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       ((here_document_scope)here_document_stack.peek()).number_of_tokens--; 
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt40 >= 1 ) break loop40;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(40, input);
                        throw eee;
                }
                cnt40++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "here_document_end"

    public static class here_document_content_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "here_document_content"
    // java_libbash.g:276:1: here_document_content : ({...}? => . )+ ;
    public final java_libbashParser.here_document_content_return here_document_content() throws RecognitionException {
        java_libbashParser.here_document_content_return retval = new java_libbashParser.here_document_content_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token wildcard80=null;

        CommonTree wildcard80_tree=null;

        try {
            // java_libbash.g:280:2: ( ({...}? => . )+ )
            // java_libbash.g:280:4: ({...}? => . )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:280:4: ({...}? => . )+
            int cnt41=0;
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( ((LA41_0>=ANSI_C_QUOTING && LA41_0<=CONTINUE_LINE)) && ((( !is_here_end(((here_document_scope)here_document_stack.peek()).here_document_word, ((here_document_scope)here_document_stack.peek()).number_of_tokens))||( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )))) {
                    int LA41_1 = input.LA(2);

                    if ( (( !is_here_end(((here_document_scope)here_document_stack.peek()).here_document_word, ((here_document_scope)here_document_stack.peek()).number_of_tokens))) ) {
                        alt41=1;
                    }


                }


                switch (alt41) {
            	case 1 :
            	    // java_libbash.g:280:5: {...}? => .
            	    {
            	    if ( !(( !is_here_end(((here_document_scope)here_document_stack.peek()).here_document_word, ((here_document_scope)here_document_stack.peek()).number_of_tokens))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "here_document_content", " !is_here_end($here_document::here_document_word, $here_document::number_of_tokens)");
            	    }
            	    wildcard80=(Token)input.LT(1);
            	    matchAny(input); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    wildcard80_tree = (CommonTree)adaptor.create(wildcard80);
            	    adaptor.addChild(root_0, wildcard80_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt41 >= 1 ) break loop41;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(41, input);
                        throw eee;
                }
                cnt41++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "here_document_content"

    public static class redirection_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "redirection_operator"
    // java_libbash.g:283:1: redirection_operator : ( BLANK DIGIT redirection_operator | ( BLANK )? ( AMP_LESS_THAN -> OP[\"&<\"] | GREATER_THAN AMP -> OP[\">&\"] | LESS_THAN AMP -> OP[\"<&\"] | LESS_THAN GREATER_THAN -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP_GREATER_THAN -> OP[\"&>\"] | AMP_RSHIFT -> OP[\"&>>\"] | LESS_THAN -> LESS_THAN | GREATER_THAN -> GREATER_THAN ) );
    public final java_libbashParser.redirection_operator_return redirection_operator() throws RecognitionException {
        java_libbashParser.redirection_operator_return retval = new java_libbashParser.redirection_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK81=null;
        Token DIGIT82=null;
        Token BLANK84=null;
        Token AMP_LESS_THAN85=null;
        Token GREATER_THAN86=null;
        Token AMP87=null;
        Token LESS_THAN88=null;
        Token AMP89=null;
        Token LESS_THAN90=null;
        Token GREATER_THAN91=null;
        Token RSHIFT92=null;
        Token AMP_GREATER_THAN93=null;
        Token AMP_RSHIFT94=null;
        Token LESS_THAN95=null;
        Token GREATER_THAN96=null;
        java_libbashParser.redirection_operator_return redirection_operator83 = null;


        CommonTree BLANK81_tree=null;
        CommonTree DIGIT82_tree=null;
        CommonTree BLANK84_tree=null;
        CommonTree AMP_LESS_THAN85_tree=null;
        CommonTree GREATER_THAN86_tree=null;
        CommonTree AMP87_tree=null;
        CommonTree LESS_THAN88_tree=null;
        CommonTree AMP89_tree=null;
        CommonTree LESS_THAN90_tree=null;
        CommonTree GREATER_THAN91_tree=null;
        CommonTree RSHIFT92_tree=null;
        CommonTree AMP_GREATER_THAN93_tree=null;
        CommonTree AMP_RSHIFT94_tree=null;
        CommonTree LESS_THAN95_tree=null;
        CommonTree GREATER_THAN96_tree=null;
        RewriteRuleTokenStream stream_AMP_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token AMP_LESS_THAN");
        RewriteRuleTokenStream stream_AMP_RSHIFT=new RewriteRuleTokenStream(adaptor,"token AMP_RSHIFT");
        RewriteRuleTokenStream stream_GREATER_THAN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN");
        RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");
        RewriteRuleTokenStream stream_RSHIFT=new RewriteRuleTokenStream(adaptor,"token RSHIFT");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");
        RewriteRuleTokenStream stream_AMP_GREATER_THAN=new RewriteRuleTokenStream(adaptor,"token AMP_GREATER_THAN");

        try {
            // java_libbash.g:284:2: ( BLANK DIGIT redirection_operator | ( BLANK )? ( AMP_LESS_THAN -> OP[\"&<\"] | GREATER_THAN AMP -> OP[\">&\"] | LESS_THAN AMP -> OP[\"<&\"] | LESS_THAN GREATER_THAN -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP_GREATER_THAN -> OP[\"&>\"] | AMP_RSHIFT -> OP[\"&>>\"] | LESS_THAN -> LESS_THAN | GREATER_THAN -> GREATER_THAN ) )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==BLANK) ) {
                int LA44_1 = input.LA(2);

                if ( (LA44_1==DIGIT) ) {
                    alt44=1;
                }
                else if ( ((LA44_1>=LESS_THAN && LA44_1<=GREATER_THAN)||(LA44_1>=RSHIFT && LA44_1<=AMP_RSHIFT)) ) {
                    alt44=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA44_0>=LESS_THAN && LA44_0<=GREATER_THAN)||(LA44_0>=RSHIFT && LA44_0<=AMP_RSHIFT)) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // java_libbash.g:284:4: BLANK DIGIT redirection_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BLANK81=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_operator1069); if (state.failed) return retval;
                    DIGIT82=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_redirection_operator1072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT82_tree = (CommonTree)adaptor.create(DIGIT82);
                    adaptor.addChild(root_0, DIGIT82_tree);
                    }
                    pushFollow(FOLLOW_redirection_operator_in_redirection_operator1074);
                    redirection_operator83=redirection_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, redirection_operator83.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:285:4: ( BLANK )? ( AMP_LESS_THAN -> OP[\"&<\"] | GREATER_THAN AMP -> OP[\">&\"] | LESS_THAN AMP -> OP[\"<&\"] | LESS_THAN GREATER_THAN -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP_GREATER_THAN -> OP[\"&>\"] | AMP_RSHIFT -> OP[\"&>>\"] | LESS_THAN -> LESS_THAN | GREATER_THAN -> GREATER_THAN )
                    {
                    // java_libbash.g:285:4: ( BLANK )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==BLANK) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // java_libbash.g:285:4: BLANK
                            {
                            BLANK84=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirection_operator1079); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK84);


                            }
                            break;

                    }

                    // java_libbash.g:286:3: ( AMP_LESS_THAN -> OP[\"&<\"] | GREATER_THAN AMP -> OP[\">&\"] | LESS_THAN AMP -> OP[\"<&\"] | LESS_THAN GREATER_THAN -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP_GREATER_THAN -> OP[\"&>\"] | AMP_RSHIFT -> OP[\"&>>\"] | LESS_THAN -> LESS_THAN | GREATER_THAN -> GREATER_THAN )
                    int alt43=9;
                    alt43 = dfa43.predict(input);
                    switch (alt43) {
                        case 1 :
                            // java_libbash.g:287:4: AMP_LESS_THAN
                            {
                            AMP_LESS_THAN85=(Token)match(input,AMP_LESS_THAN,FOLLOW_AMP_LESS_THAN_in_redirection_operator1089); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AMP_LESS_THAN.add(AMP_LESS_THAN85);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 287:18: -> OP[\"&<\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&<"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:288:6: GREATER_THAN AMP
                            {
                            GREATER_THAN86=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_redirection_operator1101); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GREATER_THAN.add(GREATER_THAN86);

                            AMP87=(Token)match(input,AMP,FOLLOW_AMP_in_redirection_operator1103); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AMP.add(AMP87);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 288:23: -> OP[\">&\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, ">&"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // java_libbash.g:289:6: LESS_THAN AMP
                            {
                            LESS_THAN88=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_redirection_operator1115); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN88);

                            AMP89=(Token)match(input,AMP,FOLLOW_AMP_in_redirection_operator1117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AMP.add(AMP89);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 289:20: -> OP[\"<&\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<&"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // java_libbash.g:290:6: LESS_THAN GREATER_THAN
                            {
                            LESS_THAN90=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_redirection_operator1129); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN90);

                            GREATER_THAN91=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_redirection_operator1131); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GREATER_THAN.add(GREATER_THAN91);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 290:29: -> OP[\"<>\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<>"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // java_libbash.g:291:6: RSHIFT
                            {
                            RSHIFT92=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_redirection_operator1143); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RSHIFT.add(RSHIFT92);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 291:13: -> OP[\">>\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, ">>"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // java_libbash.g:292:6: AMP_GREATER_THAN
                            {
                            AMP_GREATER_THAN93=(Token)match(input,AMP_GREATER_THAN,FOLLOW_AMP_GREATER_THAN_in_redirection_operator1155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AMP_GREATER_THAN.add(AMP_GREATER_THAN93);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 292:23: -> OP[\"&>\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&>"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // java_libbash.g:293:6: AMP_RSHIFT
                            {
                            AMP_RSHIFT94=(Token)match(input,AMP_RSHIFT,FOLLOW_AMP_RSHIFT_in_redirection_operator1167); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AMP_RSHIFT.add(AMP_RSHIFT94);



                            // AST REWRITE
                            // elements: 
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 293:17: -> OP[\"&>>\"]
                            {
                                adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&>>"));

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // java_libbash.g:294:6: LESS_THAN
                            {
                            LESS_THAN95=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_redirection_operator1180); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN95);



                            // AST REWRITE
                            // elements: LESS_THAN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 294:16: -> LESS_THAN
                            {
                                adaptor.addChild(root_0, stream_LESS_THAN.nextNode());

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 9 :
                            // java_libbash.g:295:6: GREATER_THAN
                            {
                            GREATER_THAN96=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_redirection_operator1191); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GREATER_THAN.add(GREATER_THAN96);



                            // AST REWRITE
                            // elements: GREATER_THAN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 295:19: -> GREATER_THAN
                            {
                                adaptor.addChild(root_0, stream_GREATER_THAN.nextNode());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "redirection_operator"

    public static class command_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command"
    // java_libbash.g:298:1: command : command_atom ( redirection ( here_document )? -> ^( COMMAND redirection command_atom ( here_document )? ) | here_document -> ^( COMMAND command_atom here_document ) | -> ^( COMMAND command_atom ) ) ;
    public final java_libbashParser.command_return command() throws RecognitionException {
        java_libbashParser.command_return retval = new java_libbashParser.command_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.command_atom_return command_atom97 = null;

        java_libbashParser.redirection_return redirection98 = null;

        java_libbashParser.here_document_return here_document99 = null;

        java_libbashParser.here_document_return here_document100 = null;


        RewriteRuleSubtreeStream stream_command_atom=new RewriteRuleSubtreeStream(adaptor,"rule command_atom");
        RewriteRuleSubtreeStream stream_redirection=new RewriteRuleSubtreeStream(adaptor,"rule redirection");
        RewriteRuleSubtreeStream stream_here_document=new RewriteRuleSubtreeStream(adaptor,"rule here_document");
        try {
            // java_libbash.g:299:2: ( command_atom ( redirection ( here_document )? -> ^( COMMAND redirection command_atom ( here_document )? ) | here_document -> ^( COMMAND command_atom here_document ) | -> ^( COMMAND command_atom ) ) )
            // java_libbash.g:299:4: command_atom ( redirection ( here_document )? -> ^( COMMAND redirection command_atom ( here_document )? ) | here_document -> ^( COMMAND command_atom here_document ) | -> ^( COMMAND command_atom ) )
            {
            pushFollow(FOLLOW_command_atom_in_command1208);
            command_atom97=command_atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_atom.add(command_atom97.getTree());
            // java_libbash.g:300:3: ( redirection ( here_document )? -> ^( COMMAND redirection command_atom ( here_document )? ) | here_document -> ^( COMMAND command_atom here_document ) | -> ^( COMMAND command_atom ) )
            int alt46=3;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                switch ( input.LA(2) ) {
                case LESS_THAN:
                case GREATER_THAN:
                case DIGIT:
                case HERE_STRING_OP:
                case RSHIFT:
                case AMP_LESS_THAN:
                case AMP_GREATER_THAN:
                case AMP_RSHIFT:
                    {
                    alt46=1;
                    }
                    break;
                case EOF:
                case EOL:
                case BLANK:
                case SEMIC:
                case AMP:
                case LOGICAND:
                case LOGICOR:
                case PIPE:
                case RPAREN:
                case DOUBLE_SEMIC:
                case ESAC:
                    {
                    alt46=3;
                    }
                    break;
                case LSHIFT:
                    {
                    alt46=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }

                }
                break;
            case LESS_THAN:
            case GREATER_THAN:
            case HERE_STRING_OP:
            case RSHIFT:
            case AMP_LESS_THAN:
            case AMP_GREATER_THAN:
            case AMP_RSHIFT:
                {
                alt46=1;
                }
                break;
            case LSHIFT:
                {
                alt46=2;
                }
                break;
            case EOF:
            case EOL:
            case SEMIC:
            case AMP:
            case LOGICAND:
            case LOGICOR:
            case PIPE:
            case RPAREN:
            case DOUBLE_SEMIC:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // java_libbash.g:301:4: redirection ( here_document )?
                    {
                    pushFollow(FOLLOW_redirection_in_command1217);
                    redirection98=redirection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redirection.add(redirection98.getTree());
                    // java_libbash.g:301:16: ( here_document )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==BLANK) ) {
                        int LA45_1 = input.LA(2);

                        if ( (LA45_1==LSHIFT) ) {
                            alt45=1;
                        }
                    }
                    else if ( (LA45_0==LSHIFT) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // java_libbash.g:301:16: here_document
                            {
                            pushFollow(FOLLOW_here_document_in_command1219);
                            here_document99=here_document();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_here_document.add(here_document99.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: command_atom, redirection, here_document
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 301:31: -> ^( COMMAND redirection command_atom ( here_document )? )
                    {
                        // java_libbash.g:301:34: ^( COMMAND redirection command_atom ( here_document )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND, "COMMAND"), root_1);

                        adaptor.addChild(root_1, stream_redirection.nextTree());
                        adaptor.addChild(root_1, stream_command_atom.nextTree());
                        // java_libbash.g:301:69: ( here_document )?
                        if ( stream_here_document.hasNext() ) {
                            adaptor.addChild(root_1, stream_here_document.nextTree());

                        }
                        stream_here_document.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:302:6: here_document
                    {
                    pushFollow(FOLLOW_here_document_in_command1240);
                    here_document100=here_document();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_here_document.add(here_document100.getTree());


                    // AST REWRITE
                    // elements: command_atom, here_document
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 302:20: -> ^( COMMAND command_atom here_document )
                    {
                        // java_libbash.g:302:23: ^( COMMAND command_atom here_document )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND, "COMMAND"), root_1);

                        adaptor.addChild(root_1, stream_command_atom.nextTree());
                        adaptor.addChild(root_1, stream_here_document.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:303:6: 
                    {

                    // AST REWRITE
                    // elements: command_atom
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 303:6: -> ^( COMMAND command_atom )
                    {
                        // java_libbash.g:303:9: ^( COMMAND command_atom )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND, "COMMAND"), root_1);

                        adaptor.addChild(root_1, stream_command_atom.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command"

    public static class command_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command_atom"
    // java_libbash.g:306:1: command_atom : ({...}? => compound_command | {...}? => NAME BLANK string_expr_no_reserved_word ( ( ( BLANK )? parens ( wspace )? ) | wspace ) compound_command -> ^( FUNCTION string_expr_no_reserved_word compound_command ) | ( name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> variable_definitions ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) ) | ( EXPORT )=> EXPORT BLANK builtin_variable_definition_item -> ^( STRING EXPORT ) ^( STRING builtin_variable_definition_item ) | ( LOCAL )=> LOCAL BLANK builtin_variable_definition_item -> ^( STRING LOCAL ) ^( STRING builtin_variable_definition_item ) | ( DECLARE )=> DECLARE BLANK builtin_variable_definition_item -> ^( STRING DECLARE ) ^( STRING builtin_variable_definition_item ) | command_name ( ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command -> ^( FUNCTION command_name compound_command ) | ({...}? => BLANK bash_command_arguments )* -> command_name ( bash_command_arguments )* ) );
    public final java_libbashParser.command_atom_return command_atom() throws RecognitionException {
        java_libbashParser.command_atom_return retval = new java_libbashParser.command_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NAME102=null;
        Token BLANK103=null;
        Token BLANK105=null;
        Token BLANK111=null;
        Token EXPORT113=null;
        Token BLANK114=null;
        Token LOCAL116=null;
        Token BLANK117=null;
        Token DECLARE119=null;
        Token BLANK120=null;
        Token BLANK123=null;
        Token BLANK127=null;
        java_libbashParser.compound_command_return compound_command101 = null;

        java_libbashParser.string_expr_no_reserved_word_return string_expr_no_reserved_word104 = null;

        java_libbashParser.parens_return parens106 = null;

        java_libbashParser.wspace_return wspace107 = null;

        java_libbashParser.wspace_return wspace108 = null;

        java_libbashParser.compound_command_return compound_command109 = null;

        java_libbashParser.variable_definitions_return variable_definitions110 = null;

        java_libbashParser.bash_command_return bash_command112 = null;

        java_libbashParser.builtin_variable_definition_item_return builtin_variable_definition_item115 = null;

        java_libbashParser.builtin_variable_definition_item_return builtin_variable_definition_item118 = null;

        java_libbashParser.builtin_variable_definition_item_return builtin_variable_definition_item121 = null;

        java_libbashParser.command_name_return command_name122 = null;

        java_libbashParser.parens_return parens124 = null;

        java_libbashParser.wspace_return wspace125 = null;

        java_libbashParser.compound_command_return compound_command126 = null;

        java_libbashParser.bash_command_arguments_return bash_command_arguments128 = null;


        CommonTree NAME102_tree=null;
        CommonTree BLANK103_tree=null;
        CommonTree BLANK105_tree=null;
        CommonTree BLANK111_tree=null;
        CommonTree EXPORT113_tree=null;
        CommonTree BLANK114_tree=null;
        CommonTree LOCAL116_tree=null;
        CommonTree BLANK117_tree=null;
        CommonTree DECLARE119_tree=null;
        CommonTree BLANK120_tree=null;
        CommonTree BLANK123_tree=null;
        CommonTree BLANK127_tree=null;
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_EXPORT=new RewriteRuleTokenStream(adaptor,"token EXPORT");
        RewriteRuleTokenStream stream_LOCAL=new RewriteRuleTokenStream(adaptor,"token LOCAL");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_name=new RewriteRuleSubtreeStream(adaptor,"rule command_name");
        RewriteRuleSubtreeStream stream_bash_command_arguments=new RewriteRuleSubtreeStream(adaptor,"rule bash_command_arguments");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_builtin_variable_definition_item=new RewriteRuleSubtreeStream(adaptor,"rule builtin_variable_definition_item");
        RewriteRuleSubtreeStream stream_bash_command=new RewriteRuleSubtreeStream(adaptor,"rule bash_command");
        RewriteRuleSubtreeStream stream_parens=new RewriteRuleSubtreeStream(adaptor,"rule parens");
        RewriteRuleSubtreeStream stream_string_expr_no_reserved_word=new RewriteRuleSubtreeStream(adaptor,"rule string_expr_no_reserved_word");
        RewriteRuleSubtreeStream stream_compound_command=new RewriteRuleSubtreeStream(adaptor,"rule compound_command");
        RewriteRuleSubtreeStream stream_variable_definitions=new RewriteRuleSubtreeStream(adaptor,"rule variable_definitions");
        try {
            // java_libbash.g:307:2: ({...}? => compound_command | {...}? => NAME BLANK string_expr_no_reserved_word ( ( ( BLANK )? parens ( wspace )? ) | wspace ) compound_command -> ^( FUNCTION string_expr_no_reserved_word compound_command ) | ( name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> variable_definitions ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) ) | ( EXPORT )=> EXPORT BLANK builtin_variable_definition_item -> ^( STRING EXPORT ) ^( STRING builtin_variable_definition_item ) | ( LOCAL )=> LOCAL BLANK builtin_variable_definition_item -> ^( STRING LOCAL ) ^( STRING builtin_variable_definition_item ) | ( DECLARE )=> DECLARE BLANK builtin_variable_definition_item -> ^( STRING DECLARE ) ^( STRING builtin_variable_definition_item ) | command_name ( ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command -> ^( FUNCTION command_name compound_command ) | ({...}? => BLANK bash_command_arguments )* -> command_name ( bash_command_arguments )* ) )
            int alt55=7;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // java_libbash.g:307:4: {...}? => compound_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                       LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                      (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "command_atom", "LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||\n   LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||\n\n\n\n\n  (LA(1) == NAME && LA(2) == BLANK && \"test\".equals(get_string(LT(1))))");
                    }
                    pushFollow(FOLLOW_compound_command_in_command_atom1280);
                    compound_command101=compound_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_command101.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:314:4: {...}? => NAME BLANK string_expr_no_reserved_word ( ( ( BLANK )? parens ( wspace )? ) | wspace ) compound_command
                    {
                    if ( !((LA(1) == NAME && LA(2) == BLANK && "function".equals(get_string(LT(1))))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "command_atom", "LA(1) == NAME && LA(2) == BLANK && \"function\".equals(get_string(LT(1)))");
                    }
                    NAME102=(Token)match(input,NAME,FOLLOW_NAME_in_command_atom1293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME102);

                    BLANK103=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK103);

                    pushFollow(FOLLOW_string_expr_no_reserved_word_in_command_atom1297);
                    string_expr_no_reserved_word104=string_expr_no_reserved_word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_string_expr_no_reserved_word.add(string_expr_no_reserved_word104.getTree());
                    // java_libbash.g:316:44: ( ( ( BLANK )? parens ( wspace )? ) | wspace )
                    int alt49=2;
                    switch ( input.LA(1) ) {
                    case BLANK:
                        {
                        int LA49_1 = input.LA(2);

                        if ( ((LA49_1>=EOL && LA49_1<=BLANK)||LA49_1==NAME||LA49_1==LSQUARE||LA49_1==LBRACE||LA49_1==FOR||LA49_1==LLPAREN||(LA49_1>=SELECT && LA49_1<=IF)||(LA49_1>=WHILE && LA49_1<=CASE)) ) {
                            alt49=2;
                        }
                        else if ( (LA49_1==LPAREN) ) {
                            switch ( input.LA(3) ) {
                            case BLANK:
                                {
                                int LA49_5 = input.LA(4);

                                if ( ((LA49_5>=EOL && LA49_5<=BLANK)||LA49_5==POUND||LA49_5==BANG||(LA49_5>=TIME && LA49_5<=LPAREN)||(LA49_5>=DIGIT && LA49_5<=HERE_STRING_OP)||(LA49_5>=RSHIFT && LA49_5<=LBRACE)||LA49_5==FOR||LA49_5==LLPAREN||(LA49_5>=SELECT && LA49_5<=IF)||(LA49_5>=WHILE && LA49_5<=CASE)||(LA49_5>=TILDE && LA49_5<=SINGLE_QUOTED_STRING_TOKEN)||(LA49_5>=SLASH && LA49_5<=QMARK)||(LA49_5>=COMMAND_SUBSTITUTION_PAREN && LA49_5<=COMMAND_SUBSTITUTION_TICK)) ) {
                                    alt49=2;
                                }
                                else if ( (LA49_5==RPAREN) ) {
                                    alt49=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 49, 5, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case EOL:
                            case POUND:
                            case BANG:
                            case TIME:
                            case MINUS:
                            case LETTER:
                            case LESS_THAN:
                            case GREATER_THAN:
                            case LPAREN:
                            case DIGIT:
                            case HERE_STRING_OP:
                            case RSHIFT:
                            case AMP_LESS_THAN:
                            case AMP_GREATER_THAN:
                            case AMP_RSHIFT:
                            case NAME:
                            case EXPORT:
                            case LOCAL:
                            case DECLARE:
                            case LSQUARE:
                            case RSQUARE:
                            case EQUALS:
                            case PLUS:
                            case DQUOTE:
                            case LBRACE:
                            case FOR:
                            case LLPAREN:
                            case SELECT:
                            case IF:
                            case WHILE:
                            case UNTIL:
                            case CASE:
                            case TILDE:
                            case ESC:
                            case ESC_LT:
                            case ESC_GT:
                            case UNDERSCORE:
                            case NUMBER:
                            case DOLLAR:
                            case SINGLE_QUOTED_STRING_TOKEN:
                            case SLASH:
                            case OTHER:
                            case PCT:
                            case PCTPCT:
                            case DOT:
                            case DOTDOT:
                            case COLON:
                            case CARET:
                            case COMMA:
                            case AT:
                            case ESC_RPAREN:
                            case ESC_LPAREN:
                            case ESC_RSQUARE:
                            case ESC_LSQUARE:
                            case ESC_DOLLAR:
                            case ESC_TICK:
                            case ESC_DQUOTE:
                            case ESC_SQUOTE:
                            case TIMES:
                            case QMARK:
                            case COMMAND_SUBSTITUTION_PAREN:
                            case COMMAND_SUBSTITUTION_TICK:
                                {
                                alt49=2;
                                }
                                break;
                            case RPAREN:
                                {
                                alt49=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 4, input);

                                throw nvae;
                            }

                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case LPAREN:
                        {
                        alt49=1;
                        }
                        break;
                    case EOL:
                        {
                        alt49=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 49, 0, input);

                        throw nvae;
                    }

                    switch (alt49) {
                        case 1 :
                            // java_libbash.g:316:45: ( ( BLANK )? parens ( wspace )? )
                            {
                            // java_libbash.g:316:45: ( ( BLANK )? parens ( wspace )? )
                            // java_libbash.g:316:46: ( BLANK )? parens ( wspace )?
                            {
                            // java_libbash.g:316:46: ( BLANK )?
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==BLANK) ) {
                                alt47=1;
                            }
                            switch (alt47) {
                                case 1 :
                                    // java_libbash.g:316:46: BLANK
                                    {
                                    BLANK105=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1301); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK105);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_parens_in_command_atom1304);
                            parens106=parens();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parens.add(parens106.getTree());
                            // java_libbash.g:316:60: ( wspace )?
                            int alt48=2;
                            int LA48_0 = input.LA(1);

                            if ( ((LA48_0>=EOL && LA48_0<=BLANK)) ) {
                                alt48=1;
                            }
                            switch (alt48) {
                                case 1 :
                                    // java_libbash.g:316:60: wspace
                                    {
                                    pushFollow(FOLLOW_wspace_in_command_atom1306);
                                    wspace107=wspace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_wspace.add(wspace107.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // java_libbash.g:316:69: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_command_atom1310);
                            wspace108=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace108.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_compound_command_in_command_atom1313);
                    compound_command109=compound_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_command.add(compound_command109.getTree());


                    // AST REWRITE
                    // elements: compound_command, string_expr_no_reserved_word
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 317:4: -> ^( FUNCTION string_expr_no_reserved_word compound_command )
                    {
                        // java_libbash.g:317:7: ^( FUNCTION string_expr_no_reserved_word compound_command )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_string_expr_no_reserved_word.nextTree());
                        adaptor.addChild(root_1, stream_compound_command.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:318:4: ( name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> variable_definitions ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) )
                    {
                    pushFollow(FOLLOW_variable_definitions_in_command_atom1347);
                    variable_definitions110=variable_definitions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_definitions.add(variable_definitions110.getTree());
                    // java_libbash.g:319:4: ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) )
                    int alt50=2;
                    alt50 = dfa50.predict(input);
                    switch (alt50) {
                        case 1 :
                            // java_libbash.g:320:5: ( BLANK bash_command )=> BLANK bash_command
                            {
                            BLANK111=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1366); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK111);

                            pushFollow(FOLLOW_bash_command_in_command_atom1368);
                            bash_command112=bash_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bash_command.add(bash_command112.getTree());


                            // AST REWRITE
                            // elements: variable_definitions, bash_command
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 320:48: -> bash_command variable_definitions
                            {
                                adaptor.addChild(root_0, stream_bash_command.nextTree());
                                adaptor.addChild(root_0, stream_variable_definitions.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:321:7: 
                            {

                            // AST REWRITE
                            // elements: variable_definitions
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 321:7: -> ^( VARIABLE_DEFINITIONS variable_definitions )
                            {
                                // java_libbash.g:321:10: ^( VARIABLE_DEFINITIONS variable_definitions )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_DEFINITIONS, "VARIABLE_DEFINITIONS"), root_1);

                                adaptor.addChild(root_1, stream_variable_definitions.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // java_libbash.g:323:4: ( EXPORT )=> EXPORT BLANK builtin_variable_definition_item
                    {
                    EXPORT113=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_command_atom1404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXPORT.add(EXPORT113);

                    BLANK114=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK114);

                    pushFollow(FOLLOW_builtin_variable_definition_item_in_command_atom1408);
                    builtin_variable_definition_item115=builtin_variable_definition_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtin_variable_definition_item.add(builtin_variable_definition_item115.getTree());


                    // AST REWRITE
                    // elements: builtin_variable_definition_item, EXPORT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 324:4: -> ^( STRING EXPORT ) ^( STRING builtin_variable_definition_item )
                    {
                        // java_libbash.g:324:7: ^( STRING EXPORT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_EXPORT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        // java_libbash.g:324:24: ^( STRING builtin_variable_definition_item )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_builtin_variable_definition_item.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:325:4: ( LOCAL )=> LOCAL BLANK builtin_variable_definition_item
                    {
                    LOCAL116=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_command_atom1436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOCAL.add(LOCAL116);

                    BLANK117=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK117);

                    pushFollow(FOLLOW_builtin_variable_definition_item_in_command_atom1440);
                    builtin_variable_definition_item118=builtin_variable_definition_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtin_variable_definition_item.add(builtin_variable_definition_item118.getTree());


                    // AST REWRITE
                    // elements: builtin_variable_definition_item, LOCAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 326:4: -> ^( STRING LOCAL ) ^( STRING builtin_variable_definition_item )
                    {
                        // java_libbash.g:326:7: ^( STRING LOCAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_LOCAL.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        // java_libbash.g:326:23: ^( STRING builtin_variable_definition_item )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_builtin_variable_definition_item.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:327:4: ( DECLARE )=> DECLARE BLANK builtin_variable_definition_item
                    {
                    DECLARE119=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_command_atom1468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(DECLARE119);

                    BLANK120=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK120);

                    pushFollow(FOLLOW_builtin_variable_definition_item_in_command_atom1472);
                    builtin_variable_definition_item121=builtin_variable_definition_item();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtin_variable_definition_item.add(builtin_variable_definition_item121.getTree());


                    // AST REWRITE
                    // elements: builtin_variable_definition_item, DECLARE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 328:4: -> ^( STRING DECLARE ) ^( STRING builtin_variable_definition_item )
                    {
                        // java_libbash.g:328:7: ^( STRING DECLARE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_DECLARE.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }
                        // java_libbash.g:328:25: ^( STRING builtin_variable_definition_item )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_builtin_variable_definition_item.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // java_libbash.g:329:4: command_name ( ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command -> ^( FUNCTION command_name compound_command ) | ({...}? => BLANK bash_command_arguments )* -> command_name ( bash_command_arguments )* )
                    {
                    pushFollow(FOLLOW_command_name_in_command_atom1494);
                    command_name122=command_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_command_name.add(command_name122.getTree());
                    // java_libbash.g:330:3: ( ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command -> ^( FUNCTION command_name compound_command ) | ({...}? => BLANK bash_command_arguments )* -> command_name ( bash_command_arguments )* )
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==BLANK) ) {
                        int LA54_1 = input.LA(2);

                        if ( (LA54_1==EOF||(LA54_1>=EOL && LA54_1<=AMP)||(LA54_1>=LOGICAND && LA54_1<=LOGICOR)||(LA54_1>=LESS_THAN && LA54_1<=GREATER_THAN)||(LA54_1>=RPAREN && LA54_1<=AMP_RSHIFT)||LA54_1==DOUBLE_SEMIC||LA54_1==ESAC) ) {
                            alt54=2;
                        }
                        else if ( (LA54_1==LPAREN) && (synpred13_java_libbash())) {
                            alt54=1;
                        }
                        else if ( (LA54_1==POUND||LA54_1==BANG||(LA54_1>=TIME && LA54_1<=LETTER)||(LA54_1>=NAME && LA54_1<=DONE)||(LA54_1>=SELECT && LA54_1<=CASE)||(LA54_1>=TILDE && LA54_1<=SINGLE_QUOTED_STRING_TOKEN)||(LA54_1>=SLASH && LA54_1<=QMARK)||(LA54_1>=COMMAND_SUBSTITUTION_PAREN && LA54_1<=COMMAND_SUBSTITUTION_TICK)) && ((LA(1) == BLANK &&
                             (
                              !is_special_token(LA(2))

                              &&(LA(2) != DIGIT || (LA(3) != AMP_LESS_THAN &&
                                     LA(3) != AMP_GREATER_THAN &&
                                     LA(3) != AMP_RSHIFT &&
                                     LA(3) != GREATER_THAN &&
                                     LA(3) != LESS_THAN &&
                                     LA(3) != RSHIFT))
                             )))) {
                            alt54=2;
                        }
                        else if ( (LA54_1==PIPE) ) {
                            alt54=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 54, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA54_0==LPAREN) && (synpred13_java_libbash())) {
                        alt54=1;
                    }
                    else if ( (LA54_0==EOF||LA54_0==EOL||(LA54_0>=SEMIC && LA54_0<=AMP)||(LA54_0>=LOGICAND && LA54_0<=LOGICOR)||LA54_0==PIPE||(LA54_0>=LESS_THAN && LA54_0<=GREATER_THAN)||LA54_0==RPAREN||(LA54_0>=HERE_STRING_OP && LA54_0<=AMP_RSHIFT)||LA54_0==DOUBLE_SEMIC) ) {
                        alt54=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 54, 0, input);

                        throw nvae;
                    }
                    switch (alt54) {
                        case 1 :
                            // java_libbash.g:331:4: ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command
                            {
                            // java_libbash.g:331:23: ( BLANK )?
                            int alt51=2;
                            int LA51_0 = input.LA(1);

                            if ( (LA51_0==BLANK) ) {
                                alt51=1;
                            }
                            switch (alt51) {
                                case 1 :
                                    // java_libbash.g:331:23: BLANK
                                    {
                                    BLANK123=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1512); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK123);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_parens_in_command_atom1515);
                            parens124=parens();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parens.add(parens124.getTree());
                            // java_libbash.g:331:37: ( wspace )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( ((LA52_0>=EOL && LA52_0<=BLANK)) ) {
                                alt52=1;
                            }
                            switch (alt52) {
                                case 1 :
                                    // java_libbash.g:331:37: wspace
                                    {
                                    pushFollow(FOLLOW_wspace_in_command_atom1517);
                                    wspace125=wspace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_wspace.add(wspace125.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_compound_command_in_command_atom1520);
                            compound_command126=compound_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_compound_command.add(compound_command126.getTree());


                            // AST REWRITE
                            // elements: compound_command, command_name
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 332:5: -> ^( FUNCTION command_name compound_command )
                            {
                                // java_libbash.g:332:8: ^( FUNCTION command_name compound_command )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "FUNCTION"), root_1);

                                adaptor.addChild(root_1, stream_command_name.nextTree());
                                adaptor.addChild(root_1, stream_compound_command.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:333:6: ({...}? => BLANK bash_command_arguments )*
                            {
                            // java_libbash.g:333:6: ({...}? => BLANK bash_command_arguments )*
                            loop53:
                            do {
                                int alt53=2;
                                alt53 = dfa53.predict(input);
                                switch (alt53) {
                            	case 1 :
                            	    // java_libbash.g:334:6: {...}? => BLANK bash_command_arguments
                            	    {
                            	    if ( !((LA(1) == BLANK &&
                            	         (
                            	          !is_special_token(LA(2))

                            	          &&(LA(2) != DIGIT || (LA(3) != AMP_LESS_THAN &&
                            	                 LA(3) != AMP_GREATER_THAN &&
                            	                 LA(3) != AMP_RSHIFT &&
                            	                 LA(3) != GREATER_THAN &&
                            	                 LA(3) != LESS_THAN &&
                            	                 LA(3) != RSHIFT))
                            	         ))) ) {
                            	        if (state.backtracking>0) {state.failed=true; return retval;}
                            	        throw new FailedPredicateException(input, "command_atom", "LA(1) == BLANK &&\n     (\n      !is_special_token(LA(2))\n\n      &&(LA(2) != DIGIT || (LA(3) != AMP_LESS_THAN &&\n             LA(3) != AMP_GREATER_THAN &&\n             LA(3) != AMP_RSHIFT &&\n             LA(3) != GREATER_THAN &&\n             LA(3) != LESS_THAN &&\n             LA(3) != RSHIFT))\n     )");
                            	    }
                            	    BLANK127=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_atom1552); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK127);

                            	    pushFollow(FOLLOW_bash_command_arguments_in_command_atom1554);
                            	    bash_command_arguments128=bash_command_arguments();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_bash_command_arguments.add(bash_command_arguments128.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop53;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: command_name, bash_command_arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 345:8: -> command_name ( bash_command_arguments )*
                            {
                                adaptor.addChild(root_0, stream_command_name.nextTree());
                                // java_libbash.g:345:24: ( bash_command_arguments )*
                                while ( stream_bash_command_arguments.hasNext() ) {
                                    adaptor.addChild(root_0, stream_bash_command_arguments.nextTree());

                                }
                                stream_bash_command_arguments.reset();

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_atom"

    public static class command_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command_name"
    // java_libbash.g:348:1: command_name : ( string_expr_no_reserved_word | {...}? => redirection_atom -> redirection_atom ^( STRING NAME ) );
    public final java_libbashParser.command_name_return command_name() throws RecognitionException {
        java_libbashParser.command_name_return retval = new java_libbashParser.command_name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.string_expr_no_reserved_word_return string_expr_no_reserved_word129 = null;

        java_libbashParser.redirection_atom_return redirection_atom130 = null;


        RewriteRuleSubtreeStream stream_redirection_atom=new RewriteRuleSubtreeStream(adaptor,"rule redirection_atom");
        try {
            // java_libbash.g:349:2: ( string_expr_no_reserved_word | {...}? => redirection_atom -> redirection_atom ^( STRING NAME ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==POUND||LA56_0==BANG||(LA56_0>=MINUS && LA56_0<=LETTER)||LA56_0==DIGIT||(LA56_0>=NAME && LA56_0<=LBRACE)||(LA56_0>=TILDE && LA56_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA56_0>=SLASH && LA56_0<=QMARK)||(LA56_0>=COMMAND_SUBSTITUTION_PAREN && LA56_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                alt56=1;
            }
            else if ( (LA56_0==BLANK||(LA56_0>=LESS_THAN && LA56_0<=GREATER_THAN)||LA56_0==HERE_STRING_OP||(LA56_0>=RSHIFT && LA56_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // java_libbash.g:349:4: string_expr_no_reserved_word
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_expr_no_reserved_word_in_command_name1581);
                    string_expr_no_reserved_word129=string_expr_no_reserved_word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr_no_reserved_word129.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:350:4: {...}? => redirection_atom
                    {
                    if ( !((LA(1) == GREATER_THAN)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "command_name", "LA(1) == GREATER_THAN");
                    }
                    pushFollow(FOLLOW_redirection_atom_in_command_name1590);
                    redirection_atom130=redirection_atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_redirection_atom.add(redirection_atom130.getTree());


                    // AST REWRITE
                    // elements: redirection_atom
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 350:49: -> redirection_atom ^( STRING NAME )
                    {
                        adaptor.addChild(root_0, stream_redirection_atom.nextTree());
                        // java_libbash.g:350:69: ^( STRING NAME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NAME, "NAME"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_name"

    public static class variable_definitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_definitions"
    // java_libbash.g:352:1: variable_definitions : variable_definition_atom ( ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom )* ;
    public final java_libbashParser.variable_definitions_return variable_definitions() throws RecognitionException {
        java_libbashParser.variable_definitions_return retval = new java_libbashParser.variable_definitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK132=null;
        java_libbashParser.variable_definition_atom_return variable_definition_atom131 = null;

        java_libbashParser.variable_definition_atom_return variable_definition_atom133 = null;


        CommonTree BLANK132_tree=null;

        try {
            // java_libbash.g:353:2: ( variable_definition_atom ( ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom )* )
            // java_libbash.g:353:4: variable_definition_atom ( ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variable_definition_atom_in_variable_definitions1609);
            variable_definition_atom131=variable_definition_atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_definition_atom131.getTree());
            // java_libbash.g:353:29: ( ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // java_libbash.g:353:30: ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom
            	    {
            	    BLANK132=(Token)match(input,BLANK,FOLLOW_BLANK_in_variable_definitions1630); if (state.failed) return retval;
            	    pushFollow(FOLLOW_variable_definition_atom_in_variable_definitions1633);
            	    variable_definition_atom133=variable_definition_atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_definition_atom133.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_definitions"

    public static class variable_definition_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_definition_atom"
    // java_libbash.g:355:1: variable_definition_atom : ( name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS ( string_expr )? -> ^( EQUALS ^( name explicit_arithmetic ) ( string_expr )? ) | name EQUALS ( value )? -> ^( EQUALS name ( value )? ) | name PLUS EQUALS array_value -> ^( PLUS_ASSIGN name array_value ) | name PLUS EQUALS ( string_expr_part )* -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ( string_expr_part )* ) ) );
    public final java_libbashParser.variable_definition_atom_return variable_definition_atom() throws RecognitionException {
        java_libbashParser.variable_definition_atom_return retval = new java_libbashParser.variable_definition_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE135=null;
        Token BLANK136=null;
        Token BLANK138=null;
        Token RSQUARE139=null;
        Token EQUALS140=null;
        Token EQUALS143=null;
        Token PLUS146=null;
        Token EQUALS147=null;
        Token PLUS150=null;
        Token EQUALS151=null;
        java_libbashParser.name_return name134 = null;

        java_libbashParser.explicit_arithmetic_return explicit_arithmetic137 = null;

        java_libbashParser.string_expr_return string_expr141 = null;

        java_libbashParser.name_return name142 = null;

        java_libbashParser.value_return value144 = null;

        java_libbashParser.name_return name145 = null;

        java_libbashParser.array_value_return array_value148 = null;

        java_libbashParser.name_return name149 = null;

        java_libbashParser.string_expr_part_return string_expr_part152 = null;


        CommonTree LSQUARE135_tree=null;
        CommonTree BLANK136_tree=null;
        CommonTree BLANK138_tree=null;
        CommonTree RSQUARE139_tree=null;
        CommonTree EQUALS140_tree=null;
        CommonTree EQUALS143_tree=null;
        CommonTree PLUS146_tree=null;
        CommonTree EQUALS147_tree=null;
        CommonTree PLUS150_tree=null;
        CommonTree EQUALS151_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_explicit_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule explicit_arithmetic");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        RewriteRuleSubtreeStream stream_string_expr_part=new RewriteRuleSubtreeStream(adaptor,"rule string_expr_part");
        RewriteRuleSubtreeStream stream_string_expr=new RewriteRuleSubtreeStream(adaptor,"rule string_expr");
        RewriteRuleSubtreeStream stream_array_value=new RewriteRuleSubtreeStream(adaptor,"rule array_value");
        try {
            // java_libbash.g:356:2: ( name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS ( string_expr )? -> ^( EQUALS ^( name explicit_arithmetic ) ( string_expr )? ) | name EQUALS ( value )? -> ^( EQUALS name ( value )? ) | name PLUS EQUALS array_value -> ^( PLUS_ASSIGN name array_value ) | name PLUS EQUALS ( string_expr_part )* -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ( string_expr_part )* ) ) )
            int alt63=4;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LETTER||LA63_0==NAME||LA63_0==UNDERSCORE) ) {
                switch ( input.LA(2) ) {
                case PLUS:
                    {
                    int LA63_2 = input.LA(3);

                    if ( (LA63_2==EQUALS) ) {
                        int LA63_5 = input.LA(4);

                        if ( (LA63_5==EOF||(LA63_5>=EOL && LA63_5<=GREATER_THAN)||(LA63_5>=RPAREN && LA63_5<=LBRACE)||(LA63_5>=FOR && LA63_5<=DONE)||(LA63_5>=DOUBLE_SEMIC && LA63_5<=SINGLE_QUOTED_STRING_TOKEN)||(LA63_5>=SLASH && LA63_5<=QMARK)||(LA63_5>=COMMAND_SUBSTITUTION_PAREN && LA63_5<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt63=4;
                        }
                        else if ( (LA63_5==LPAREN) ) {
                            alt63=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 63, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case EQUALS:
                    {
                    alt63=2;
                    }
                    break;
                case LSQUARE:
                    {
                    alt63=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // java_libbash.g:356:4: name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS ( string_expr )?
                    {
                    pushFollow(FOLLOW_name_in_variable_definition_atom1645);
                    name134=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name134.getTree());
                    LSQUARE135=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_variable_definition_atom1647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE135);

                    // java_libbash.g:356:17: ( BLANK )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==BLANK) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // java_libbash.g:356:17: BLANK
                            {
                            BLANK136=(Token)match(input,BLANK,FOLLOW_BLANK_in_variable_definition_atom1649); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK136);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_explicit_arithmetic_in_variable_definition_atom1652);
                    explicit_arithmetic137=explicit_arithmetic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_arithmetic.add(explicit_arithmetic137.getTree());
                    // java_libbash.g:356:44: ( BLANK )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==BLANK) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // java_libbash.g:356:44: BLANK
                            {
                            BLANK138=(Token)match(input,BLANK,FOLLOW_BLANK_in_variable_definition_atom1654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK138);


                            }
                            break;

                    }

                    RSQUARE139=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_variable_definition_atom1657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE139);

                    EQUALS140=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_variable_definition_atom1659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS140);

                    // java_libbash.g:356:66: ( string_expr )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==POUND||LA60_0==BANG||(LA60_0>=TIME && LA60_0<=LETTER)||LA60_0==DIGIT||(LA60_0>=NAME && LA60_0<=LBRACE)||(LA60_0>=FOR && LA60_0<=DONE)||(LA60_0>=SELECT && LA60_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA60_0>=SLASH && LA60_0<=QMARK)||(LA60_0>=COMMAND_SUBSTITUTION_PAREN && LA60_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // java_libbash.g:356:66: string_expr
                            {
                            pushFollow(FOLLOW_string_expr_in_variable_definition_atom1661);
                            string_expr141=string_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_string_expr.add(string_expr141.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: name, string_expr, explicit_arithmetic, EQUALS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 357:4: -> ^( EQUALS ^( name explicit_arithmetic ) ( string_expr )? )
                    {
                        // java_libbash.g:357:7: ^( EQUALS ^( name explicit_arithmetic ) ( string_expr )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EQUALS.nextNode(), root_1);

                        // java_libbash.g:357:16: ^( name explicit_arithmetic )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_name.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_explicit_arithmetic.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        // java_libbash.g:357:44: ( string_expr )?
                        if ( stream_string_expr.hasNext() ) {
                            adaptor.addChild(root_1, stream_string_expr.nextTree());

                        }
                        stream_string_expr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:358:4: name EQUALS ( value )?
                    {
                    pushFollow(FOLLOW_name_in_variable_definition_atom1685);
                    name142=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name142.getTree());
                    EQUALS143=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_variable_definition_atom1687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS143);

                    // java_libbash.g:358:16: ( value )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==POUND||LA61_0==BANG||(LA61_0>=TIME && LA61_0<=LETTER)||LA61_0==LPAREN||LA61_0==DIGIT||(LA61_0>=NAME && LA61_0<=LBRACE)||(LA61_0>=FOR && LA61_0<=DONE)||(LA61_0>=SELECT && LA61_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA61_0>=SLASH && LA61_0<=QMARK)||(LA61_0>=COMMAND_SUBSTITUTION_PAREN && LA61_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // java_libbash.g:358:16: value
                            {
                            pushFollow(FOLLOW_value_in_variable_definition_atom1689);
                            value144=value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_value.add(value144.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: name, EQUALS, value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 358:23: -> ^( EQUALS name ( value )? )
                    {
                        // java_libbash.g:358:26: ^( EQUALS name ( value )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EQUALS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        // java_libbash.g:358:40: ( value )?
                        if ( stream_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_value.nextTree());

                        }
                        stream_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:359:4: name PLUS EQUALS array_value
                    {
                    pushFollow(FOLLOW_name_in_variable_definition_atom1706);
                    name145=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name145.getTree());
                    PLUS146=(Token)match(input,PLUS,FOLLOW_PLUS_in_variable_definition_atom1708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS146);

                    EQUALS147=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_variable_definition_atom1710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS147);

                    pushFollow(FOLLOW_array_value_in_variable_definition_atom1712);
                    array_value148=array_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_value.add(array_value148.getTree());


                    // AST REWRITE
                    // elements: name, array_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 359:33: -> ^( PLUS_ASSIGN name array_value )
                    {
                        // java_libbash.g:359:36: ^( PLUS_ASSIGN name array_value )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PLUS_ASSIGN, "PLUS_ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        adaptor.addChild(root_1, stream_array_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:360:4: name PLUS EQUALS ( string_expr_part )*
                    {
                    pushFollow(FOLLOW_name_in_variable_definition_atom1727);
                    name149=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name149.getTree());
                    PLUS150=(Token)match(input,PLUS,FOLLOW_PLUS_in_variable_definition_atom1729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS150);

                    EQUALS151=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_variable_definition_atom1731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS151);

                    // java_libbash.g:360:21: ( string_expr_part )*
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);

                        if ( (LA62_0==POUND||LA62_0==BANG||(LA62_0>=TIME && LA62_0<=LETTER)||LA62_0==DIGIT||(LA62_0>=NAME && LA62_0<=LBRACE)||(LA62_0>=FOR && LA62_0<=DONE)||(LA62_0>=SELECT && LA62_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA62_0>=SLASH && LA62_0<=QMARK)||(LA62_0>=COMMAND_SUBSTITUTION_PAREN && LA62_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt62=1;
                        }


                        switch (alt62) {
                    	case 1 :
                    	    // java_libbash.g:360:21: string_expr_part
                    	    {
                    	    pushFollow(FOLLOW_string_expr_part_in_variable_definition_atom1733);
                    	    string_expr_part152=string_expr_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part152.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop62;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: name, string_expr_part, EQUALS, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 361:4: -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ( string_expr_part )* ) )
                    {
                        // java_libbash.g:361:7: ^( EQUALS name ^( STRING ^( VAR_REF name ) ( string_expr_part )* ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_EQUALS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        // java_libbash.g:361:21: ^( STRING ^( VAR_REF name ) ( string_expr_part )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                        // java_libbash.g:361:30: ^( VAR_REF name )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_3);

                        adaptor.addChild(root_3, stream_name.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }
                        // java_libbash.g:361:46: ( string_expr_part )*
                        while ( stream_string_expr_part.hasNext() ) {
                            adaptor.addChild(root_2, stream_string_expr_part.nextTree());

                        }
                        stream_string_expr_part.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_definition_atom"

    public static class value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "value"
    // java_libbash.g:362:1: value : ( string_expr | array_value );
    public final java_libbashParser.value_return value() throws RecognitionException {
        java_libbashParser.value_return retval = new java_libbashParser.value_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.string_expr_return string_expr153 = null;

        java_libbashParser.array_value_return array_value154 = null;



        try {
            // java_libbash.g:363:2: ( string_expr | array_value )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==POUND||LA64_0==BANG||(LA64_0>=TIME && LA64_0<=LETTER)||LA64_0==DIGIT||(LA64_0>=NAME && LA64_0<=LBRACE)||(LA64_0>=FOR && LA64_0<=DONE)||(LA64_0>=SELECT && LA64_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA64_0>=SLASH && LA64_0<=QMARK)||(LA64_0>=COMMAND_SUBSTITUTION_PAREN && LA64_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                alt64=1;
            }
            else if ( (LA64_0==LPAREN) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // java_libbash.g:363:4: string_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_expr_in_value1766);
                    string_expr153=string_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr153.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:364:4: array_value
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_array_value_in_value1771);
                    array_value154=array_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_value154.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "value"

    protected static class array_value_scope {
        boolean array_value_end;
    }
    protected Stack array_value_stack = new Stack();

    public static class array_value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_value"
    // java_libbash.g:366:1: array_value : LPAREN ( wspace )? ( RPAREN -> ^( ARRAY ) | array_atom ({...}? => wspace array_atom )* -> ^( ARRAY ( array_atom )+ ) ) ;
    public final java_libbashParser.array_value_return array_value() throws RecognitionException {
        array_value_stack.push(new array_value_scope());
        java_libbashParser.array_value_return retval = new java_libbashParser.array_value_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN155=null;
        Token RPAREN157=null;
        java_libbashParser.wspace_return wspace156 = null;

        java_libbashParser.array_atom_return array_atom158 = null;

        java_libbashParser.wspace_return wspace159 = null;

        java_libbashParser.array_atom_return array_atom160 = null;


        CommonTree LPAREN155_tree=null;
        CommonTree RPAREN157_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_array_atom=new RewriteRuleSubtreeStream(adaptor,"rule array_atom");
        try {
            // java_libbash.g:374:2: ( LPAREN ( wspace )? ( RPAREN -> ^( ARRAY ) | array_atom ({...}? => wspace array_atom )* -> ^( ARRAY ( array_atom )+ ) ) )
            // java_libbash.g:374:4: LPAREN ( wspace )? ( RPAREN -> ^( ARRAY ) | array_atom ({...}? => wspace array_atom )* -> ^( ARRAY ( array_atom )+ ) )
            {
            LPAREN155=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_array_value1784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN155);

            // java_libbash.g:374:11: ( wspace )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=EOL && LA65_0<=BLANK)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // java_libbash.g:374:11: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_array_value1786);
                    wspace156=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace156.getTree());

                    }
                    break;

            }

            // java_libbash.g:375:3: ( RPAREN -> ^( ARRAY ) | array_atom ({...}? => wspace array_atom )* -> ^( ARRAY ( array_atom )+ ) )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==RPAREN) ) {
                alt67=1;
            }
            else if ( (LA67_0==POUND||LA67_0==BANG||(LA67_0>=TIME && LA67_0<=LETTER)||LA67_0==DIGIT||(LA67_0>=NAME && LA67_0<=LBRACE)||(LA67_0>=FOR && LA67_0<=DONE)||(LA67_0>=SELECT && LA67_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA67_0>=SLASH && LA67_0<=QMARK)||(LA67_0>=COMMAND_SUBSTITUTION_PAREN && LA67_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    // java_libbash.g:376:4: RPAREN
                    {
                    RPAREN157=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_array_value1796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN157);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 376:11: -> ^( ARRAY )
                    {
                        // java_libbash.g:376:14: ^( ARRAY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:377:6: array_atom ({...}? => wspace array_atom )*
                    {
                    if ( state.backtracking==0 ) {
                      ((array_value_scope)array_value_stack.peek()).array_value_end = false; 
                    }
                    pushFollow(FOLLOW_array_atom_in_array_value1811);
                    array_atom158=array_atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_atom.add(array_atom158.getTree());
                    // java_libbash.g:378:5: ({...}? => wspace array_atom )*
                    loop66:
                    do {
                        int alt66=2;
                        alt66 = dfa66.predict(input);
                        switch (alt66) {
                    	case 1 :
                    	    // java_libbash.g:378:6: {...}? => wspace array_atom
                    	    {
                    	    if ( !((!((array_value_scope)array_value_stack.peek()).array_value_end)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "array_value", "!$array_value::array_value_end");
                    	    }
                    	    pushFollow(FOLLOW_wspace_in_array_value1822);
                    	    wspace159=wspace();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_wspace.add(wspace159.getTree());
                    	    pushFollow(FOLLOW_array_atom_in_array_value1824);
                    	    array_atom160=array_atom();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_array_atom.add(array_atom160.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: array_atom
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 379:6: -> ^( ARRAY ( array_atom )+ )
                    {
                        // java_libbash.g:379:9: ^( ARRAY ( array_atom )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                        if ( !(stream_array_atom.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_array_atom.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_atom.nextTree());

                        }
                        stream_array_atom.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            array_value_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "array_value"

    public static class array_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_atom"
    // java_libbash.g:381:1: array_atom : ( ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr | string_expr ) ( ( wspace RPAREN )=> wspace RPAREN | ( RPAREN )=> RPAREN | ) ;
    public final java_libbashParser.array_atom_return array_atom() throws RecognitionException {
        java_libbashParser.array_atom_return retval = new java_libbashParser.array_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE161=null;
        Token BLANK162=null;
        Token BLANK164=null;
        Token RSQUARE165=null;
        Token EQUALS166=null;
        Token RPAREN170=null;
        Token RPAREN171=null;
        java_libbashParser.explicit_arithmetic_return explicit_arithmetic163 = null;

        java_libbashParser.string_expr_return string_expr167 = null;

        java_libbashParser.string_expr_return string_expr168 = null;

        java_libbashParser.wspace_return wspace169 = null;


        CommonTree LSQUARE161_tree=null;
        CommonTree BLANK162_tree=null;
        CommonTree BLANK164_tree=null;
        CommonTree RSQUARE165_tree=null;
        CommonTree EQUALS166_tree=null;
        CommonTree RPAREN170_tree=null;
        CommonTree RPAREN171_tree=null;

        try {
            // java_libbash.g:382:2: ( ( ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr | string_expr ) ( ( wspace RPAREN )=> wspace RPAREN | ( RPAREN )=> RPAREN | ) )
            // java_libbash.g:382:4: ( ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr | string_expr ) ( ( wspace RPAREN )=> wspace RPAREN | ( RPAREN )=> RPAREN | )
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:382:4: ( ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr | string_expr )
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // java_libbash.g:383:4: ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr
                    {
                    LSQUARE161=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_array_atom1863); if (state.failed) return retval;
                    // java_libbash.g:383:31: ( BLANK )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==BLANK) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // java_libbash.g:383:31: BLANK
                            {
                            BLANK162=(Token)match(input,BLANK,FOLLOW_BLANK_in_array_atom1866); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_explicit_arithmetic_in_array_atom1870);
                    explicit_arithmetic163=explicit_arithmetic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, explicit_arithmetic163.getTree());
                    // java_libbash.g:383:59: ( BLANK )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==BLANK) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // java_libbash.g:383:59: BLANK
                            {
                            BLANK164=(Token)match(input,BLANK,FOLLOW_BLANK_in_array_atom1872); if (state.failed) return retval;

                            }
                            break;

                    }

                    RSQUARE165=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_array_atom1876); if (state.failed) return retval;
                    EQUALS166=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_array_atom1879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS166_tree = (CommonTree)adaptor.create(EQUALS166);
                    root_0 = (CommonTree)adaptor.becomeRoot(EQUALS166_tree, root_0);
                    }
                    pushFollow(FOLLOW_string_expr_in_array_atom1882);
                    string_expr167=string_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr167.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:384:6: string_expr
                    {
                    pushFollow(FOLLOW_string_expr_in_array_atom1889);
                    string_expr168=string_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr168.getTree());

                    }
                    break;

            }

            // java_libbash.g:386:3: ( ( wspace RPAREN )=> wspace RPAREN | ( RPAREN )=> RPAREN | )
            int alt71=3;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // java_libbash.g:387:4: ( wspace RPAREN )=> wspace RPAREN
                    {
                    pushFollow(FOLLOW_wspace_in_array_atom1910);
                    wspace169=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    RPAREN170=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_array_atom1913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      ((array_value_scope)array_value_stack.peek()).array_value_end = true; 
                    }

                    }
                    break;
                case 2 :
                    // java_libbash.g:388:6: ( RPAREN )=> RPAREN
                    {
                    RPAREN171=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_array_atom1929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      ((array_value_scope)array_value_stack.peek()).array_value_end = true; 
                    }

                    }
                    break;
                case 3 :
                    // java_libbash.g:390:3: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array_atom"

    protected static class builtin_variable_definition_item_scope {
        int parens;
        boolean dquotes;
    }
    protected Stack builtin_variable_definition_item_stack = new Stack();

    public static class builtin_variable_definition_item_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_variable_definition_item"
    // java_libbash.g:392:1: builtin_variable_definition_item : ( ( LPAREN )=> LPAREN | ( RPAREN )=> RPAREN | ( DQUOTE )=> DQUOTE | (~ ( EOL | SEMIC ) )=> expansion_base | {...}? => SEMIC | {...}? => EOL )+ ;
    public final java_libbashParser.builtin_variable_definition_item_return builtin_variable_definition_item() throws RecognitionException {
        builtin_variable_definition_item_stack.push(new builtin_variable_definition_item_scope());
        java_libbashParser.builtin_variable_definition_item_return retval = new java_libbashParser.builtin_variable_definition_item_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN172=null;
        Token RPAREN173=null;
        Token DQUOTE174=null;
        Token SEMIC176=null;
        Token EOL177=null;
        java_libbashParser.expansion_base_return expansion_base175 = null;


        CommonTree LPAREN172_tree=null;
        CommonTree RPAREN173_tree=null;
        CommonTree DQUOTE174_tree=null;
        CommonTree SEMIC176_tree=null;
        CommonTree EOL177_tree=null;


         ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).parens = 0;
         ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes = false;

        try {
            // java_libbash.g:405:2: ( ( ( LPAREN )=> LPAREN | ( RPAREN )=> RPAREN | ( DQUOTE )=> DQUOTE | (~ ( EOL | SEMIC ) )=> expansion_base | {...}? => SEMIC | {...}? => EOL )+ )
            // java_libbash.g:405:4: ( ( LPAREN )=> LPAREN | ( RPAREN )=> RPAREN | ( DQUOTE )=> DQUOTE | (~ ( EOL | SEMIC ) )=> expansion_base | {...}? => SEMIC | {...}? => EOL )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:405:4: ( ( LPAREN )=> LPAREN | ( RPAREN )=> RPAREN | ( DQUOTE )=> DQUOTE | (~ ( EOL | SEMIC ) )=> expansion_base | {...}? => SEMIC | {...}? => EOL )+
            int cnt72=0;
            loop72:
            do {
                int alt72=7;
                alt72 = dfa72.predict(input);
                switch (alt72) {
            	case 1 :
            	    // java_libbash.g:406:4: ( LPAREN )=> LPAREN
            	    {
            	    LPAREN172=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtin_variable_definition_item1970); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN172_tree = (CommonTree)adaptor.create(LPAREN172);
            	    adaptor.addChild(root_0, LPAREN172_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       ++((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).parens; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // java_libbash.g:407:5: ( RPAREN )=> RPAREN
            	    {
            	    RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtin_variable_definition_item1984); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN173_tree = (CommonTree)adaptor.create(RPAREN173);
            	    adaptor.addChild(root_0, RPAREN173_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       --((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).parens; 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // java_libbash.g:408:5: ( DQUOTE )=> DQUOTE
            	    {
            	    DQUOTE174=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_builtin_variable_definition_item1998); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DQUOTE174_tree = (CommonTree)adaptor.create(DQUOTE174);
            	    adaptor.addChild(root_0, DQUOTE174_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes = ! ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes; 
            	    }

            	    }
            	    break;
            	case 4 :
            	    // java_libbash.g:409:5: (~ ( EOL | SEMIC ) )=> expansion_base
            	    {
            	    pushFollow(FOLLOW_expansion_base_in_builtin_variable_definition_item2017);
            	    expansion_base175=expansion_base();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expansion_base175.getTree());

            	    }
            	    break;
            	case 5 :
            	    // java_libbash.g:410:6: {...}? => SEMIC
            	    {
            	    if ( !((LA(1) == SEMIC && ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "builtin_variable_definition_item", "LA(1) == SEMIC && $builtin_variable_definition_item::dquotes");
            	    }
            	    SEMIC176=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_builtin_variable_definition_item2028); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMIC176_tree = (CommonTree)adaptor.create(SEMIC176);
            	    adaptor.addChild(root_0, SEMIC176_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // java_libbash.g:411:6: {...}? => EOL
            	    {
            	    if ( !((LA(1) == EOL && ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).parens > 0 || ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "builtin_variable_definition_item", "LA(1) == EOL && $builtin_variable_definition_item::parens > 0 || $builtin_variable_definition_item::dquotes");
            	    }
            	    EOL177=(Token)match(input,EOL,FOLLOW_EOL_in_builtin_variable_definition_item2039); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EOL177_tree = (CommonTree)adaptor.create(EOL177);
            	    adaptor.addChild(root_0, EOL177_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt72 >= 1 ) break loop72;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(72, input);
                        throw eee;
                }
                cnt72++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            builtin_variable_definition_item_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "builtin_variable_definition_item"

    public static class builtin_variable_definitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_variable_definitions"
    // java_libbash.g:413:1: builtin_variable_definitions : ( builtin_variable_definition_atom ) ( BLANK builtin_variable_definition_atom )* -> ^( LIST ^( COMMAND ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ ) ) ) ;
    public final java_libbashParser.builtin_variable_definitions_return builtin_variable_definitions() throws RecognitionException {
        java_libbashParser.builtin_variable_definitions_return retval = new java_libbashParser.builtin_variable_definitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK179=null;
        java_libbashParser.builtin_variable_definition_atom_return builtin_variable_definition_atom178 = null;

        java_libbashParser.builtin_variable_definition_atom_return builtin_variable_definition_atom180 = null;


        CommonTree BLANK179_tree=null;
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_builtin_variable_definition_atom=new RewriteRuleSubtreeStream(adaptor,"rule builtin_variable_definition_atom");
        try {
            // java_libbash.g:414:2: ( ( builtin_variable_definition_atom ) ( BLANK builtin_variable_definition_atom )* -> ^( LIST ^( COMMAND ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ ) ) ) )
            // java_libbash.g:414:4: ( builtin_variable_definition_atom ) ( BLANK builtin_variable_definition_atom )*
            {
            // java_libbash.g:414:4: ( builtin_variable_definition_atom )
            // java_libbash.g:414:5: builtin_variable_definition_atom
            {
            pushFollow(FOLLOW_builtin_variable_definition_atom_in_builtin_variable_definitions2053);
            builtin_variable_definition_atom178=builtin_variable_definition_atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtin_variable_definition_atom.add(builtin_variable_definition_atom178.getTree());

            }

            // java_libbash.g:414:39: ( BLANK builtin_variable_definition_atom )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==BLANK) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // java_libbash.g:414:40: BLANK builtin_variable_definition_atom
            	    {
            	    BLANK179=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_variable_definitions2057); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK179);

            	    pushFollow(FOLLOW_builtin_variable_definition_atom_in_builtin_variable_definitions2059);
            	    builtin_variable_definition_atom180=builtin_variable_definition_atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_builtin_variable_definition_atom.add(builtin_variable_definition_atom180.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);



            // AST REWRITE
            // elements: builtin_variable_definition_atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 415:4: -> ^( LIST ^( COMMAND ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ ) ) )
            {
                // java_libbash.g:415:7: ^( LIST ^( COMMAND ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST, "LIST"), root_1);

                // java_libbash.g:415:14: ^( COMMAND ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND, "COMMAND"), root_2);

                // java_libbash.g:415:24: ^( VARIABLE_DEFINITIONS ( builtin_variable_definition_atom )+ )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIABLE_DEFINITIONS, "VARIABLE_DEFINITIONS"), root_3);

                if ( !(stream_builtin_variable_definition_atom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_builtin_variable_definition_atom.hasNext() ) {
                    adaptor.addChild(root_3, stream_builtin_variable_definition_atom.nextTree());

                }
                stream_builtin_variable_definition_atom.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_variable_definitions"

    public static class builtin_variable_definition_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_variable_definition_atom"
    // java_libbash.g:418:1: builtin_variable_definition_atom : ( variable_definition_atom | ( MINUS LETTER BLANK )=> MINUS LETTER -> | name -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ) ) );
    public final java_libbashParser.builtin_variable_definition_atom_return builtin_variable_definition_atom() throws RecognitionException {
        java_libbashParser.builtin_variable_definition_atom_return retval = new java_libbashParser.builtin_variable_definition_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS182=null;
        Token LETTER183=null;
        java_libbashParser.variable_definition_atom_return variable_definition_atom181 = null;

        java_libbashParser.name_return name184 = null;


        CommonTree MINUS182_tree=null;
        CommonTree LETTER183_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_LETTER=new RewriteRuleTokenStream(adaptor,"token LETTER");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // java_libbash.g:419:2: ( variable_definition_atom | ( MINUS LETTER BLANK )=> MINUS LETTER -> | name -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ) ) )
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LETTER||LA74_0==NAME||LA74_0==UNDERSCORE) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==LSQUARE||(LA74_1>=EQUALS && LA74_1<=PLUS)) ) {
                    alt74=1;
                }
                else if ( (LA74_1==EOF||LA74_1==BLANK) ) {
                    alt74=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA74_0==MINUS) && (synpred22_java_libbash())) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // java_libbash.g:419:4: variable_definition_atom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_definition_atom_in_builtin_variable_definition_atom2091);
                    variable_definition_atom181=variable_definition_atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_definition_atom181.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:421:4: ( MINUS LETTER BLANK )=> MINUS LETTER
                    {
                    MINUS182=(Token)match(input,MINUS,FOLLOW_MINUS_in_builtin_variable_definition_atom2107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS182);

                    LETTER183=(Token)match(input,LETTER,FOLLOW_LETTER_in_builtin_variable_definition_atom2109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LETTER.add(LETTER183);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 421:41: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:422:4: name
                    {
                    pushFollow(FOLLOW_name_in_builtin_variable_definition_atom2116);
                    name184=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name184.getTree());


                    // AST REWRITE
                    // elements: name, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 422:9: -> ^( EQUALS name ^( STRING ^( VAR_REF name ) ) )
                    {
                        // java_libbash.g:422:12: ^( EQUALS name ^( STRING ^( VAR_REF name ) ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EQUALS, "EQUALS"), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        // java_libbash.g:422:26: ^( STRING ^( VAR_REF name ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                        // java_libbash.g:422:35: ^( VAR_REF name )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_3);

                        adaptor.addChild(root_3, stream_name.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_variable_definition_atom"

    public static class bash_command_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bash_command"
    // java_libbash.g:424:1: bash_command : string_expr_no_reserved_word ( ( BLANK bash_command_arguments )=> BLANK bash_command_arguments )* ;
    public final java_libbashParser.bash_command_return bash_command() throws RecognitionException {
        java_libbashParser.bash_command_return retval = new java_libbashParser.bash_command_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK186=null;
        java_libbashParser.string_expr_no_reserved_word_return string_expr_no_reserved_word185 = null;

        java_libbashParser.bash_command_arguments_return bash_command_arguments187 = null;


        CommonTree BLANK186_tree=null;

        try {
            // java_libbash.g:425:2: ( string_expr_no_reserved_word ( ( BLANK bash_command_arguments )=> BLANK bash_command_arguments )* )
            // java_libbash.g:425:4: string_expr_no_reserved_word ( ( BLANK bash_command_arguments )=> BLANK bash_command_arguments )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_string_expr_no_reserved_word_in_bash_command2143);
            string_expr_no_reserved_word185=string_expr_no_reserved_word();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr_no_reserved_word185.getTree());
            // java_libbash.g:425:33: ( ( BLANK bash_command_arguments )=> BLANK bash_command_arguments )*
            loop75:
            do {
                int alt75=2;
                alt75 = dfa75.predict(input);
                switch (alt75) {
            	case 1 :
            	    // java_libbash.g:425:34: ( BLANK bash_command_arguments )=> BLANK bash_command_arguments
            	    {
            	    BLANK186=(Token)match(input,BLANK,FOLLOW_BLANK_in_bash_command2154); if (state.failed) return retval;
            	    pushFollow(FOLLOW_bash_command_arguments_in_bash_command2157);
            	    bash_command_arguments187=bash_command_arguments();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bash_command_arguments187.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bash_command"

    public static class bash_command_arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bash_command_arguments"
    // java_libbash.g:427:1: bash_command_arguments : ( bash_command_argument_atom )+ -> ^( STRING ( bash_command_argument_atom )+ ) ;
    public final java_libbashParser.bash_command_arguments_return bash_command_arguments() throws RecognitionException {
        java_libbashParser.bash_command_arguments_return retval = new java_libbashParser.bash_command_arguments_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.bash_command_argument_atom_return bash_command_argument_atom188 = null;


        RewriteRuleSubtreeStream stream_bash_command_argument_atom=new RewriteRuleSubtreeStream(adaptor,"rule bash_command_argument_atom");
        try {
            // java_libbash.g:428:2: ( ( bash_command_argument_atom )+ -> ^( STRING ( bash_command_argument_atom )+ ) )
            // java_libbash.g:428:4: ( bash_command_argument_atom )+
            {
            // java_libbash.g:428:4: ( bash_command_argument_atom )+
            int cnt76=0;
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==POUND||LA76_0==BANG||(LA76_0>=TIME && LA76_0<=LETTER)||LA76_0==DIGIT||(LA76_0>=NAME && LA76_0<=DONE)||(LA76_0>=SELECT && LA76_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA76_0>=SLASH && LA76_0<=QMARK)||(LA76_0>=COMMAND_SUBSTITUTION_PAREN && LA76_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // java_libbash.g:428:4: bash_command_argument_atom
            	    {
            	    pushFollow(FOLLOW_bash_command_argument_atom_in_bash_command_arguments2168);
            	    bash_command_argument_atom188=bash_command_argument_atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bash_command_argument_atom.add(bash_command_argument_atom188.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);



            // AST REWRITE
            // elements: bash_command_argument_atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 428:32: -> ^( STRING ( bash_command_argument_atom )+ )
            {
                // java_libbash.g:428:35: ^( STRING ( bash_command_argument_atom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                if ( !(stream_bash_command_argument_atom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bash_command_argument_atom.hasNext() ) {
                    adaptor.addChild(root_1, stream_bash_command_argument_atom.nextTree());

                }
                stream_bash_command_argument_atom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bash_command_arguments"

    public static class bash_command_argument_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bash_command_argument_atom"
    // java_libbash.g:430:1: bash_command_argument_atom : ( ( LBRACE )=> ( ( brace_expansion )=> brace_expansion | LBRACE ) | RBRACE | string_expr_part );
    public final java_libbashParser.bash_command_argument_atom_return bash_command_argument_atom() throws RecognitionException {
        java_libbashParser.bash_command_argument_atom_return retval = new java_libbashParser.bash_command_argument_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACE190=null;
        Token RBRACE191=null;
        java_libbashParser.brace_expansion_return brace_expansion189 = null;

        java_libbashParser.string_expr_part_return string_expr_part192 = null;


        CommonTree LBRACE190_tree=null;
        CommonTree RBRACE191_tree=null;

        try {
            // java_libbash.g:431:2: ( ( LBRACE )=> ( ( brace_expansion )=> brace_expansion | LBRACE ) | RBRACE | string_expr_part )
            int alt78=3;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // java_libbash.g:431:4: ( LBRACE )=> ( ( brace_expansion )=> brace_expansion | LBRACE )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:432:3: ( ( brace_expansion )=> brace_expansion | LBRACE )
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==LBRACE) ) {
                        int LA77_1 = input.LA(2);

                        if ( (synpred25_java_libbash()) ) {
                            alt77=1;
                        }
                        else if ( (true) ) {
                            alt77=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 77, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 77, 0, input);

                        throw nvae;
                    }
                    switch (alt77) {
                        case 1 :
                            // java_libbash.g:433:4: ( brace_expansion )=> brace_expansion
                            {
                            pushFollow(FOLLOW_brace_expansion_in_bash_command_argument_atom2206);
                            brace_expansion189=brace_expansion();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion189.getTree());

                            }
                            break;
                        case 2 :
                            // java_libbash.g:434:5: LBRACE
                            {
                            LBRACE190=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_bash_command_argument_atom2212); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LBRACE190_tree = (CommonTree)adaptor.create(LBRACE190);
                            adaptor.addChild(root_0, LBRACE190_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // java_libbash.g:436:4: RBRACE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RBRACE191=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_bash_command_argument_atom2221); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACE191_tree = (CommonTree)adaptor.create(RBRACE191);
                    adaptor.addChild(root_0, RBRACE191_tree);
                    }

                    }
                    break;
                case 3 :
                    // java_libbash.g:437:4: string_expr_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_expr_part_in_bash_command_argument_atom2226);
                    string_expr_part192=string_expr_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr_part192.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bash_command_argument_atom"

    public static class parens_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parens"
    // java_libbash.g:439:1: parens : LPAREN ( BLANK )? RPAREN ;
    public final java_libbashParser.parens_return parens() throws RecognitionException {
        java_libbashParser.parens_return retval = new java_libbashParser.parens_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN193=null;
        Token BLANK194=null;
        Token RPAREN195=null;

        CommonTree LPAREN193_tree=null;
        CommonTree BLANK194_tree=null;
        CommonTree RPAREN195_tree=null;

        try {
            // java_libbash.g:440:2: ( LPAREN ( BLANK )? RPAREN )
            // java_libbash.g:440:4: LPAREN ( BLANK )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parens2235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN193_tree = (CommonTree)adaptor.create(LPAREN193);
            adaptor.addChild(root_0, LPAREN193_tree);
            }
            // java_libbash.g:440:11: ( BLANK )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==BLANK) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // java_libbash.g:440:11: BLANK
                    {
                    BLANK194=(Token)match(input,BLANK,FOLLOW_BLANK_in_parens2237); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BLANK194_tree = (CommonTree)adaptor.create(BLANK194);
                    adaptor.addChild(root_0, BLANK194_tree);
                    }

                    }
                    break;

            }

            RPAREN195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parens2240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN195_tree = (CommonTree)adaptor.create(RPAREN195);
            adaptor.addChild(root_0, RPAREN195_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parens"

    public static class compound_command_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_command"
    // java_libbash.g:442:1: compound_command : ( for_expr | select_expr | if_expr | while_expr | until_expr | case_expr | subshell | current_shell | arithmetic_expression | condition_comparison );
    public final java_libbashParser.compound_command_return compound_command() throws RecognitionException {
        java_libbashParser.compound_command_return retval = new java_libbashParser.compound_command_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.for_expr_return for_expr196 = null;

        java_libbashParser.select_expr_return select_expr197 = null;

        java_libbashParser.if_expr_return if_expr198 = null;

        java_libbashParser.while_expr_return while_expr199 = null;

        java_libbashParser.until_expr_return until_expr200 = null;

        java_libbashParser.case_expr_return case_expr201 = null;

        java_libbashParser.subshell_return subshell202 = null;

        java_libbashParser.current_shell_return current_shell203 = null;

        java_libbashParser.arithmetic_expression_return arithmetic_expression204 = null;

        java_libbashParser.condition_comparison_return condition_comparison205 = null;



        try {
            // java_libbash.g:443:2: ( for_expr | select_expr | if_expr | while_expr | until_expr | case_expr | subshell | current_shell | arithmetic_expression | condition_comparison )
            int alt80=10;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // java_libbash.g:443:4: for_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_expr_in_compound_command2249);
                    for_expr196=for_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr196.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:444:4: select_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_select_expr_in_compound_command2254);
                    select_expr197=select_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expr197.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:445:4: if_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_expr_in_compound_command2259);
                    if_expr198=if_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr198.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:446:4: while_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_expr_in_compound_command2264);
                    while_expr199=while_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_expr199.getTree());

                    }
                    break;
                case 5 :
                    // java_libbash.g:447:4: until_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_until_expr_in_compound_command2269);
                    until_expr200=until_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, until_expr200.getTree());

                    }
                    break;
                case 6 :
                    // java_libbash.g:448:4: case_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_case_expr_in_compound_command2274);
                    case_expr201=case_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_expr201.getTree());

                    }
                    break;
                case 7 :
                    // java_libbash.g:449:4: subshell
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subshell_in_compound_command2279);
                    subshell202=subshell();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subshell202.getTree());

                    }
                    break;
                case 8 :
                    // java_libbash.g:450:4: current_shell
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_current_shell_in_compound_command2284);
                    current_shell203=current_shell();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, current_shell203.getTree());

                    }
                    break;
                case 9 :
                    // java_libbash.g:451:4: arithmetic_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_expression_in_compound_command2289);
                    arithmetic_expression204=arithmetic_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expression204.getTree());

                    }
                    break;
                case 10 :
                    // java_libbash.g:452:4: condition_comparison
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_condition_comparison_in_compound_command2294);
                    condition_comparison205=condition_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_comparison205.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compound_command"

    public static class semiel_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "semiel"
    // java_libbash.g:454:1: semiel : ( ( BLANK )? SEMIC ( wspace )? | ( BLANK )? EOL ( wspace )? );
    public final java_libbashParser.semiel_return semiel() throws RecognitionException {
        java_libbashParser.semiel_return retval = new java_libbashParser.semiel_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK206=null;
        Token SEMIC207=null;
        Token BLANK209=null;
        Token EOL210=null;
        java_libbashParser.wspace_return wspace208 = null;

        java_libbashParser.wspace_return wspace211 = null;


        CommonTree BLANK206_tree=null;
        CommonTree SEMIC207_tree=null;
        CommonTree BLANK209_tree=null;
        CommonTree EOL210_tree=null;

        try {
            // java_libbash.g:455:2: ( ( BLANK )? SEMIC ( wspace )? | ( BLANK )? EOL ( wspace )? )
            int alt85=2;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==EOL) ) {
                    alt85=2;
                }
                else if ( (LA85_1==SEMIC) ) {
                    alt85=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;
                }
                }
                break;
            case SEMIC:
                {
                alt85=1;
                }
                break;
            case EOL:
                {
                alt85=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;
            }

            switch (alt85) {
                case 1 :
                    // java_libbash.g:455:4: ( BLANK )? SEMIC ( wspace )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:455:4: ( BLANK )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==BLANK) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // java_libbash.g:455:4: BLANK
                            {
                            BLANK206=(Token)match(input,BLANK,FOLLOW_BLANK_in_semiel2303); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BLANK206_tree = (CommonTree)adaptor.create(BLANK206);
                            adaptor.addChild(root_0, BLANK206_tree);
                            }

                            }
                            break;

                    }

                    SEMIC207=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_semiel2306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMIC207_tree = (CommonTree)adaptor.create(SEMIC207);
                    adaptor.addChild(root_0, SEMIC207_tree);
                    }
                    // java_libbash.g:455:17: ( wspace )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( ((LA82_0>=EOL && LA82_0<=BLANK)) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // java_libbash.g:455:17: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_semiel2308);
                            wspace208=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, wspace208.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // java_libbash.g:456:4: ( BLANK )? EOL ( wspace )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:456:4: ( BLANK )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==BLANK) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // java_libbash.g:456:4: BLANK
                            {
                            BLANK209=(Token)match(input,BLANK,FOLLOW_BLANK_in_semiel2314); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BLANK209_tree = (CommonTree)adaptor.create(BLANK209);
                            adaptor.addChild(root_0, BLANK209_tree);
                            }

                            }
                            break;

                    }

                    EOL210=(Token)match(input,EOL,FOLLOW_EOL_in_semiel2317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOL210_tree = (CommonTree)adaptor.create(EOL210);
                    adaptor.addChild(root_0, EOL210_tree);
                    }
                    // java_libbash.g:456:15: ( wspace )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( ((LA84_0>=EOL && LA84_0<=BLANK)) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // java_libbash.g:456:15: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_semiel2319);
                            wspace211=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, wspace211.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "semiel"

    public static class for_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_expr"
    // java_libbash.g:458:1: for_expr : FOR ( BLANK )? ( name ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace ) DO wspace command_list semiel DONE -> ^( FOR name ( for_each_value )* command_list ) | LLPAREN ( EOL )? ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )? ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )? mod= arithmetics )? ( wspace )? RPAREN RPAREN semiel DO wspace command_list semiel DONE -> ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? ) ) ;
    public final java_libbashParser.for_expr_return for_expr() throws RecognitionException {
        java_libbashParser.for_expr_return retval = new java_libbashParser.for_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FOR212=null;
        Token BLANK213=null;
        Token IN216=null;
        Token BLANK218=null;
        Token SEMIC219=null;
        Token EOL220=null;
        Token SEMIC223=null;
        Token DO226=null;
        Token DONE230=null;
        Token LLPAREN231=null;
        Token EOL232=null;
        Token BLANK233=null;
        Token BLANK234=null;
        Token BLANK235=null;
        Token SEMIC236=null;
        Token BLANK237=null;
        Token BLANK238=null;
        Token BLANK239=null;
        Token SEMIC240=null;
        Token DOUBLE_SEMIC241=null;
        Token BLANK242=null;
        Token RPAREN244=null;
        Token RPAREN245=null;
        Token DO247=null;
        Token DONE251=null;
        java_libbashParser.arithmetics_return init = null;

        java_libbashParser.arithmetics_return fcond = null;

        java_libbashParser.arithmetics_return mod = null;

        java_libbashParser.name_return name214 = null;

        java_libbashParser.wspace_return wspace215 = null;

        java_libbashParser.for_each_value_return for_each_value217 = null;

        java_libbashParser.wspace_return wspace221 = null;

        java_libbashParser.wspace_return wspace222 = null;

        java_libbashParser.wspace_return wspace224 = null;

        java_libbashParser.wspace_return wspace225 = null;

        java_libbashParser.wspace_return wspace227 = null;

        java_libbashParser.command_list_return command_list228 = null;

        java_libbashParser.semiel_return semiel229 = null;

        java_libbashParser.wspace_return wspace243 = null;

        java_libbashParser.semiel_return semiel246 = null;

        java_libbashParser.wspace_return wspace248 = null;

        java_libbashParser.command_list_return command_list249 = null;

        java_libbashParser.semiel_return semiel250 = null;


        CommonTree FOR212_tree=null;
        CommonTree BLANK213_tree=null;
        CommonTree IN216_tree=null;
        CommonTree BLANK218_tree=null;
        CommonTree SEMIC219_tree=null;
        CommonTree EOL220_tree=null;
        CommonTree SEMIC223_tree=null;
        CommonTree DO226_tree=null;
        CommonTree DONE230_tree=null;
        CommonTree LLPAREN231_tree=null;
        CommonTree EOL232_tree=null;
        CommonTree BLANK233_tree=null;
        CommonTree BLANK234_tree=null;
        CommonTree BLANK235_tree=null;
        CommonTree SEMIC236_tree=null;
        CommonTree BLANK237_tree=null;
        CommonTree BLANK238_tree=null;
        CommonTree BLANK239_tree=null;
        CommonTree SEMIC240_tree=null;
        CommonTree DOUBLE_SEMIC241_tree=null;
        CommonTree BLANK242_tree=null;
        CommonTree RPAREN244_tree=null;
        CommonTree RPAREN245_tree=null;
        CommonTree DO247_tree=null;
        CommonTree DONE251_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
        RewriteRuleTokenStream stream_LLPAREN=new RewriteRuleTokenStream(adaptor,"token LLPAREN");
        RewriteRuleTokenStream stream_DOUBLE_SEMIC=new RewriteRuleTokenStream(adaptor,"token DOUBLE_SEMIC");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
        RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_arithmetics=new RewriteRuleSubtreeStream(adaptor,"rule arithmetics");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        RewriteRuleSubtreeStream stream_for_each_value=new RewriteRuleSubtreeStream(adaptor,"rule for_each_value");
        try {
            // java_libbash.g:459:2: ( FOR ( BLANK )? ( name ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace ) DO wspace command_list semiel DONE -> ^( FOR name ( for_each_value )* command_list ) | LLPAREN ( EOL )? ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )? ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )? mod= arithmetics )? ( wspace )? RPAREN RPAREN semiel DO wspace command_list semiel DONE -> ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? ) ) )
            // java_libbash.g:459:4: FOR ( BLANK )? ( name ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace ) DO wspace command_list semiel DONE -> ^( FOR name ( for_each_value )* command_list ) | LLPAREN ( EOL )? ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )? ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )? mod= arithmetics )? ( wspace )? RPAREN RPAREN semiel DO wspace command_list semiel DONE -> ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? ) )
            {
            FOR212=(Token)match(input,FOR,FOLLOW_FOR_in_for_expr2329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR212);

            // java_libbash.g:459:8: ( BLANK )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==BLANK) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // java_libbash.g:459:8: BLANK
                    {
                    BLANK213=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK213);


                    }
                    break;

            }

            // java_libbash.g:460:3: ( name ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace ) DO wspace command_list semiel DONE -> ^( FOR name ( for_each_value )* command_list ) | LLPAREN ( EOL )? ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )? ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )? mod= arithmetics )? ( wspace )? RPAREN RPAREN semiel DO wspace command_list semiel DONE -> ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==LETTER||LA105_0==NAME||LA105_0==UNDERSCORE) ) {
                alt105=1;
            }
            else if ( (LA105_0==LLPAREN) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    // java_libbash.g:461:4: name ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace ) DO wspace command_list semiel DONE
                    {
                    pushFollow(FOLLOW_name_in_for_expr2341);
                    name214=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name214.getTree());
                    // java_libbash.g:462:4: ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace )
                    int alt93=3;
                    alt93 = dfa93.predict(input);
                    switch (alt93) {
                        case 1 :
                            // java_libbash.g:463:5: wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )?
                            {
                            pushFollow(FOLLOW_wspace_in_for_expr2352);
                            wspace215=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace215.getTree());
                            IN216=(Token)match(input,IN,FOLLOW_IN_in_for_expr2354); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN.add(IN216);

                            // java_libbash.g:463:15: ( for_each_value )*
                            loop87:
                            do {
                                int alt87=2;
                                int LA87_0 = input.LA(1);

                                if ( (LA87_0==BLANK) ) {
                                    int LA87_1 = input.LA(2);

                                    if ( (LA87_1==POUND||LA87_1==BANG||(LA87_1>=TIME && LA87_1<=LETTER)||LA87_1==DIGIT||(LA87_1>=NAME && LA87_1<=LBRACE)||(LA87_1>=FOR && LA87_1<=DONE)||(LA87_1>=SELECT && LA87_1<=SINGLE_QUOTED_STRING_TOKEN)||(LA87_1>=SLASH && LA87_1<=QMARK)||(LA87_1>=COMMAND_SUBSTITUTION_PAREN && LA87_1<=COMMAND_SUBSTITUTION_TICK)) && ((LA(1) == BLANK && LA(2) != EOL && LA(2) != SEMIC && LA(2) != DO))) {
                                        alt87=1;
                                    }


                                }


                                switch (alt87) {
                            	case 1 :
                            	    // java_libbash.g:463:15: for_each_value
                            	    {
                            	    pushFollow(FOLLOW_for_each_value_in_for_expr2356);
                            	    for_each_value217=for_each_value();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_for_each_value.add(for_each_value217.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop87;
                                }
                            } while (true);

                            // java_libbash.g:463:31: ( BLANK )?
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==BLANK) ) {
                                alt88=1;
                            }
                            switch (alt88) {
                                case 1 :
                                    // java_libbash.g:463:31: BLANK
                                    {
                                    BLANK218=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2359); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK218);


                                    }
                                    break;

                            }

                            // java_libbash.g:463:38: ( SEMIC | EOL )
                            int alt89=2;
                            int LA89_0 = input.LA(1);

                            if ( (LA89_0==SEMIC) ) {
                                alt89=1;
                            }
                            else if ( (LA89_0==EOL) ) {
                                alt89=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 89, 0, input);

                                throw nvae;
                            }
                            switch (alt89) {
                                case 1 :
                                    // java_libbash.g:463:39: SEMIC
                                    {
                                    SEMIC219=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr2363); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC219);


                                    }
                                    break;
                                case 2 :
                                    // java_libbash.g:463:45: EOL
                                    {
                                    EOL220=(Token)match(input,EOL,FOLLOW_EOL_in_for_expr2365); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_EOL.add(EOL220);


                                    }
                                    break;

                            }

                            // java_libbash.g:463:50: ( wspace )?
                            int alt90=2;
                            int LA90_0 = input.LA(1);

                            if ( ((LA90_0>=EOL && LA90_0<=BLANK)) ) {
                                alt90=1;
                            }
                            switch (alt90) {
                                case 1 :
                                    // java_libbash.g:463:50: wspace
                                    {
                                    pushFollow(FOLLOW_wspace_in_for_expr2368);
                                    wspace221=wspace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_wspace.add(wspace221.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // java_libbash.g:464:7: ( wspace )? SEMIC ( wspace )?
                            {
                            // java_libbash.g:464:7: ( wspace )?
                            int alt91=2;
                            int LA91_0 = input.LA(1);

                            if ( ((LA91_0>=EOL && LA91_0<=BLANK)) ) {
                                alt91=1;
                            }
                            switch (alt91) {
                                case 1 :
                                    // java_libbash.g:464:7: wspace
                                    {
                                    pushFollow(FOLLOW_wspace_in_for_expr2377);
                                    wspace222=wspace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_wspace.add(wspace222.getTree());

                                    }
                                    break;

                            }

                            SEMIC223=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr2380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC223);

                            // java_libbash.g:464:21: ( wspace )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( ((LA92_0>=EOL && LA92_0<=BLANK)) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // java_libbash.g:464:21: wspace
                                    {
                                    pushFollow(FOLLOW_wspace_in_for_expr2382);
                                    wspace224=wspace();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_wspace.add(wspace224.getTree());

                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // java_libbash.g:465:7: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_for_expr2391);
                            wspace225=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace225.getTree());

                            }
                            break;

                    }

                    DO226=(Token)match(input,DO,FOLLOW_DO_in_for_expr2398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO226);

                    pushFollow(FOLLOW_wspace_in_for_expr2400);
                    wspace227=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace227.getTree());
                    pushFollow(FOLLOW_command_list_in_for_expr2402);
                    command_list228=command_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_command_list.add(command_list228.getTree());
                    pushFollow(FOLLOW_semiel_in_for_expr2404);
                    semiel229=semiel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semiel.add(semiel229.getTree());
                    DONE230=(Token)match(input,DONE,FOLLOW_DONE_in_for_expr2406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DONE.add(DONE230);



                    // AST REWRITE
                    // elements: command_list, name, for_each_value, FOR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 466:41: -> ^( FOR name ( for_each_value )* command_list )
                    {
                        // java_libbash.g:466:44: ^( FOR name ( for_each_value )* command_list )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        // java_libbash.g:466:55: ( for_each_value )*
                        while ( stream_for_each_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_for_each_value.nextTree());

                        }
                        stream_for_each_value.reset();
                        adaptor.addChild(root_1, stream_command_list.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:467:6: LLPAREN ( EOL )? ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )? ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )? mod= arithmetics )? ( wspace )? RPAREN RPAREN semiel DO wspace command_list semiel DONE
                    {
                    LLPAREN231=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_for_expr2426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LLPAREN.add(LLPAREN231);

                    // java_libbash.g:467:14: ( EOL )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==EOL) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // java_libbash.g:467:14: EOL
                            {
                            EOL232=(Token)match(input,EOL,FOLLOW_EOL_in_for_expr2428); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EOL.add(EOL232);


                            }
                            break;

                    }

                    // java_libbash.g:469:5: ( ( BLANK )? init= arithmetics ( BLANK )? | BLANK )?
                    int alt97=3;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==BLANK) ) {
                        int LA97_1 = input.LA(2);

                        if ( (LA97_1==SEMIC||LA97_1==DOUBLE_SEMIC) ) {
                            alt97=2;
                        }
                        else if ( (LA97_1==BANG||(LA97_1>=MINUS && LA97_1<=LETTER)||LA97_1==LPAREN||LA97_1==DIGIT||LA97_1==NAME||(LA97_1>=PLUS && LA97_1<=DQUOTE)||LA97_1==TILDE||(LA97_1>=UNDERSCORE && LA97_1<=DOLLAR)||(LA97_1>=COMMAND_SUBSTITUTION_PAREN && LA97_1<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt97=1;
                        }
                    }
                    else if ( (LA97_0==BANG||(LA97_0>=MINUS && LA97_0<=LETTER)||LA97_0==LPAREN||LA97_0==DIGIT||LA97_0==NAME||(LA97_0>=PLUS && LA97_0<=DQUOTE)||LA97_0==TILDE||(LA97_0>=UNDERSCORE && LA97_0<=DOLLAR)||(LA97_0>=COMMAND_SUBSTITUTION_PAREN && LA97_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // java_libbash.g:469:6: ( BLANK )? init= arithmetics ( BLANK )?
                            {
                            // java_libbash.g:469:6: ( BLANK )?
                            int alt95=2;
                            int LA95_0 = input.LA(1);

                            if ( (LA95_0==BLANK) ) {
                                alt95=1;
                            }
                            switch (alt95) {
                                case 1 :
                                    // java_libbash.g:469:6: BLANK
                                    {
                                    BLANK233=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2437); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK233);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_arithmetics_in_for_expr2442);
                            init=arithmetics();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arithmetics.add(init.getTree());
                            // java_libbash.g:469:30: ( BLANK )?
                            int alt96=2;
                            int LA96_0 = input.LA(1);

                            if ( (LA96_0==BLANK) ) {
                                alt96=1;
                            }
                            switch (alt96) {
                                case 1 :
                                    // java_libbash.g:469:30: BLANK
                                    {
                                    BLANK234=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2444); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK234);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // java_libbash.g:469:37: BLANK
                            {
                            BLANK235=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2447); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK235);


                            }
                            break;

                    }

                    // java_libbash.g:471:5: ( SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC | DOUBLE_SEMIC )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==SEMIC) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==DOUBLE_SEMIC) ) {
                        alt101=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // java_libbash.g:471:6: SEMIC ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )? SEMIC
                            {
                            SEMIC236=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr2457); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC236);

                            // java_libbash.g:471:12: ( ( BLANK )? fcond= arithmetics ( BLANK )? | BLANK )?
                            int alt100=3;
                            int LA100_0 = input.LA(1);

                            if ( (LA100_0==BLANK) ) {
                                int LA100_1 = input.LA(2);

                                if ( (LA100_1==SEMIC) ) {
                                    alt100=2;
                                }
                                else if ( (LA100_1==BANG||(LA100_1>=MINUS && LA100_1<=LETTER)||LA100_1==LPAREN||LA100_1==DIGIT||LA100_1==NAME||(LA100_1>=PLUS && LA100_1<=DQUOTE)||LA100_1==TILDE||(LA100_1>=UNDERSCORE && LA100_1<=DOLLAR)||(LA100_1>=COMMAND_SUBSTITUTION_PAREN && LA100_1<=COMMAND_SUBSTITUTION_TICK)) ) {
                                    alt100=1;
                                }
                            }
                            else if ( (LA100_0==BANG||(LA100_0>=MINUS && LA100_0<=LETTER)||LA100_0==LPAREN||LA100_0==DIGIT||LA100_0==NAME||(LA100_0>=PLUS && LA100_0<=DQUOTE)||LA100_0==TILDE||(LA100_0>=UNDERSCORE && LA100_0<=DOLLAR)||(LA100_0>=COMMAND_SUBSTITUTION_PAREN && LA100_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                                alt100=1;
                            }
                            switch (alt100) {
                                case 1 :
                                    // java_libbash.g:471:13: ( BLANK )? fcond= arithmetics ( BLANK )?
                                    {
                                    // java_libbash.g:471:13: ( BLANK )?
                                    int alt98=2;
                                    int LA98_0 = input.LA(1);

                                    if ( (LA98_0==BLANK) ) {
                                        alt98=1;
                                    }
                                    switch (alt98) {
                                        case 1 :
                                            // java_libbash.g:471:13: BLANK
                                            {
                                            BLANK237=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2460); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK237);


                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_arithmetics_in_for_expr2465);
                                    fcond=arithmetics();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_arithmetics.add(fcond.getTree());
                                    // java_libbash.g:471:38: ( BLANK )?
                                    int alt99=2;
                                    int LA99_0 = input.LA(1);

                                    if ( (LA99_0==BLANK) ) {
                                        alt99=1;
                                    }
                                    switch (alt99) {
                                        case 1 :
                                            // java_libbash.g:471:38: BLANK
                                            {
                                            BLANK238=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2467); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK238);


                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // java_libbash.g:471:45: BLANK
                                    {
                                    BLANK239=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2470); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK239);


                                    }
                                    break;

                            }

                            SEMIC240=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr2474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC240);


                            }
                            break;
                        case 2 :
                            // java_libbash.g:471:59: DOUBLE_SEMIC
                            {
                            DOUBLE_SEMIC241=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_for_expr2476); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC241);


                            }
                            break;

                    }

                    // java_libbash.g:473:5: ( ( BLANK )? mod= arithmetics )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==BLANK) ) {
                        int LA103_1 = input.LA(2);

                        if ( (LA103_1==BANG||(LA103_1>=MINUS && LA103_1<=LETTER)||LA103_1==LPAREN||LA103_1==DIGIT||LA103_1==NAME||(LA103_1>=PLUS && LA103_1<=DQUOTE)||LA103_1==TILDE||(LA103_1>=UNDERSCORE && LA103_1<=DOLLAR)||(LA103_1>=COMMAND_SUBSTITUTION_PAREN && LA103_1<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt103=1;
                        }
                    }
                    else if ( (LA103_0==BANG||(LA103_0>=MINUS && LA103_0<=LETTER)||LA103_0==LPAREN||LA103_0==DIGIT||LA103_0==NAME||(LA103_0>=PLUS && LA103_0<=DQUOTE)||LA103_0==TILDE||(LA103_0>=UNDERSCORE && LA103_0<=DOLLAR)||(LA103_0>=COMMAND_SUBSTITUTION_PAREN && LA103_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // java_libbash.g:473:6: ( BLANK )? mod= arithmetics
                            {
                            // java_libbash.g:473:6: ( BLANK )?
                            int alt102=2;
                            int LA102_0 = input.LA(1);

                            if ( (LA102_0==BLANK) ) {
                                alt102=1;
                            }
                            switch (alt102) {
                                case 1 :
                                    // java_libbash.g:473:6: BLANK
                                    {
                                    BLANK242=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr2485); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK242);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_arithmetics_in_for_expr2490);
                            mod=arithmetics();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arithmetics.add(mod.getTree());

                            }
                            break;

                    }

                    // java_libbash.g:473:31: ( wspace )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( ((LA104_0>=EOL && LA104_0<=BLANK)) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // java_libbash.g:473:31: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_for_expr2494);
                            wspace243=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace243.getTree());

                            }
                            break;

                    }

                    RPAREN244=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_for_expr2497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN244);

                    RPAREN245=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_for_expr2499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN245);

                    pushFollow(FOLLOW_semiel_in_for_expr2501);
                    semiel246=semiel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semiel.add(semiel246.getTree());
                    DO247=(Token)match(input,DO,FOLLOW_DO_in_for_expr2503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO247);

                    pushFollow(FOLLOW_wspace_in_for_expr2505);
                    wspace248=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace248.getTree());
                    pushFollow(FOLLOW_command_list_in_for_expr2507);
                    command_list249=command_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_command_list.add(command_list249.getTree());
                    pushFollow(FOLLOW_semiel_in_for_expr2509);
                    semiel250=semiel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semiel.add(semiel250.getTree());
                    DONE251=(Token)match(input,DONE,FOLLOW_DONE_in_for_expr2511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DONE.add(DONE251);



                    // AST REWRITE
                    // elements: mod, init, fcond, command_list
                    // token labels: 
                    // rule labels: retval, fcond, mod, init
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_fcond=new RewriteRuleSubtreeStream(adaptor,"rule fcond",fcond!=null?fcond.tree:null);
                    RewriteRuleSubtreeStream stream_mod=new RewriteRuleSubtreeStream(adaptor,"rule mod",mod!=null?mod.tree:null);
                    RewriteRuleSubtreeStream stream_init=new RewriteRuleSubtreeStream(adaptor,"rule init",init!=null?init.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 474:6: -> ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? )
                    {
                        // java_libbash.g:474:9: ^( CFOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? command_list ( ^( FOR_MOD $mod) )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CFOR, "CFOR"), root_1);

                        // java_libbash.g:474:16: ( ^( FOR_INIT $init) )?
                        if ( stream_init.hasNext() ) {
                            // java_libbash.g:474:16: ^( FOR_INIT $init)
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_2);

                            adaptor.addChild(root_2, stream_init.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_init.reset();
                        // java_libbash.g:474:35: ( ^( FOR_COND $fcond) )?
                        if ( stream_fcond.hasNext() ) {
                            // java_libbash.g:474:35: ^( FOR_COND $fcond)
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_COND, "FOR_COND"), root_2);

                            adaptor.addChild(root_2, stream_fcond.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_fcond.reset();
                        adaptor.addChild(root_1, stream_command_list.nextTree());
                        // java_libbash.g:474:68: ( ^( FOR_MOD $mod) )?
                        if ( stream_mod.hasNext() ) {
                            // java_libbash.g:474:68: ^( FOR_MOD $mod)
                            {
                            CommonTree root_2 = (CommonTree)adaptor.nil();
                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_MOD, "FOR_MOD"), root_2);

                            adaptor.addChild(root_2, stream_mod.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_mod.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_expr"

    public static class for_each_value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_each_value"
    // java_libbash.g:476:1: for_each_value : {...}? => ( BLANK string_expr ) ;
    public final java_libbashParser.for_each_value_return for_each_value() throws RecognitionException {
        java_libbashParser.for_each_value_return retval = new java_libbashParser.for_each_value_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK252=null;
        java_libbashParser.string_expr_return string_expr253 = null;


        CommonTree BLANK252_tree=null;

        try {
            // java_libbash.g:477:2: ({...}? => ( BLANK string_expr ) )
            // java_libbash.g:477:4: {...}? => ( BLANK string_expr )
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((LA(1) == BLANK && LA(2) != EOL && LA(2) != SEMIC && LA(2) != DO)) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "for_each_value", "LA(1) == BLANK && LA(2) != EOL && LA(2) != SEMIC && LA(2) != DO");
            }
            // java_libbash.g:478:7: ( BLANK string_expr )
            // java_libbash.g:478:8: BLANK string_expr
            {
            BLANK252=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_each_value2568); if (state.failed) return retval;
            pushFollow(FOLLOW_string_expr_in_for_each_value2571);
            string_expr253=string_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr253.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_each_value"

    public static class select_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_expr"
    // java_libbash.g:480:1: select_expr : SELECT BLANK name ( wspace IN BLANK string_expr )? semiel DO wspace command_list semiel DONE -> ^( SELECT name ( string_expr )? command_list ) ;
    public final java_libbashParser.select_expr_return select_expr() throws RecognitionException {
        java_libbashParser.select_expr_return retval = new java_libbashParser.select_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT254=null;
        Token BLANK255=null;
        Token IN258=null;
        Token BLANK259=null;
        Token DO262=null;
        Token DONE266=null;
        java_libbashParser.name_return name256 = null;

        java_libbashParser.wspace_return wspace257 = null;

        java_libbashParser.string_expr_return string_expr260 = null;

        java_libbashParser.semiel_return semiel261 = null;

        java_libbashParser.wspace_return wspace263 = null;

        java_libbashParser.command_list_return command_list264 = null;

        java_libbashParser.semiel_return semiel265 = null;


        CommonTree SELECT254_tree=null;
        CommonTree BLANK255_tree=null;
        CommonTree IN258_tree=null;
        CommonTree BLANK259_tree=null;
        CommonTree DO262_tree=null;
        CommonTree DONE266_tree=null;
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        RewriteRuleSubtreeStream stream_string_expr=new RewriteRuleSubtreeStream(adaptor,"rule string_expr");
        try {
            // java_libbash.g:481:2: ( SELECT BLANK name ( wspace IN BLANK string_expr )? semiel DO wspace command_list semiel DONE -> ^( SELECT name ( string_expr )? command_list ) )
            // java_libbash.g:481:4: SELECT BLANK name ( wspace IN BLANK string_expr )? semiel DO wspace command_list semiel DONE
            {
            SELECT254=(Token)match(input,SELECT,FOLLOW_SELECT_in_select_expr2581); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT254);

            BLANK255=(Token)match(input,BLANK,FOLLOW_BLANK_in_select_expr2583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK255);

            pushFollow(FOLLOW_name_in_select_expr2585);
            name256=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name256.getTree());
            // java_libbash.g:481:22: ( wspace IN BLANK string_expr )?
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // java_libbash.g:481:23: wspace IN BLANK string_expr
                    {
                    pushFollow(FOLLOW_wspace_in_select_expr2588);
                    wspace257=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace257.getTree());
                    IN258=(Token)match(input,IN,FOLLOW_IN_in_select_expr2590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IN.add(IN258);

                    BLANK259=(Token)match(input,BLANK,FOLLOW_BLANK_in_select_expr2592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK259);

                    pushFollow(FOLLOW_string_expr_in_select_expr2594);
                    string_expr260=string_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_string_expr.add(string_expr260.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_semiel_in_select_expr2598);
            semiel261=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel261.getTree());
            DO262=(Token)match(input,DO,FOLLOW_DO_in_select_expr2600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DO.add(DO262);

            pushFollow(FOLLOW_wspace_in_select_expr2602);
            wspace263=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace263.getTree());
            pushFollow(FOLLOW_command_list_in_select_expr2604);
            command_list264=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(command_list264.getTree());
            pushFollow(FOLLOW_semiel_in_select_expr2606);
            semiel265=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel265.getTree());
            DONE266=(Token)match(input,DONE,FOLLOW_DONE_in_select_expr2608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DONE.add(DONE266);



            // AST REWRITE
            // elements: string_expr, name, SELECT, command_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 482:4: -> ^( SELECT name ( string_expr )? command_list )
            {
                // java_libbash.g:482:7: ^( SELECT name ( string_expr )? command_list )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);

                adaptor.addChild(root_1, stream_name.nextTree());
                // java_libbash.g:482:21: ( string_expr )?
                if ( stream_string_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_string_expr.nextTree());

                }
                stream_string_expr.reset();
                adaptor.addChild(root_1, stream_command_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "select_expr"

    public static class if_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_expr"
    // java_libbash.g:483:1: if_expr : IF wspace ag= command_list semiel THEN wspace iflist= command_list semiel ( elif_expr )* ( ELSE wspace else_list= command_list semiel )? FI -> ^( IF_STATEMENT ^( IF $ag $iflist) ( elif_expr )* ( ^( ELSE $else_list) )? ) ;
    public final java_libbashParser.if_expr_return if_expr() throws RecognitionException {
        java_libbashParser.if_expr_return retval = new java_libbashParser.if_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IF267=null;
        Token THEN270=null;
        Token ELSE274=null;
        Token FI277=null;
        java_libbashParser.command_list_return ag = null;

        java_libbashParser.command_list_return iflist = null;

        java_libbashParser.command_list_return else_list = null;

        java_libbashParser.wspace_return wspace268 = null;

        java_libbashParser.semiel_return semiel269 = null;

        java_libbashParser.wspace_return wspace271 = null;

        java_libbashParser.semiel_return semiel272 = null;

        java_libbashParser.elif_expr_return elif_expr273 = null;

        java_libbashParser.wspace_return wspace275 = null;

        java_libbashParser.semiel_return semiel276 = null;


        CommonTree IF267_tree=null;
        CommonTree THEN270_tree=null;
        CommonTree ELSE274_tree=null;
        CommonTree FI277_tree=null;
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleTokenStream stream_FI=new RewriteRuleTokenStream(adaptor,"token FI");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        RewriteRuleSubtreeStream stream_elif_expr=new RewriteRuleSubtreeStream(adaptor,"rule elif_expr");
        try {
            // java_libbash.g:484:2: ( IF wspace ag= command_list semiel THEN wspace iflist= command_list semiel ( elif_expr )* ( ELSE wspace else_list= command_list semiel )? FI -> ^( IF_STATEMENT ^( IF $ag $iflist) ( elif_expr )* ( ^( ELSE $else_list) )? ) )
            // java_libbash.g:484:4: IF wspace ag= command_list semiel THEN wspace iflist= command_list semiel ( elif_expr )* ( ELSE wspace else_list= command_list semiel )? FI
            {
            IF267=(Token)match(input,IF,FOLLOW_IF_in_if_expr2633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF267);

            pushFollow(FOLLOW_wspace_in_if_expr2635);
            wspace268=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace268.getTree());
            pushFollow(FOLLOW_command_list_in_if_expr2639);
            ag=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(ag.getTree());
            pushFollow(FOLLOW_semiel_in_if_expr2641);
            semiel269=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel269.getTree());
            THEN270=(Token)match(input,THEN,FOLLOW_THEN_in_if_expr2643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN270);

            pushFollow(FOLLOW_wspace_in_if_expr2645);
            wspace271=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace271.getTree());
            pushFollow(FOLLOW_command_list_in_if_expr2649);
            iflist=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(iflist.getTree());
            pushFollow(FOLLOW_semiel_in_if_expr2651);
            semiel272=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel272.getTree());
            // java_libbash.g:485:3: ( elif_expr )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==ELIF) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // java_libbash.g:485:4: elif_expr
            	    {
            	    pushFollow(FOLLOW_elif_expr_in_if_expr2656);
            	    elif_expr273=elif_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_elif_expr.add(elif_expr273.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);

            // java_libbash.g:486:3: ( ELSE wspace else_list= command_list semiel )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ELSE) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // java_libbash.g:486:4: ELSE wspace else_list= command_list semiel
                    {
                    ELSE274=(Token)match(input,ELSE,FOLLOW_ELSE_in_if_expr2663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE274);

                    pushFollow(FOLLOW_wspace_in_if_expr2665);
                    wspace275=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace275.getTree());
                    pushFollow(FOLLOW_command_list_in_if_expr2669);
                    else_list=command_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_command_list.add(else_list.getTree());
                    pushFollow(FOLLOW_semiel_in_if_expr2671);
                    semiel276=semiel();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_semiel.add(semiel276.getTree());

                    }
                    break;

            }

            FI277=(Token)match(input,FI,FOLLOW_FI_in_if_expr2675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FI.add(FI277);



            // AST REWRITE
            // elements: else_list, ELSE, elif_expr, iflist, ag, IF
            // token labels: 
            // rule labels: retval, iflist, ag, else_list
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_iflist=new RewriteRuleSubtreeStream(adaptor,"rule iflist",iflist!=null?iflist.tree:null);
            RewriteRuleSubtreeStream stream_ag=new RewriteRuleSubtreeStream(adaptor,"rule ag",ag!=null?ag.tree:null);
            RewriteRuleSubtreeStream stream_else_list=new RewriteRuleSubtreeStream(adaptor,"rule else_list",else_list!=null?else_list.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 487:4: -> ^( IF_STATEMENT ^( IF $ag $iflist) ( elif_expr )* ( ^( ELSE $else_list) )? )
            {
                // java_libbash.g:487:7: ^( IF_STATEMENT ^( IF $ag $iflist) ( elif_expr )* ( ^( ELSE $else_list) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF_STATEMENT, "IF_STATEMENT"), root_1);

                // java_libbash.g:487:22: ^( IF $ag $iflist)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_2);

                adaptor.addChild(root_2, stream_ag.nextTree());
                adaptor.addChild(root_2, stream_iflist.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // java_libbash.g:487:40: ( elif_expr )*
                while ( stream_elif_expr.hasNext() ) {
                    adaptor.addChild(root_1, stream_elif_expr.nextTree());

                }
                stream_elif_expr.reset();
                // java_libbash.g:487:53: ( ^( ELSE $else_list) )?
                if ( stream_else_list.hasNext()||stream_ELSE.hasNext() ) {
                    // java_libbash.g:487:53: ^( ELSE $else_list)
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(stream_ELSE.nextNode(), root_2);

                    adaptor.addChild(root_2, stream_else_list.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_else_list.reset();
                stream_ELSE.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_expr"

    public static class elif_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elif_expr"
    // java_libbash.g:488:1: elif_expr : ELIF BLANK ag= command_list semiel THEN wspace iflist= command_list semiel -> ^( IF[\"if\"] $ag $iflist) ;
    public final java_libbashParser.elif_expr_return elif_expr() throws RecognitionException {
        java_libbashParser.elif_expr_return retval = new java_libbashParser.elif_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELIF278=null;
        Token BLANK279=null;
        Token THEN281=null;
        java_libbashParser.command_list_return ag = null;

        java_libbashParser.command_list_return iflist = null;

        java_libbashParser.semiel_return semiel280 = null;

        java_libbashParser.wspace_return wspace282 = null;

        java_libbashParser.semiel_return semiel283 = null;


        CommonTree ELIF278_tree=null;
        CommonTree BLANK279_tree=null;
        CommonTree THEN281_tree=null;
        RewriteRuleTokenStream stream_ELIF=new RewriteRuleTokenStream(adaptor,"token ELIF");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        try {
            // java_libbash.g:489:2: ( ELIF BLANK ag= command_list semiel THEN wspace iflist= command_list semiel -> ^( IF[\"if\"] $ag $iflist) )
            // java_libbash.g:489:4: ELIF BLANK ag= command_list semiel THEN wspace iflist= command_list semiel
            {
            ELIF278=(Token)match(input,ELIF,FOLLOW_ELIF_in_elif_expr2715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ELIF.add(ELIF278);

            BLANK279=(Token)match(input,BLANK,FOLLOW_BLANK_in_elif_expr2717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK279);

            pushFollow(FOLLOW_command_list_in_elif_expr2721);
            ag=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(ag.getTree());
            pushFollow(FOLLOW_semiel_in_elif_expr2723);
            semiel280=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel280.getTree());
            THEN281=(Token)match(input,THEN,FOLLOW_THEN_in_elif_expr2725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN281);

            pushFollow(FOLLOW_wspace_in_elif_expr2727);
            wspace282=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace282.getTree());
            pushFollow(FOLLOW_command_list_in_elif_expr2731);
            iflist=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(iflist.getTree());
            pushFollow(FOLLOW_semiel_in_elif_expr2733);
            semiel283=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel283.getTree());


            // AST REWRITE
            // elements: iflist, ag
            // token labels: 
            // rule labels: retval, iflist, ag
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_iflist=new RewriteRuleSubtreeStream(adaptor,"rule iflist",iflist!=null?iflist.tree:null);
            RewriteRuleSubtreeStream stream_ag=new RewriteRuleSubtreeStream(adaptor,"rule ag",ag!=null?ag.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 490:4: -> ^( IF[\"if\"] $ag $iflist)
            {
                // java_libbash.g:490:7: ^( IF[\"if\"] $ag $iflist)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "if"), root_1);

                adaptor.addChild(root_1, stream_ag.nextTree());
                adaptor.addChild(root_1, stream_iflist.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elif_expr"

    public static class while_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_expr"
    // java_libbash.g:491:1: while_expr : WHILE ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE -> ^( WHILE $istrue $dothis) ;
    public final java_libbashParser.while_expr_return while_expr() throws RecognitionException {
        java_libbashParser.while_expr_return retval = new java_libbashParser.while_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHILE284=null;
        Token DO287=null;
        Token DONE290=null;
        java_libbashParser.command_list_return istrue = null;

        java_libbashParser.command_list_return dothis = null;

        java_libbashParser.wspace_return wspace285 = null;

        java_libbashParser.semiel_return semiel286 = null;

        java_libbashParser.wspace_return wspace288 = null;

        java_libbashParser.semiel_return semiel289 = null;


        CommonTree WHILE284_tree=null;
        CommonTree DO287_tree=null;
        CommonTree DONE290_tree=null;
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        try {
            // java_libbash.g:492:2: ( WHILE ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE -> ^( WHILE $istrue $dothis) )
            // java_libbash.g:492:4: WHILE ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE
            {
            WHILE284=(Token)match(input,WHILE,FOLLOW_WHILE_in_while_expr2757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHILE.add(WHILE284);

            // java_libbash.g:492:10: ( wspace )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==BLANK) ) {
                int LA109_1 = input.LA(2);

                if ( (!(((LA(1) == GREATER_THAN)))) ) {
                    alt109=1;
                }
            }
            else if ( (LA109_0==EOL) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // java_libbash.g:492:10: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_while_expr2759);
                    wspace285=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace285.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_command_list_in_while_expr2764);
            istrue=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(istrue.getTree());
            pushFollow(FOLLOW_semiel_in_while_expr2766);
            semiel286=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel286.getTree());
            DO287=(Token)match(input,DO,FOLLOW_DO_in_while_expr2768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DO.add(DO287);

            pushFollow(FOLLOW_wspace_in_while_expr2770);
            wspace288=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace288.getTree());
            pushFollow(FOLLOW_command_list_in_while_expr2774);
            dothis=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(dothis.getTree());
            pushFollow(FOLLOW_semiel_in_while_expr2776);
            semiel289=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel289.getTree());
            DONE290=(Token)match(input,DONE,FOLLOW_DONE_in_while_expr2778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DONE.add(DONE290);



            // AST REWRITE
            // elements: WHILE, dothis, istrue
            // token labels: 
            // rule labels: istrue, retval, dothis
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_istrue=new RewriteRuleSubtreeStream(adaptor,"rule istrue",istrue!=null?istrue.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_dothis=new RewriteRuleSubtreeStream(adaptor,"rule dothis",dothis!=null?dothis.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 493:4: -> ^( WHILE $istrue $dothis)
            {
                // java_libbash.g:493:7: ^( WHILE $istrue $dothis)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_istrue.nextTree());
                adaptor.addChild(root_1, stream_dothis.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_expr"

    public static class until_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "until_expr"
    // java_libbash.g:494:1: until_expr : UNTIL ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE -> ^( UNTIL $istrue $dothis) ;
    public final java_libbashParser.until_expr_return until_expr() throws RecognitionException {
        java_libbashParser.until_expr_return retval = new java_libbashParser.until_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token UNTIL291=null;
        Token DO294=null;
        Token DONE297=null;
        java_libbashParser.command_list_return istrue = null;

        java_libbashParser.command_list_return dothis = null;

        java_libbashParser.wspace_return wspace292 = null;

        java_libbashParser.semiel_return semiel293 = null;

        java_libbashParser.wspace_return wspace295 = null;

        java_libbashParser.semiel_return semiel296 = null;


        CommonTree UNTIL291_tree=null;
        CommonTree DO294_tree=null;
        CommonTree DONE297_tree=null;
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        try {
            // java_libbash.g:495:2: ( UNTIL ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE -> ^( UNTIL $istrue $dothis) )
            // java_libbash.g:495:4: UNTIL ( wspace )? istrue= command_list semiel DO wspace dothis= command_list semiel DONE
            {
            UNTIL291=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_until_expr2801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UNTIL.add(UNTIL291);

            // java_libbash.g:495:10: ( wspace )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==BLANK) ) {
                int LA110_1 = input.LA(2);

                if ( (!(((LA(1) == GREATER_THAN)))) ) {
                    alt110=1;
                }
            }
            else if ( (LA110_0==EOL) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // java_libbash.g:495:10: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_until_expr2803);
                    wspace292=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace292.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_command_list_in_until_expr2808);
            istrue=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(istrue.getTree());
            pushFollow(FOLLOW_semiel_in_until_expr2810);
            semiel293=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel293.getTree());
            DO294=(Token)match(input,DO,FOLLOW_DO_in_until_expr2812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DO.add(DO294);

            pushFollow(FOLLOW_wspace_in_until_expr2814);
            wspace295=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace295.getTree());
            pushFollow(FOLLOW_command_list_in_until_expr2818);
            dothis=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(dothis.getTree());
            pushFollow(FOLLOW_semiel_in_until_expr2820);
            semiel296=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel296.getTree());
            DONE297=(Token)match(input,DONE,FOLLOW_DONE_in_until_expr2822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DONE.add(DONE297);



            // AST REWRITE
            // elements: istrue, UNTIL, dothis
            // token labels: 
            // rule labels: istrue, retval, dothis
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_istrue=new RewriteRuleSubtreeStream(adaptor,"rule istrue",istrue!=null?istrue.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_dothis=new RewriteRuleSubtreeStream(adaptor,"rule dothis",dothis!=null?dothis.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 496:4: -> ^( UNTIL $istrue $dothis)
            {
                // java_libbash.g:496:7: ^( UNTIL $istrue $dothis)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_UNTIL.nextNode(), root_1);

                adaptor.addChild(root_1, stream_istrue.nextTree());
                adaptor.addChild(root_1, stream_dothis.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "until_expr"

    public static class case_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expr"
    // java_libbash.g:498:1: case_expr : CASE BLANK string_expr wspace IN case_body -> ^( CASE string_expr case_body ) ;
    public final java_libbashParser.case_expr_return case_expr() throws RecognitionException {
        java_libbashParser.case_expr_return retval = new java_libbashParser.case_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE298=null;
        Token BLANK299=null;
        Token IN302=null;
        java_libbashParser.string_expr_return string_expr300 = null;

        java_libbashParser.wspace_return wspace301 = null;

        java_libbashParser.case_body_return case_body303 = null;


        CommonTree CASE298_tree=null;
        CommonTree BLANK299_tree=null;
        CommonTree IN302_tree=null;
        RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_string_expr=new RewriteRuleSubtreeStream(adaptor,"rule string_expr");
        try {
            // java_libbash.g:499:2: ( CASE BLANK string_expr wspace IN case_body -> ^( CASE string_expr case_body ) )
            // java_libbash.g:499:4: CASE BLANK string_expr wspace IN case_body
            {
            CASE298=(Token)match(input,CASE,FOLLOW_CASE_in_case_expr2846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CASE.add(CASE298);

            BLANK299=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_expr2848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK299);

            pushFollow(FOLLOW_string_expr_in_case_expr2850);
            string_expr300=string_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_string_expr.add(string_expr300.getTree());
            pushFollow(FOLLOW_wspace_in_case_expr2852);
            wspace301=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace301.getTree());
            IN302=(Token)match(input,IN,FOLLOW_IN_in_case_expr2854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IN.add(IN302);

            pushFollow(FOLLOW_case_body_in_case_expr2856);
            case_body303=case_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_body.add(case_body303.getTree());


            // AST REWRITE
            // elements: case_body, CASE, string_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 499:47: -> ^( CASE string_expr case_body )
            {
                // java_libbash.g:499:50: ^( CASE string_expr case_body )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_CASE.nextNode(), root_1);

                adaptor.addChild(root_1, stream_string_expr.nextTree());
                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_expr"

    protected static class case_body_scope {
        boolean case_end;
    }
    protected Stack case_body_stack = new Stack();

    public static class case_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_body"
    // java_libbash.g:500:1: case_body : ( ( wspace ESAC )=> ( wspace ESAC ) -> ^( CASE_PATTERN ) | ({...}? => case_statement )+ -> ( case_statement )+ ) ;
    public final java_libbashParser.case_body_return case_body() throws RecognitionException {
        case_body_stack.push(new case_body_scope());
        java_libbashParser.case_body_return retval = new java_libbashParser.case_body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESAC305=null;
        java_libbashParser.wspace_return wspace304 = null;

        java_libbashParser.case_statement_return case_statement306 = null;


        CommonTree ESAC305_tree=null;
        RewriteRuleTokenStream stream_ESAC=new RewriteRuleTokenStream(adaptor,"token ESAC");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_case_statement=new RewriteRuleSubtreeStream(adaptor,"rule case_statement");
        try {
            // java_libbash.g:508:2: ( ( ( wspace ESAC )=> ( wspace ESAC ) -> ^( CASE_PATTERN ) | ({...}? => case_statement )+ -> ( case_statement )+ ) )
            // java_libbash.g:508:4: ( ( wspace ESAC )=> ( wspace ESAC ) -> ^( CASE_PATTERN ) | ({...}? => case_statement )+ -> ( case_statement )+ )
            {
            if ( state.backtracking==0 ) {
              ((case_body_scope)case_body_stack.peek()).case_end = false;
            }
            // java_libbash.g:509:3: ( ( wspace ESAC )=> ( wspace ESAC ) -> ^( CASE_PATTERN ) | ({...}? => case_statement )+ -> ( case_statement )+ )
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // java_libbash.g:510:4: ( wspace ESAC )=> ( wspace ESAC )
                    {
                    // java_libbash.g:510:21: ( wspace ESAC )
                    // java_libbash.g:510:22: wspace ESAC
                    {
                    pushFollow(FOLLOW_wspace_in_case_body2896);
                    wspace304=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace304.getTree());
                    ESAC305=(Token)match(input,ESAC,FOLLOW_ESAC_in_case_body2898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ESAC.add(ESAC305);


                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 510:35: -> ^( CASE_PATTERN )
                    {
                        // java_libbash.g:510:38: ^( CASE_PATTERN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_PATTERN, "CASE_PATTERN"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:511:5: ({...}? => case_statement )+
                    {
                    // java_libbash.g:511:5: ({...}? => case_statement )+
                    int cnt111=0;
                    loop111:
                    do {
                        int alt111=2;
                        alt111 = dfa111.predict(input);
                        switch (alt111) {
                    	case 1 :
                    	    // java_libbash.g:511:6: {...}? => case_statement
                    	    {
                    	    if ( !((!((case_body_scope)case_body_stack.peek()).case_end)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "case_body", "!$case_body::case_end");
                    	    }
                    	    pushFollow(FOLLOW_case_statement_in_case_body2916);
                    	    case_statement306=case_statement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_case_statement.add(case_statement306.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt111 >= 1 ) break loop111;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(111, input);
                                throw eee;
                        }
                        cnt111++;
                    } while (true);



                    // AST REWRITE
                    // elements: case_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 511:51: -> ( case_statement )+
                    {
                        if ( !(stream_case_statement.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_case_statement.hasNext() ) {
                            adaptor.addChild(root_0, stream_case_statement.nextTree());

                        }
                        stream_case_statement.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            case_body_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "case_body"

    public static class case_statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement"
    // java_libbash.g:513:1: case_statement : ( wspace )? ( LPAREN ( BLANK )? )? extended_pattern ( ( BLANK )? PIPE ( BLANK )? extended_pattern )* ( BLANK )? RPAREN ( wspace command_list )? ( ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )? | wspace ESAC ) -> ^( CASE_PATTERN ( extended_pattern )+ ( CASE_COMMAND command_list )? ) ;
    public final java_libbashParser.case_statement_return case_statement() throws RecognitionException {
        java_libbashParser.case_statement_return retval = new java_libbashParser.case_statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN308=null;
        Token BLANK309=null;
        Token BLANK311=null;
        Token PIPE312=null;
        Token BLANK313=null;
        Token BLANK315=null;
        Token RPAREN316=null;
        Token DOUBLE_SEMIC320=null;
        Token ESAC322=null;
        Token ESAC324=null;
        java_libbashParser.wspace_return wspace307 = null;

        java_libbashParser.extended_pattern_return extended_pattern310 = null;

        java_libbashParser.extended_pattern_return extended_pattern314 = null;

        java_libbashParser.wspace_return wspace317 = null;

        java_libbashParser.command_list_return command_list318 = null;

        java_libbashParser.wspace_return wspace319 = null;

        java_libbashParser.wspace_return wspace321 = null;

        java_libbashParser.wspace_return wspace323 = null;


        CommonTree LPAREN308_tree=null;
        CommonTree BLANK309_tree=null;
        CommonTree BLANK311_tree=null;
        CommonTree PIPE312_tree=null;
        CommonTree BLANK313_tree=null;
        CommonTree BLANK315_tree=null;
        CommonTree RPAREN316_tree=null;
        CommonTree DOUBLE_SEMIC320_tree=null;
        CommonTree ESAC322_tree=null;
        CommonTree ESAC324_tree=null;
        RewriteRuleTokenStream stream_ESAC=new RewriteRuleTokenStream(adaptor,"token ESAC");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
        RewriteRuleTokenStream stream_DOUBLE_SEMIC=new RewriteRuleTokenStream(adaptor,"token DOUBLE_SEMIC");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_extended_pattern=new RewriteRuleSubtreeStream(adaptor,"rule extended_pattern");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        try {
            // java_libbash.g:514:2: ( ( wspace )? ( LPAREN ( BLANK )? )? extended_pattern ( ( BLANK )? PIPE ( BLANK )? extended_pattern )* ( BLANK )? RPAREN ( wspace command_list )? ( ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )? | wspace ESAC ) -> ^( CASE_PATTERN ( extended_pattern )+ ( CASE_COMMAND command_list )? ) )
            // java_libbash.g:514:4: ( wspace )? ( LPAREN ( BLANK )? )? extended_pattern ( ( BLANK )? PIPE ( BLANK )? extended_pattern )* ( BLANK )? RPAREN ( wspace command_list )? ( ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )? | wspace ESAC )
            {
            // java_libbash.g:514:4: ( wspace )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=EOL && LA113_0<=BLANK)) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // java_libbash.g:514:4: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_case_statement2935);
                    wspace307=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace307.getTree());

                    }
                    break;

            }

            // java_libbash.g:514:12: ( LPAREN ( BLANK )? )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==LPAREN) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // java_libbash.g:514:13: LPAREN ( BLANK )?
                    {
                    LPAREN308=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_case_statement2939); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN308);

                    // java_libbash.g:514:20: ( BLANK )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==BLANK) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // java_libbash.g:514:20: BLANK
                            {
                            BLANK309=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_statement2941); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK309);


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_extended_pattern_in_case_statement2946);
            extended_pattern310=extended_pattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern310.getTree());
            // java_libbash.g:514:46: ( ( BLANK )? PIPE ( BLANK )? extended_pattern )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==BLANK) ) {
                    int LA118_1 = input.LA(2);

                    if ( (LA118_1==PIPE) ) {
                        alt118=1;
                    }


                }
                else if ( (LA118_0==PIPE) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // java_libbash.g:514:47: ( BLANK )? PIPE ( BLANK )? extended_pattern
            	    {
            	    // java_libbash.g:514:47: ( BLANK )?
            	    int alt116=2;
            	    int LA116_0 = input.LA(1);

            	    if ( (LA116_0==BLANK) ) {
            	        alt116=1;
            	    }
            	    switch (alt116) {
            	        case 1 :
            	            // java_libbash.g:514:47: BLANK
            	            {
            	            BLANK311=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_statement2949); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BLANK.add(BLANK311);


            	            }
            	            break;

            	    }

            	    PIPE312=(Token)match(input,PIPE,FOLLOW_PIPE_in_case_statement2952); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE312);

            	    // java_libbash.g:514:59: ( BLANK )?
            	    int alt117=2;
            	    int LA117_0 = input.LA(1);

            	    if ( (LA117_0==BLANK) ) {
            	        alt117=1;
            	    }
            	    switch (alt117) {
            	        case 1 :
            	            // java_libbash.g:514:59: BLANK
            	            {
            	            BLANK313=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_statement2954); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BLANK.add(BLANK313);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_extended_pattern_in_case_statement2957);
            	    extended_pattern314=extended_pattern();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern314.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            // java_libbash.g:514:85: ( BLANK )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==BLANK) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // java_libbash.g:514:85: BLANK
                    {
                    BLANK315=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_statement2961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK315);


                    }
                    break;

            }

            RPAREN316=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_case_statement2964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN316);

            // java_libbash.g:515:3: ( wspace command_list )?
            int alt120=2;
            alt120 = dfa120.predict(input);
            switch (alt120) {
                case 1 :
                    // java_libbash.g:515:4: wspace command_list
                    {
                    pushFollow(FOLLOW_wspace_in_case_statement2969);
                    wspace317=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace317.getTree());
                    pushFollow(FOLLOW_command_list_in_case_statement2971);
                    command_list318=command_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_command_list.add(command_list318.getTree());

                    }
                    break;

            }

            // java_libbash.g:516:3: ( ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )? | wspace ESAC )
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // java_libbash.g:517:4: ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )?
                    {
                    // java_libbash.g:517:4: ( wspace )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( ((LA121_0>=EOL && LA121_0<=BLANK)) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // java_libbash.g:517:4: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_case_statement2982);
                            wspace319=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace319.getTree());

                            }
                            break;

                    }

                    DOUBLE_SEMIC320=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_case_statement2985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC320);

                    // java_libbash.g:517:25: ( ( wspace ESAC )=> wspace ESAC )?
                    int alt122=2;
                    alt122 = dfa122.predict(input);
                    switch (alt122) {
                        case 1 :
                            // java_libbash.g:517:26: ( wspace ESAC )=> wspace ESAC
                            {
                            pushFollow(FOLLOW_wspace_in_case_statement2996);
                            wspace321=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace321.getTree());
                            ESAC322=(Token)match(input,ESAC,FOLLOW_ESAC_in_case_statement2998); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ESAC.add(ESAC322);

                            if ( state.backtracking==0 ) {
                              ((case_body_scope)case_body_stack.peek()).case_end = true;
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // java_libbash.g:518:5: wspace ESAC
                    {
                    pushFollow(FOLLOW_wspace_in_case_statement3008);
                    wspace323=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace323.getTree());
                    ESAC324=(Token)match(input,ESAC,FOLLOW_ESAC_in_case_statement3010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ESAC.add(ESAC324);

                    if ( state.backtracking==0 ) {
                      ((case_body_scope)case_body_stack.peek()).case_end = true;
                    }

                    }
                    break;

            }



            // AST REWRITE
            // elements: command_list, extended_pattern
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 520:4: -> ^( CASE_PATTERN ( extended_pattern )+ ( CASE_COMMAND command_list )? )
            {
                // java_libbash.g:520:7: ^( CASE_PATTERN ( extended_pattern )+ ( CASE_COMMAND command_list )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_PATTERN, "CASE_PATTERN"), root_1);

                if ( !(stream_extended_pattern.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_extended_pattern.hasNext() ) {
                    adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                }
                stream_extended_pattern.reset();
                // java_libbash.g:520:40: ( CASE_COMMAND command_list )?
                if ( stream_command_list.hasNext() ) {
                    adaptor.addChild(root_1, (CommonTree)adaptor.create(CASE_COMMAND, "CASE_COMMAND"));
                    adaptor.addChild(root_1, stream_command_list.nextTree());

                }
                stream_command_list.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "case_statement"

    public static class subshell_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subshell"
    // java_libbash.g:522:1: subshell : LPAREN ( wspace )? command_list ( ( BLANK )? SEMIC )? ( wspace )? RPAREN -> ^( SUBSHELL command_list ) ;
    public final java_libbashParser.subshell_return subshell() throws RecognitionException {
        java_libbashParser.subshell_return retval = new java_libbashParser.subshell_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN325=null;
        Token BLANK328=null;
        Token SEMIC329=null;
        Token RPAREN331=null;
        java_libbashParser.wspace_return wspace326 = null;

        java_libbashParser.command_list_return command_list327 = null;

        java_libbashParser.wspace_return wspace330 = null;


        CommonTree LPAREN325_tree=null;
        CommonTree BLANK328_tree=null;
        CommonTree SEMIC329_tree=null;
        CommonTree RPAREN331_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        try {
            // java_libbash.g:523:2: ( LPAREN ( wspace )? command_list ( ( BLANK )? SEMIC )? ( wspace )? RPAREN -> ^( SUBSHELL command_list ) )
            // java_libbash.g:523:4: LPAREN ( wspace )? command_list ( ( BLANK )? SEMIC )? ( wspace )? RPAREN
            {
            LPAREN325=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subshell3044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN325);

            // java_libbash.g:523:11: ( wspace )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==BLANK) ) {
                int LA124_1 = input.LA(2);

                if ( (!(((LA(1) == GREATER_THAN)))) ) {
                    alt124=1;
                }
            }
            else if ( (LA124_0==EOL) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // java_libbash.g:523:11: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_subshell3046);
                    wspace326=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace326.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_command_list_in_subshell3049);
            command_list327=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(command_list327.getTree());
            // java_libbash.g:523:32: ( ( BLANK )? SEMIC )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==BLANK) ) {
                int LA126_1 = input.LA(2);

                if ( (LA126_1==SEMIC) ) {
                    alt126=1;
                }
            }
            else if ( (LA126_0==SEMIC) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // java_libbash.g:523:33: ( BLANK )? SEMIC
                    {
                    // java_libbash.g:523:33: ( BLANK )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==BLANK) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // java_libbash.g:523:33: BLANK
                            {
                            BLANK328=(Token)match(input,BLANK,FOLLOW_BLANK_in_subshell3052); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK328);


                            }
                            break;

                    }

                    SEMIC329=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_subshell3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC329);


                    }
                    break;

            }

            // java_libbash.g:523:48: ( wspace )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0>=EOL && LA127_0<=BLANK)) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // java_libbash.g:523:48: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_subshell3059);
                    wspace330=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace330.getTree());

                    }
                    break;

            }

            RPAREN331=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subshell3062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN331);



            // AST REWRITE
            // elements: command_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 523:63: -> ^( SUBSHELL command_list )
            {
                // java_libbash.g:523:66: ^( SUBSHELL command_list )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSHELL, "SUBSHELL"), root_1);

                adaptor.addChild(root_1, stream_command_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subshell"

    public static class current_shell_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "current_shell"
    // java_libbash.g:525:1: current_shell : LBRACE wspace command_list semiel RBRACE -> ^( CURRENT_SHELL command_list ) ;
    public final java_libbashParser.current_shell_return current_shell() throws RecognitionException {
        java_libbashParser.current_shell_return retval = new java_libbashParser.current_shell_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACE332=null;
        Token RBRACE336=null;
        java_libbashParser.wspace_return wspace333 = null;

        java_libbashParser.command_list_return command_list334 = null;

        java_libbashParser.semiel_return semiel335 = null;


        CommonTree LBRACE332_tree=null;
        CommonTree RBRACE336_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_command_list=new RewriteRuleSubtreeStream(adaptor,"rule command_list");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
        try {
            // java_libbash.g:526:2: ( LBRACE wspace command_list semiel RBRACE -> ^( CURRENT_SHELL command_list ) )
            // java_libbash.g:526:4: LBRACE wspace command_list semiel RBRACE
            {
            LBRACE332=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_current_shell3079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE332);

            pushFollow(FOLLOW_wspace_in_current_shell3081);
            wspace333=wspace();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_wspace.add(wspace333.getTree());
            pushFollow(FOLLOW_command_list_in_current_shell3083);
            command_list334=command_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_command_list.add(command_list334.getTree());
            pushFollow(FOLLOW_semiel_in_current_shell3085);
            semiel335=semiel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_semiel.add(semiel335.getTree());
            RBRACE336=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_current_shell3087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE336);



            // AST REWRITE
            // elements: command_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 526:45: -> ^( CURRENT_SHELL command_list )
            {
                // java_libbash.g:526:48: ^( CURRENT_SHELL command_list )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CURRENT_SHELL, "CURRENT_SHELL"), root_1);

                adaptor.addChild(root_1, stream_command_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "current_shell"

    public static class arithmetic_expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic_expression"
    // java_libbash.g:528:1: arithmetic_expression : LLPAREN ( wspace )? arithmetics ( wspace )? RPAREN RPAREN -> ^( ARITHMETIC_EXPRESSION arithmetics ) ;
    public final java_libbashParser.arithmetic_expression_return arithmetic_expression() throws RecognitionException {
        java_libbashParser.arithmetic_expression_return retval = new java_libbashParser.arithmetic_expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LLPAREN337=null;
        Token RPAREN341=null;
        Token RPAREN342=null;
        java_libbashParser.wspace_return wspace338 = null;

        java_libbashParser.arithmetics_return arithmetics339 = null;

        java_libbashParser.wspace_return wspace340 = null;


        CommonTree LLPAREN337_tree=null;
        CommonTree RPAREN341_tree=null;
        CommonTree RPAREN342_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LLPAREN=new RewriteRuleTokenStream(adaptor,"token LLPAREN");
        RewriteRuleSubtreeStream stream_arithmetics=new RewriteRuleSubtreeStream(adaptor,"rule arithmetics");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        try {
            // java_libbash.g:529:2: ( LLPAREN ( wspace )? arithmetics ( wspace )? RPAREN RPAREN -> ^( ARITHMETIC_EXPRESSION arithmetics ) )
            // java_libbash.g:529:4: LLPAREN ( wspace )? arithmetics ( wspace )? RPAREN RPAREN
            {
            LLPAREN337=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_arithmetic_expression3104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LLPAREN.add(LLPAREN337);

            // java_libbash.g:529:12: ( wspace )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=EOL && LA128_0<=BLANK)) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // java_libbash.g:529:12: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_arithmetic_expression3106);
                    wspace338=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace338.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_arithmetics_in_arithmetic_expression3109);
            arithmetics339=arithmetics();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arithmetics.add(arithmetics339.getTree());
            // java_libbash.g:529:32: ( wspace )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=EOL && LA129_0<=BLANK)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // java_libbash.g:529:32: wspace
                    {
                    pushFollow(FOLLOW_wspace_in_arithmetic_expression3111);
                    wspace340=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace340.getTree());

                    }
                    break;

            }

            RPAREN341=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arithmetic_expression3114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN341);

            RPAREN342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arithmetic_expression3116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN342);



            // AST REWRITE
            // elements: arithmetics
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 529:54: -> ^( ARITHMETIC_EXPRESSION arithmetics )
            {
                // java_libbash.g:529:57: ^( ARITHMETIC_EXPRESSION arithmetics )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARITHMETIC_EXPRESSION, "ARITHMETIC_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_arithmetics.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic_expression"

    public static class condition_comparison_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_comparison"
    // java_libbash.g:530:1: condition_comparison : condition_expr -> ^( COMPOUND_COND condition_expr ) ;
    public final java_libbashParser.condition_comparison_return condition_comparison() throws RecognitionException {
        java_libbashParser.condition_comparison_return retval = new java_libbashParser.condition_comparison_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.condition_expr_return condition_expr343 = null;


        RewriteRuleSubtreeStream stream_condition_expr=new RewriteRuleSubtreeStream(adaptor,"rule condition_expr");
        try {
            // java_libbash.g:531:2: ( condition_expr -> ^( COMPOUND_COND condition_expr ) )
            // java_libbash.g:531:4: condition_expr
            {
            pushFollow(FOLLOW_condition_expr_in_condition_comparison3132);
            condition_expr343=condition_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition_expr.add(condition_expr343.getTree());


            // AST REWRITE
            // elements: condition_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 531:19: -> ^( COMPOUND_COND condition_expr )
            {
                // java_libbash.g:531:22: ^( COMPOUND_COND condition_expr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPOUND_COND, "COMPOUND_COND"), root_1);

                adaptor.addChild(root_1, stream_condition_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition_comparison"

    public static class condition_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_expr"
    // java_libbash.g:533:1: condition_expr : ( LSQUARE LSQUARE wspace keyword_condition wspace RSQUARE RSQUARE -> ^( KEYWORD_TEST keyword_condition ) | LSQUARE wspace builtin_condition wspace RSQUARE -> ^( BUILTIN_TEST builtin_condition ) | {...}? => NAME ( wspace )? builtin_condition -> ^( BUILTIN_TEST builtin_condition ) );
    public final java_libbashParser.condition_expr_return condition_expr() throws RecognitionException {
        java_libbashParser.condition_expr_return retval = new java_libbashParser.condition_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE344=null;
        Token LSQUARE345=null;
        Token RSQUARE349=null;
        Token RSQUARE350=null;
        Token LSQUARE351=null;
        Token RSQUARE355=null;
        Token NAME356=null;
        java_libbashParser.wspace_return wspace346 = null;

        java_libbashParser.keyword_condition_return keyword_condition347 = null;

        java_libbashParser.wspace_return wspace348 = null;

        java_libbashParser.wspace_return wspace352 = null;

        java_libbashParser.builtin_condition_return builtin_condition353 = null;

        java_libbashParser.wspace_return wspace354 = null;

        java_libbashParser.wspace_return wspace357 = null;

        java_libbashParser.builtin_condition_return builtin_condition358 = null;


        CommonTree LSQUARE344_tree=null;
        CommonTree LSQUARE345_tree=null;
        CommonTree RSQUARE349_tree=null;
        CommonTree RSQUARE350_tree=null;
        CommonTree LSQUARE351_tree=null;
        CommonTree RSQUARE355_tree=null;
        CommonTree NAME356_tree=null;
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
        RewriteRuleSubtreeStream stream_builtin_condition=new RewriteRuleSubtreeStream(adaptor,"rule builtin_condition");
        RewriteRuleSubtreeStream stream_keyword_condition=new RewriteRuleSubtreeStream(adaptor,"rule keyword_condition");
        try {
            // java_libbash.g:534:2: ( LSQUARE LSQUARE wspace keyword_condition wspace RSQUARE RSQUARE -> ^( KEYWORD_TEST keyword_condition ) | LSQUARE wspace builtin_condition wspace RSQUARE -> ^( BUILTIN_TEST builtin_condition ) | {...}? => NAME ( wspace )? builtin_condition -> ^( BUILTIN_TEST builtin_condition ) )
            int alt131=3;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==LSQUARE) ) {
                int LA131_1 = input.LA(2);

                if ( (LA131_1==LSQUARE) ) {
                    alt131=1;
                }
                else if ( ((LA131_1>=EOL && LA131_1<=BLANK)) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA131_0==NAME) && ((LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) {
                alt131=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // java_libbash.g:534:4: LSQUARE LSQUARE wspace keyword_condition wspace RSQUARE RSQUARE
                    {
                    LSQUARE344=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_condition_expr3149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE344);

                    LSQUARE345=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_condition_expr3151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE345);

                    pushFollow(FOLLOW_wspace_in_condition_expr3153);
                    wspace346=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace346.getTree());
                    pushFollow(FOLLOW_keyword_condition_in_condition_expr3155);
                    keyword_condition347=keyword_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyword_condition.add(keyword_condition347.getTree());
                    pushFollow(FOLLOW_wspace_in_condition_expr3157);
                    wspace348=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace348.getTree());
                    RSQUARE349=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_condition_expr3159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE349);

                    RSQUARE350=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_condition_expr3161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE350);



                    // AST REWRITE
                    // elements: keyword_condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 534:68: -> ^( KEYWORD_TEST keyword_condition )
                    {
                        // java_libbash.g:534:71: ^( KEYWORD_TEST keyword_condition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD_TEST, "KEYWORD_TEST"), root_1);

                        adaptor.addChild(root_1, stream_keyword_condition.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:535:4: LSQUARE wspace builtin_condition wspace RSQUARE
                    {
                    LSQUARE351=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_condition_expr3174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE351);

                    pushFollow(FOLLOW_wspace_in_condition_expr3176);
                    wspace352=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace352.getTree());
                    pushFollow(FOLLOW_builtin_condition_in_condition_expr3178);
                    builtin_condition353=builtin_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtin_condition.add(builtin_condition353.getTree());
                    pushFollow(FOLLOW_wspace_in_condition_expr3180);
                    wspace354=wspace();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wspace.add(wspace354.getTree());
                    RSQUARE355=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_condition_expr3182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE355);



                    // AST REWRITE
                    // elements: builtin_condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 535:52: -> ^( BUILTIN_TEST builtin_condition )
                    {
                        // java_libbash.g:535:55: ^( BUILTIN_TEST builtin_condition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILTIN_TEST, "BUILTIN_TEST"), root_1);

                        adaptor.addChild(root_1, stream_builtin_condition.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:539:4: {...}? => NAME ( wspace )? builtin_condition
                    {
                    if ( !((LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "condition_expr", "LA(1) == NAME && LA(2) == BLANK && \"test\".equals(get_string(LT(1)))");
                    }
                    NAME356=(Token)match(input,NAME,FOLLOW_NAME_in_condition_expr3202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME356);

                    // java_libbash.g:539:83: ( wspace )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( ((LA130_0>=EOL && LA130_0<=BLANK)) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // java_libbash.g:539:83: wspace
                            {
                            pushFollow(FOLLOW_wspace_in_condition_expr3204);
                            wspace357=wspace();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_wspace.add(wspace357.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_builtin_condition_in_condition_expr3207);
                    builtin_condition358=builtin_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_builtin_condition.add(builtin_condition358.getTree());


                    // AST REWRITE
                    // elements: builtin_condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 539:108: -> ^( BUILTIN_TEST builtin_condition )
                    {
                        // java_libbash.g:539:111: ^( BUILTIN_TEST builtin_condition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILTIN_TEST, "BUILTIN_TEST"), root_1);

                        adaptor.addChild(root_1, stream_builtin_condition.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition_expr"

    public static class keyword_condition_and_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_condition_and"
    // java_libbash.g:542:1: keyword_condition_and : keyword_condition_primary ( ( wspace )? LOGICAND ( wspace )? keyword_condition_primary )* ;
    public final java_libbashParser.keyword_condition_and_return keyword_condition_and() throws RecognitionException {
        java_libbashParser.keyword_condition_and_return retval = new java_libbashParser.keyword_condition_and_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LOGICAND361=null;
        java_libbashParser.keyword_condition_primary_return keyword_condition_primary359 = null;

        java_libbashParser.wspace_return wspace360 = null;

        java_libbashParser.wspace_return wspace362 = null;

        java_libbashParser.keyword_condition_primary_return keyword_condition_primary363 = null;


        CommonTree LOGICAND361_tree=null;

        try {
            // java_libbash.g:543:2: ( keyword_condition_primary ( ( wspace )? LOGICAND ( wspace )? keyword_condition_primary )* )
            // java_libbash.g:543:4: keyword_condition_primary ( ( wspace )? LOGICAND ( wspace )? keyword_condition_primary )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_keyword_condition_primary_in_keyword_condition_and3224);
            keyword_condition_primary359=keyword_condition_primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_primary359.getTree());
            // java_libbash.g:543:30: ( ( wspace )? LOGICAND ( wspace )? keyword_condition_primary )*
            loop134:
            do {
                int alt134=2;
                alt134 = dfa134.predict(input);
                switch (alt134) {
            	case 1 :
            	    // java_libbash.g:543:32: ( wspace )? LOGICAND ( wspace )? keyword_condition_primary
            	    {
            	    // java_libbash.g:543:38: ( wspace )?
            	    int alt132=2;
            	    int LA132_0 = input.LA(1);

            	    if ( ((LA132_0>=EOL && LA132_0<=BLANK)) ) {
            	        alt132=1;
            	    }
            	    switch (alt132) {
            	        case 1 :
            	            // java_libbash.g:543:38: wspace
            	            {
            	            pushFollow(FOLLOW_wspace_in_keyword_condition_and3228);
            	            wspace360=wspace();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    LOGICAND361=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_keyword_condition_and3232); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAND361_tree = (CommonTree)adaptor.create(LOGICAND361);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND361_tree, root_0);
            	    }
            	    // java_libbash.g:543:57: ( wspace )?
            	    int alt133=2;
            	    int LA133_0 = input.LA(1);

            	    if ( ((LA133_0>=EOL && LA133_0<=BLANK)) ) {
            	        alt133=1;
            	    }
            	    switch (alt133) {
            	        case 1 :
            	            // java_libbash.g:543:57: wspace
            	            {
            	            pushFollow(FOLLOW_wspace_in_keyword_condition_and3235);
            	            wspace362=wspace();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_keyword_condition_primary_in_keyword_condition_and3239);
            	    keyword_condition_primary363=keyword_condition_primary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_primary363.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_condition_and"

    public static class keyword_condition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_condition"
    // java_libbash.g:544:1: keyword_condition : keyword_condition_and ( ( wspace )? LOGICOR ( wspace )? keyword_condition_and )* ;
    public final java_libbashParser.keyword_condition_return keyword_condition() throws RecognitionException {
        java_libbashParser.keyword_condition_return retval = new java_libbashParser.keyword_condition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LOGICOR366=null;
        java_libbashParser.keyword_condition_and_return keyword_condition_and364 = null;

        java_libbashParser.wspace_return wspace365 = null;

        java_libbashParser.wspace_return wspace367 = null;

        java_libbashParser.keyword_condition_and_return keyword_condition_and368 = null;


        CommonTree LOGICOR366_tree=null;

        try {
            // java_libbash.g:545:2: ( keyword_condition_and ( ( wspace )? LOGICOR ( wspace )? keyword_condition_and )* )
            // java_libbash.g:545:4: keyword_condition_and ( ( wspace )? LOGICOR ( wspace )? keyword_condition_and )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_keyword_condition_and_in_keyword_condition3249);
            keyword_condition_and364=keyword_condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_and364.getTree());
            // java_libbash.g:545:26: ( ( wspace )? LOGICOR ( wspace )? keyword_condition_and )*
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // java_libbash.g:545:28: ( wspace )? LOGICOR ( wspace )? keyword_condition_and
            	    {
            	    // java_libbash.g:545:34: ( wspace )?
            	    int alt135=2;
            	    int LA135_0 = input.LA(1);

            	    if ( ((LA135_0>=EOL && LA135_0<=BLANK)) ) {
            	        alt135=1;
            	    }
            	    switch (alt135) {
            	        case 1 :
            	            // java_libbash.g:545:34: wspace
            	            {
            	            pushFollow(FOLLOW_wspace_in_keyword_condition3253);
            	            wspace365=wspace();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    LOGICOR366=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_keyword_condition3257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICOR366_tree = (CommonTree)adaptor.create(LOGICOR366);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR366_tree, root_0);
            	    }
            	    // java_libbash.g:545:52: ( wspace )?
            	    int alt136=2;
            	    int LA136_0 = input.LA(1);

            	    if ( ((LA136_0>=EOL && LA136_0<=BLANK)) ) {
            	        alt136=1;
            	    }
            	    switch (alt136) {
            	        case 1 :
            	            // java_libbash.g:545:52: wspace
            	            {
            	            pushFollow(FOLLOW_wspace_in_keyword_condition3260);
            	            wspace367=wspace();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_keyword_condition_and_in_keyword_condition3264);
            	    keyword_condition_and368=keyword_condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_and368.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_condition"

    public static class keyword_negation_primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_negation_primary"
    // java_libbash.g:546:1: keyword_negation_primary : BANG BLANK keyword_condition_primary -> ^( NEGATION keyword_condition_primary ) ;
    public final java_libbashParser.keyword_negation_primary_return keyword_negation_primary() throws RecognitionException {
        java_libbashParser.keyword_negation_primary_return retval = new java_libbashParser.keyword_negation_primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BANG369=null;
        Token BLANK370=null;
        java_libbashParser.keyword_condition_primary_return keyword_condition_primary371 = null;


        CommonTree BANG369_tree=null;
        CommonTree BLANK370_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_keyword_condition_primary=new RewriteRuleSubtreeStream(adaptor,"rule keyword_condition_primary");
        try {
            // java_libbash.g:547:2: ( BANG BLANK keyword_condition_primary -> ^( NEGATION keyword_condition_primary ) )
            // java_libbash.g:547:4: BANG BLANK keyword_condition_primary
            {
            BANG369=(Token)match(input,BANG,FOLLOW_BANG_in_keyword_negation_primary3274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BANG.add(BANG369);

            BLANK370=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_negation_primary3276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK370);

            pushFollow(FOLLOW_keyword_condition_primary_in_keyword_negation_primary3278);
            keyword_condition_primary371=keyword_condition_primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keyword_condition_primary.add(keyword_condition_primary371.getTree());


            // AST REWRITE
            // elements: keyword_condition_primary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 547:41: -> ^( NEGATION keyword_condition_primary )
            {
                // java_libbash.g:547:44: ^( NEGATION keyword_condition_primary )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATION, "NEGATION"), root_1);

                adaptor.addChild(root_1, stream_keyword_condition_primary.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_negation_primary"

    public static class keyword_condition_primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_condition_primary"
    // java_libbash.g:548:1: keyword_condition_primary : ( LPAREN ( BLANK )? keyword_condition ( BLANK )? RPAREN | ( BANG )=> keyword_negation_primary | ( unary_operator )=> keyword_condition_unary | keyword_condition_binary );
    public final java_libbashParser.keyword_condition_primary_return keyword_condition_primary() throws RecognitionException {
        java_libbashParser.keyword_condition_primary_return retval = new java_libbashParser.keyword_condition_primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN372=null;
        Token BLANK373=null;
        Token BLANK375=null;
        Token RPAREN376=null;
        java_libbashParser.keyword_condition_return keyword_condition374 = null;

        java_libbashParser.keyword_negation_primary_return keyword_negation_primary377 = null;

        java_libbashParser.keyword_condition_unary_return keyword_condition_unary378 = null;

        java_libbashParser.keyword_condition_binary_return keyword_condition_binary379 = null;


        CommonTree LPAREN372_tree=null;
        CommonTree BLANK373_tree=null;
        CommonTree BLANK375_tree=null;
        CommonTree RPAREN376_tree=null;

        try {
            // java_libbash.g:549:2: ( LPAREN ( BLANK )? keyword_condition ( BLANK )? RPAREN | ( BANG )=> keyword_negation_primary | ( unary_operator )=> keyword_condition_unary | keyword_condition_binary )
            int alt140=4;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // java_libbash.g:549:4: LPAREN ( BLANK )? keyword_condition ( BLANK )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_keyword_condition_primary3294); if (state.failed) return retval;
                    // java_libbash.g:549:17: ( BLANK )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==BLANK) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // java_libbash.g:549:17: BLANK
                            {
                            BLANK373=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_primary3297); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyword_condition_in_keyword_condition_primary3301);
                    keyword_condition374=keyword_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition374.getTree());
                    // java_libbash.g:549:43: ( BLANK )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==BLANK) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // java_libbash.g:549:43: BLANK
                            {
                            BLANK375=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_primary3303); if (state.failed) return retval;

                            }
                            break;

                    }

                    RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_keyword_condition_primary3307); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // java_libbash.g:550:4: ( BANG )=> keyword_negation_primary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_keyword_negation_primary_in_keyword_condition_primary3319);
                    keyword_negation_primary377=keyword_negation_primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_negation_primary377.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:551:4: ( unary_operator )=> keyword_condition_unary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_keyword_condition_unary_in_keyword_condition_primary3330);
                    keyword_condition_unary378=keyword_condition_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_unary378.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:552:4: keyword_condition_binary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_keyword_condition_binary_in_keyword_condition_primary3335);
                    keyword_condition_binary379=keyword_condition_binary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_condition_binary379.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_condition_primary"

    public static class keyword_condition_unary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_condition_unary"
    // java_libbash.g:553:1: keyword_condition_unary : unary_operator BLANK condition_part ;
    public final java_libbashParser.keyword_condition_unary_return keyword_condition_unary() throws RecognitionException {
        java_libbashParser.keyword_condition_unary_return retval = new java_libbashParser.keyword_condition_unary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK381=null;
        java_libbashParser.unary_operator_return unary_operator380 = null;

        java_libbashParser.condition_part_return condition_part382 = null;


        CommonTree BLANK381_tree=null;

        try {
            // java_libbash.g:554:2: ( unary_operator BLANK condition_part )
            // java_libbash.g:554:4: unary_operator BLANK condition_part
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_operator_in_keyword_condition_unary3343);
            unary_operator380=unary_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(unary_operator380.getTree(), root_0);
            BLANK381=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_unary3346); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_part_in_keyword_condition_unary3349);
            condition_part382=condition_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_part382.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_condition_unary"

    public static class keyword_condition_binary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_condition_binary"
    // java_libbash.g:555:1: keyword_condition_binary : condition_part ( ( BLANK EQUALS TILDE )=> BLANK EQUALS TILDE BLANK bash_pattern_part -> ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) ) | keyword_binary_string_operator right= condition_part -> ^( keyword_binary_string_operator condition_part $right) | BLANK ( BANG EQUALS ) BLANK ( extended_pattern_match )+ -> ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | BLANK ( EQUALS EQUALS ) BLANK ( extended_pattern_match )+ -> ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | -> condition_part ) ;
    public final java_libbashParser.keyword_condition_binary_return keyword_condition_binary() throws RecognitionException {
        java_libbashParser.keyword_condition_binary_return retval = new java_libbashParser.keyword_condition_binary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK384=null;
        Token EQUALS385=null;
        Token TILDE386=null;
        Token BLANK387=null;
        Token BLANK390=null;
        Token BANG391=null;
        Token EQUALS392=null;
        Token BLANK393=null;
        Token BLANK395=null;
        Token EQUALS396=null;
        Token EQUALS397=null;
        Token BLANK398=null;
        java_libbashParser.condition_part_return right = null;

        java_libbashParser.condition_part_return condition_part383 = null;

        java_libbashParser.bash_pattern_part_return bash_pattern_part388 = null;

        java_libbashParser.keyword_binary_string_operator_return keyword_binary_string_operator389 = null;

        java_libbashParser.extended_pattern_match_return extended_pattern_match394 = null;

        java_libbashParser.extended_pattern_match_return extended_pattern_match399 = null;


        CommonTree BLANK384_tree=null;
        CommonTree EQUALS385_tree=null;
        CommonTree TILDE386_tree=null;
        CommonTree BLANK387_tree=null;
        CommonTree BLANK390_tree=null;
        CommonTree BANG391_tree=null;
        CommonTree EQUALS392_tree=null;
        CommonTree BLANK393_tree=null;
        CommonTree BLANK395_tree=null;
        CommonTree EQUALS396_tree=null;
        CommonTree EQUALS397_tree=null;
        CommonTree BLANK398_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_extended_pattern_match=new RewriteRuleSubtreeStream(adaptor,"rule extended_pattern_match");
        RewriteRuleSubtreeStream stream_keyword_binary_string_operator=new RewriteRuleSubtreeStream(adaptor,"rule keyword_binary_string_operator");
        RewriteRuleSubtreeStream stream_condition_part=new RewriteRuleSubtreeStream(adaptor,"rule condition_part");
        RewriteRuleSubtreeStream stream_bash_pattern_part=new RewriteRuleSubtreeStream(adaptor,"rule bash_pattern_part");
        try {
            // java_libbash.g:556:2: ( condition_part ( ( BLANK EQUALS TILDE )=> BLANK EQUALS TILDE BLANK bash_pattern_part -> ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) ) | keyword_binary_string_operator right= condition_part -> ^( keyword_binary_string_operator condition_part $right) | BLANK ( BANG EQUALS ) BLANK ( extended_pattern_match )+ -> ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | BLANK ( EQUALS EQUALS ) BLANK ( extended_pattern_match )+ -> ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | -> condition_part ) )
            // java_libbash.g:556:4: condition_part ( ( BLANK EQUALS TILDE )=> BLANK EQUALS TILDE BLANK bash_pattern_part -> ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) ) | keyword_binary_string_operator right= condition_part -> ^( keyword_binary_string_operator condition_part $right) | BLANK ( BANG EQUALS ) BLANK ( extended_pattern_match )+ -> ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | BLANK ( EQUALS EQUALS ) BLANK ( extended_pattern_match )+ -> ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | -> condition_part )
            {
            pushFollow(FOLLOW_condition_part_in_keyword_condition_binary3357);
            condition_part383=condition_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition_part.add(condition_part383.getTree());
            // java_libbash.g:557:3: ( ( BLANK EQUALS TILDE )=> BLANK EQUALS TILDE BLANK bash_pattern_part -> ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) ) | keyword_binary_string_operator right= condition_part -> ^( keyword_binary_string_operator condition_part $right) | BLANK ( BANG EQUALS ) BLANK ( extended_pattern_match )+ -> ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | BLANK ( EQUALS EQUALS ) BLANK ( extended_pattern_match )+ -> ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) ) | -> condition_part )
            int alt143=5;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                switch ( input.LA(2) ) {
                case EQUALS:
                    {
                    int LA143_4 = input.LA(3);

                    if ( (LA143_4==TILDE) && (synpred30_java_libbash())) {
                        alt143=1;
                    }
                    else if ( (LA143_4==BLANK) ) {
                        alt143=2;
                    }
                    else if ( (LA143_4==EQUALS) ) {
                        alt143=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case EOL:
                case BLANK:
                case LOGICAND:
                case LOGICOR:
                case RPAREN:
                case RSQUARE:
                    {
                    alt143=5;
                    }
                    break;
                case MINUS:
                case LESS_THAN:
                case GREATER_THAN:
                    {
                    alt143=2;
                    }
                    break;
                case BANG:
                    {
                    alt143=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 1, input);

                    throw nvae;
                }

                }
                break;
            case LESS_THAN:
            case GREATER_THAN:
                {
                alt143=2;
                }
                break;
            case EOL:
            case LOGICAND:
            case LOGICOR:
            case RPAREN:
                {
                alt143=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // java_libbash.g:558:4: ( BLANK EQUALS TILDE )=> BLANK EQUALS TILDE BLANK bash_pattern_part
                    {
                    BLANK384=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK384);

                    EQUALS385=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_keyword_condition_binary3378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS385);

                    TILDE386=(Token)match(input,TILDE,FOLLOW_TILDE_in_keyword_condition_binary3380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TILDE.add(TILDE386);

                    BLANK387=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK387);

                    pushFollow(FOLLOW_bash_pattern_part_in_keyword_condition_binary3384);
                    bash_pattern_part388=bash_pattern_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bash_pattern_part.add(bash_pattern_part388.getTree());


                    // AST REWRITE
                    // elements: bash_pattern_part, condition_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 559:5: -> ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) )
                    {
                        // java_libbash.g:559:8: ^( MATCH_REGULAR_EXPRESSION condition_part ^( STRING bash_pattern_part ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_REGULAR_EXPRESSION, "MATCH_REGULAR_EXPRESSION"), root_1);

                        adaptor.addChild(root_1, stream_condition_part.nextTree());
                        // java_libbash.g:559:50: ^( STRING bash_pattern_part )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                        adaptor.addChild(root_2, stream_bash_pattern_part.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:560:6: keyword_binary_string_operator right= condition_part
                    {
                    pushFollow(FOLLOW_keyword_binary_string_operator_in_keyword_condition_binary3409);
                    keyword_binary_string_operator389=keyword_binary_string_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyword_binary_string_operator.add(keyword_binary_string_operator389.getTree());
                    pushFollow(FOLLOW_condition_part_in_keyword_condition_binary3413);
                    right=condition_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition_part.add(right.getTree());


                    // AST REWRITE
                    // elements: keyword_binary_string_operator, condition_part, right
                    // token labels: 
                    // rule labels: retval, right
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 561:6: -> ^( keyword_binary_string_operator condition_part $right)
                    {
                        // java_libbash.g:561:9: ^( keyword_binary_string_operator condition_part $right)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_keyword_binary_string_operator.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_condition_part.nextTree());
                        adaptor.addChild(root_1, stream_right.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:562:6: BLANK ( BANG EQUALS ) BLANK ( extended_pattern_match )+
                    {
                    BLANK390=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK390);

                    // java_libbash.g:562:12: ( BANG EQUALS )
                    // java_libbash.g:562:13: BANG EQUALS
                    {
                    BANG391=(Token)match(input,BANG,FOLLOW_BANG_in_keyword_condition_binary3439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG391);

                    EQUALS392=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_keyword_condition_binary3441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS392);


                    }

                    BLANK393=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK393);

                    // java_libbash.g:562:32: ( extended_pattern_match )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==POUND||LA141_0==BANG||(LA141_0>=TIME && LA141_0<=LETTER)||LA141_0==DIGIT||(LA141_0>=NAME && LA141_0<=LBRACE)||(LA141_0>=FOR && LA141_0<=DONE)||(LA141_0>=SELECT && LA141_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA141_0>=SLASH && LA141_0<=QMARK)||(LA141_0>=COMMAND_SUBSTITUTION_PAREN && LA141_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // java_libbash.g:562:32: extended_pattern_match
                    	    {
                    	    pushFollow(FOLLOW_extended_pattern_match_in_keyword_condition_binary3446);
                    	    extended_pattern_match394=extended_pattern_match();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern_match.add(extended_pattern_match394.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);



                    // AST REWRITE
                    // elements: condition_part, extended_pattern_match
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 563:6: -> ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) )
                    {
                        // java_libbash.g:563:9: ^( NOT_MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_MATCH_PATTERN, "NOT_MATCH_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_condition_part.nextTree());
                        // java_libbash.g:563:44: ^( STRING ( extended_pattern_match )+ )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                        if ( !(stream_extended_pattern_match.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern_match.hasNext() ) {
                            adaptor.addChild(root_2, stream_extended_pattern_match.nextTree());

                        }
                        stream_extended_pattern_match.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:564:6: BLANK ( EQUALS EQUALS ) BLANK ( extended_pattern_match )+
                    {
                    BLANK395=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3474); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK395);

                    // java_libbash.g:564:12: ( EQUALS EQUALS )
                    // java_libbash.g:564:13: EQUALS EQUALS
                    {
                    EQUALS396=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_keyword_condition_binary3477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS396);

                    EQUALS397=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_keyword_condition_binary3479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS397);


                    }

                    BLANK398=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_condition_binary3482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK398);

                    // java_libbash.g:564:34: ( extended_pattern_match )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==POUND||LA142_0==BANG||(LA142_0>=TIME && LA142_0<=LETTER)||LA142_0==DIGIT||(LA142_0>=NAME && LA142_0<=LBRACE)||(LA142_0>=FOR && LA142_0<=DONE)||(LA142_0>=SELECT && LA142_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA142_0>=SLASH && LA142_0<=QMARK)||(LA142_0>=COMMAND_SUBSTITUTION_PAREN && LA142_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // java_libbash.g:564:34: extended_pattern_match
                    	    {
                    	    pushFollow(FOLLOW_extended_pattern_match_in_keyword_condition_binary3484);
                    	    extended_pattern_match399=extended_pattern_match();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern_match.add(extended_pattern_match399.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);



                    // AST REWRITE
                    // elements: extended_pattern_match, condition_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 565:6: -> ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) )
                    {
                        // java_libbash.g:565:9: ^( MATCH_PATTERN condition_part ^( STRING ( extended_pattern_match )+ ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PATTERN, "MATCH_PATTERN"), root_1);

                        adaptor.addChild(root_1, stream_condition_part.nextTree());
                        // java_libbash.g:565:40: ^( STRING ( extended_pattern_match )+ )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_2);

                        if ( !(stream_extended_pattern_match.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern_match.hasNext() ) {
                            adaptor.addChild(root_2, stream_extended_pattern_match.nextTree());

                        }
                        stream_extended_pattern_match.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:566:6: 
                    {

                    // AST REWRITE
                    // elements: condition_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:6: -> condition_part
                    {
                        adaptor.addChild(root_0, stream_condition_part.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_condition_binary"

    protected static class bash_pattern_part_scope {
        int parens;
        boolean quoted;
    }
    protected Stack bash_pattern_part_stack = new Stack();

    public static class bash_pattern_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bash_pattern_part"
    // java_libbash.g:568:1: bash_pattern_part : ( DQUOTE | {...}? => preserved_tokens | ( ESC BLANK )=> ESC BLANK | LPAREN | LLPAREN | {...}? => RPAREN | ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN ) )+ ;
    public final java_libbashParser.bash_pattern_part_return bash_pattern_part() throws RecognitionException {
        bash_pattern_part_stack.push(new bash_pattern_part_scope());
        java_libbashParser.bash_pattern_part_return retval = new java_libbashParser.bash_pattern_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DQUOTE400=null;
        Token ESC402=null;
        Token BLANK403=null;
        Token LPAREN404=null;
        Token LLPAREN405=null;
        Token RPAREN406=null;
        Token set407=null;
        java_libbashParser.preserved_tokens_return preserved_tokens401 = null;


        CommonTree DQUOTE400_tree=null;
        CommonTree ESC402_tree=null;
        CommonTree BLANK403_tree=null;
        CommonTree LPAREN404_tree=null;
        CommonTree LLPAREN405_tree=null;
        CommonTree RPAREN406_tree=null;
        CommonTree set407_tree=null;


         ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens = 0;
         ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted = false;

        try {
            // java_libbash.g:581:2: ( ( DQUOTE | {...}? => preserved_tokens | ( ESC BLANK )=> ESC BLANK | LPAREN | LLPAREN | {...}? => RPAREN | ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN ) )+ )
            // java_libbash.g:581:3: ( DQUOTE | {...}? => preserved_tokens | ( ESC BLANK )=> ESC BLANK | LPAREN | LLPAREN | {...}? => RPAREN | ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:581:3: ( DQUOTE | {...}? => preserved_tokens | ( ESC BLANK )=> ESC BLANK | LPAREN | LLPAREN | {...}? => RPAREN | ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN ) )+
            int cnt144=0;
            loop144:
            do {
                int alt144=8;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // java_libbash.g:582:3: DQUOTE
            	    {
            	    DQUOTE400=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_bash_pattern_part3538); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted = !((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted; 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // java_libbash.g:583:5: {...}? => preserved_tokens
            	    {
            	    if ( !((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "bash_pattern_part", "$bash_pattern_part::quoted");
            	    }
            	    pushFollow(FOLLOW_preserved_tokens_in_bash_pattern_part3551);
            	    preserved_tokens401=preserved_tokens();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preserved_tokens401.getTree());

            	    }
            	    break;
            	case 3 :
            	    // java_libbash.g:584:5: ( ESC BLANK )=> ESC BLANK
            	    {
            	    ESC402=(Token)match(input,ESC,FOLLOW_ESC_in_bash_pattern_part3565); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ESC402_tree = (CommonTree)adaptor.create(ESC402);
            	    adaptor.addChild(root_0, ESC402_tree);
            	    }
            	    BLANK403=(Token)match(input,BLANK,FOLLOW_BLANK_in_bash_pattern_part3567); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BLANK403_tree = (CommonTree)adaptor.create(BLANK403);
            	    adaptor.addChild(root_0, BLANK403_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // java_libbash.g:585:5: LPAREN
            	    {
            	    LPAREN404=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_bash_pattern_part3573); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN404_tree = (CommonTree)adaptor.create(LPAREN404);
            	    adaptor.addChild(root_0, LPAREN404_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       if(LA(-2) != ESC) ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens++; 
            	    }

            	    }
            	    break;
            	case 5 :
            	    // java_libbash.g:586:5: LLPAREN
            	    {
            	    LLPAREN405=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_bash_pattern_part3581); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LLPAREN405_tree = (CommonTree)adaptor.create(LLPAREN405);
            	    adaptor.addChild(root_0, LLPAREN405_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       if(LA(-2) != ESC) ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens += 2; 
            	    }

            	    }
            	    break;
            	case 6 :
            	    // java_libbash.g:587:5: {...}? => RPAREN
            	    {
            	    if ( !((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens != 0)) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "bash_pattern_part", "$bash_pattern_part::parens != 0");
            	    }
            	    RPAREN406=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_bash_pattern_part3593); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN406_tree = (CommonTree)adaptor.create(RPAREN406);
            	    adaptor.addChild(root_0, RPAREN406_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       if(LA(-2) != ESC) ((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens--; 
            	    }

            	    }
            	    break;
            	case 7 :
            	    // java_libbash.g:588:5: ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN )
            	    {
            	    set407=(Token)input.LT(1);
            	    if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=FUNCTION)||(input.LA(1)>=SEMIC && input.LA(1)<=POUND)||(input.LA(1)>=BANG && input.LA(1)<=GREATER_THAN)||(input.LA(1)>=DIGIT && input.LA(1)<=PLUS)||(input.LA(1)>=LBRACE && input.LA(1)<=DONE)||(input.LA(1)>=DOUBLE_SEMIC && input.LA(1)<=CONTINUE_LINE) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set407));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            bash_pattern_part_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "bash_pattern_part"

    public static class preserved_tokens_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preserved_tokens"
    // java_libbash.g:591:1: preserved_tokens : non_dquote -> ESCAPED_CHAR non_dquote ;
    public final java_libbashParser.preserved_tokens_return preserved_tokens() throws RecognitionException {
        java_libbashParser.preserved_tokens_return retval = new java_libbashParser.preserved_tokens_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.non_dquote_return non_dquote408 = null;


        RewriteRuleSubtreeStream stream_non_dquote=new RewriteRuleSubtreeStream(adaptor,"rule non_dquote");
        try {
            // java_libbash.g:592:2: ( non_dquote -> ESCAPED_CHAR non_dquote )
            // java_libbash.g:592:4: non_dquote
            {
            pushFollow(FOLLOW_non_dquote_in_preserved_tokens3632);
            non_dquote408=non_dquote();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_non_dquote.add(non_dquote408.getTree());


            // AST REWRITE
            // elements: non_dquote
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 592:15: -> ESCAPED_CHAR non_dquote
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(ESCAPED_CHAR, "ESCAPED_CHAR"));
                adaptor.addChild(root_0, stream_non_dquote.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preserved_tokens"

    public static class non_dquote_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_dquote"
    // java_libbash.g:594:1: non_dquote : ~ DQUOTE ;
    public final java_libbashParser.non_dquote_return non_dquote() throws RecognitionException {
        java_libbashParser.non_dquote_return retval = new java_libbashParser.non_dquote_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set409=null;

        CommonTree set409_tree=null;

        try {
            // java_libbash.g:595:2: (~ DQUOTE )
            // java_libbash.g:595:4: ~ DQUOTE
            {
            root_0 = (CommonTree)adaptor.nil();

            set409=(Token)input.LT(1);
            if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=PLUS)||(input.LA(1)>=LBRACE && input.LA(1)<=CONTINUE_LINE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set409));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "non_dquote"

    public static class keyword_binary_string_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyword_binary_string_operator"
    // java_libbash.g:597:1: keyword_binary_string_operator : ( BLANK binary_operator BLANK | BLANK EQUALS BLANK | ( BLANK )? LESS_THAN ( BLANK )? | ( BLANK )? GREATER_THAN ( BLANK )? );
    public final java_libbashParser.keyword_binary_string_operator_return keyword_binary_string_operator() throws RecognitionException {
        java_libbashParser.keyword_binary_string_operator_return retval = new java_libbashParser.keyword_binary_string_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK410=null;
        Token BLANK412=null;
        Token BLANK413=null;
        Token EQUALS414=null;
        Token BLANK415=null;
        Token BLANK416=null;
        Token LESS_THAN417=null;
        Token BLANK418=null;
        Token BLANK419=null;
        Token GREATER_THAN420=null;
        Token BLANK421=null;
        java_libbashParser.binary_operator_return binary_operator411 = null;


        CommonTree BLANK410_tree=null;
        CommonTree BLANK412_tree=null;
        CommonTree BLANK413_tree=null;
        CommonTree EQUALS414_tree=null;
        CommonTree BLANK415_tree=null;
        CommonTree BLANK416_tree=null;
        CommonTree LESS_THAN417_tree=null;
        CommonTree BLANK418_tree=null;
        CommonTree BLANK419_tree=null;
        CommonTree GREATER_THAN420_tree=null;
        CommonTree BLANK421_tree=null;

        try {
            // java_libbash.g:598:2: ( BLANK binary_operator BLANK | BLANK EQUALS BLANK | ( BLANK )? LESS_THAN ( BLANK )? | ( BLANK )? GREATER_THAN ( BLANK )? )
            int alt149=4;
            switch ( input.LA(1) ) {
            case BLANK:
                {
                switch ( input.LA(2) ) {
                case EQUALS:
                    {
                    alt149=2;
                    }
                    break;
                case GREATER_THAN:
                    {
                    alt149=4;
                    }
                    break;
                case LESS_THAN:
                    {
                    alt149=3;
                    }
                    break;
                case MINUS:
                    {
                    alt149=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 149, 1, input);

                    throw nvae;
                }

                }
                break;
            case LESS_THAN:
                {
                alt149=3;
                }
                break;
            case GREATER_THAN:
                {
                alt149=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // java_libbash.g:598:4: BLANK binary_operator BLANK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BLANK410=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3657); if (state.failed) return retval;
                    pushFollow(FOLLOW_binary_operator_in_keyword_binary_string_operator3660);
                    binary_operator411=binary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator411.getTree());
                    BLANK412=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3662); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // java_libbash.g:599:4: BLANK EQUALS BLANK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BLANK413=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3668); if (state.failed) return retval;
                    EQUALS414=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_keyword_binary_string_operator3671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS414_tree = (CommonTree)adaptor.create(EQUALS414);
                    adaptor.addChild(root_0, EQUALS414_tree);
                    }
                    BLANK415=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3673); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // java_libbash.g:600:4: ( BLANK )? LESS_THAN ( BLANK )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:600:9: ( BLANK )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==BLANK) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // java_libbash.g:600:9: BLANK
                            {
                            BLANK416=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3679); if (state.failed) return retval;

                            }
                            break;

                    }

                    LESS_THAN417=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_keyword_binary_string_operator3683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_THAN417_tree = (CommonTree)adaptor.create(LESS_THAN417);
                    adaptor.addChild(root_0, LESS_THAN417_tree);
                    }
                    // java_libbash.g:600:27: ( BLANK )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==BLANK) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // java_libbash.g:600:27: BLANK
                            {
                            BLANK418=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3685); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // java_libbash.g:601:4: ( BLANK )? GREATER_THAN ( BLANK )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:601:9: ( BLANK )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==BLANK) ) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // java_libbash.g:601:9: BLANK
                            {
                            BLANK419=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3692); if (state.failed) return retval;

                            }
                            break;

                    }

                    GREATER_THAN420=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_keyword_binary_string_operator3696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN420_tree = (CommonTree)adaptor.create(GREATER_THAN420);
                    adaptor.addChild(root_0, GREATER_THAN420_tree);
                    }
                    // java_libbash.g:601:30: ( BLANK )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==BLANK) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // java_libbash.g:601:30: BLANK
                            {
                            BLANK421=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_binary_string_operator3698); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keyword_binary_string_operator"

    public static class builtin_condition_and_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_condition_and"
    // java_libbash.g:604:1: builtin_condition_and : builtin_condition_primary ( builtin_logic_and BLANK builtin_condition_primary )* ;
    public final java_libbashParser.builtin_condition_and_return builtin_condition_and() throws RecognitionException {
        java_libbashParser.builtin_condition_and_return retval = new java_libbashParser.builtin_condition_and_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK424=null;
        java_libbashParser.builtin_condition_primary_return builtin_condition_primary422 = null;

        java_libbashParser.builtin_logic_and_return builtin_logic_and423 = null;

        java_libbashParser.builtin_condition_primary_return builtin_condition_primary425 = null;


        CommonTree BLANK424_tree=null;

        try {
            // java_libbash.g:605:2: ( builtin_condition_primary ( builtin_logic_and BLANK builtin_condition_primary )* )
            // java_libbash.g:605:4: builtin_condition_primary ( builtin_logic_and BLANK builtin_condition_primary )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_builtin_condition_primary_in_builtin_condition_and3710);
            builtin_condition_primary422=builtin_condition_primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_primary422.getTree());
            // java_libbash.g:605:30: ( builtin_logic_and BLANK builtin_condition_primary )*
            loop150:
            do {
                int alt150=2;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // java_libbash.g:605:31: builtin_logic_and BLANK builtin_condition_primary
            	    {
            	    pushFollow(FOLLOW_builtin_logic_and_in_builtin_condition_and3713);
            	    builtin_logic_and423=builtin_logic_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_logic_and423.getTree(), root_0);
            	    BLANK424=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_and3716); if (state.failed) return retval;
            	    pushFollow(FOLLOW_builtin_condition_primary_in_builtin_condition_and3719);
            	    builtin_condition_primary425=builtin_condition_primary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_primary425.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_condition_and"

    public static class builtin_condition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_condition"
    // java_libbash.g:606:1: builtin_condition : builtin_condition_and ( builtin_logic_or BLANK builtin_condition_and )* ;
    public final java_libbashParser.builtin_condition_return builtin_condition() throws RecognitionException {
        java_libbashParser.builtin_condition_return retval = new java_libbashParser.builtin_condition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK428=null;
        java_libbashParser.builtin_condition_and_return builtin_condition_and426 = null;

        java_libbashParser.builtin_logic_or_return builtin_logic_or427 = null;

        java_libbashParser.builtin_condition_and_return builtin_condition_and429 = null;


        CommonTree BLANK428_tree=null;

        try {
            // java_libbash.g:607:2: ( builtin_condition_and ( builtin_logic_or BLANK builtin_condition_and )* )
            // java_libbash.g:607:4: builtin_condition_and ( builtin_logic_or BLANK builtin_condition_and )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_builtin_condition_and_in_builtin_condition3729);
            builtin_condition_and426=builtin_condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_and426.getTree());
            // java_libbash.g:607:26: ( builtin_logic_or BLANK builtin_condition_and )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==BLANK) ) {
                    int LA151_1 = input.LA(2);

                    if ( (LA151_1==MINUS) && ((LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && "o".equals(get_string(LT(3)))))) {
                        alt151=1;
                    }


                }


                switch (alt151) {
            	case 1 :
            	    // java_libbash.g:607:27: builtin_logic_or BLANK builtin_condition_and
            	    {
            	    pushFollow(FOLLOW_builtin_logic_or_in_builtin_condition3732);
            	    builtin_logic_or427=builtin_logic_or();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_logic_or427.getTree(), root_0);
            	    BLANK428=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition3735); if (state.failed) return retval;
            	    pushFollow(FOLLOW_builtin_condition_and_in_builtin_condition3738);
            	    builtin_condition_and429=builtin_condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_and429.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_condition"

    public static class builtin_negation_primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_negation_primary"
    // java_libbash.g:608:1: builtin_negation_primary : BANG BLANK builtin_condition_primary -> ^( NEGATION builtin_condition_primary ) ;
    public final java_libbashParser.builtin_negation_primary_return builtin_negation_primary() throws RecognitionException {
        java_libbashParser.builtin_negation_primary_return retval = new java_libbashParser.builtin_negation_primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BANG430=null;
        Token BLANK431=null;
        java_libbashParser.builtin_condition_primary_return builtin_condition_primary432 = null;


        CommonTree BANG430_tree=null;
        CommonTree BLANK431_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_builtin_condition_primary=new RewriteRuleSubtreeStream(adaptor,"rule builtin_condition_primary");
        try {
            // java_libbash.g:609:2: ( BANG BLANK builtin_condition_primary -> ^( NEGATION builtin_condition_primary ) )
            // java_libbash.g:609:4: BANG BLANK builtin_condition_primary
            {
            BANG430=(Token)match(input,BANG,FOLLOW_BANG_in_builtin_negation_primary3748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BANG.add(BANG430);

            BLANK431=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_negation_primary3750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK431);

            pushFollow(FOLLOW_builtin_condition_primary_in_builtin_negation_primary3752);
            builtin_condition_primary432=builtin_condition_primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_builtin_condition_primary.add(builtin_condition_primary432.getTree());


            // AST REWRITE
            // elements: builtin_condition_primary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 609:41: -> ^( NEGATION builtin_condition_primary )
            {
                // java_libbash.g:609:44: ^( NEGATION builtin_condition_primary )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATION, "NEGATION"), root_1);

                adaptor.addChild(root_1, stream_builtin_condition_primary.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_negation_primary"

    public static class builtin_condition_primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_condition_primary"
    // java_libbash.g:610:1: builtin_condition_primary : ( LPAREN ( BLANK )? builtin_condition ( BLANK )? RPAREN | ( BANG )=> builtin_negation_primary | ( unary_operator )=> builtin_condition_unary | builtin_condition_binary );
    public final java_libbashParser.builtin_condition_primary_return builtin_condition_primary() throws RecognitionException {
        java_libbashParser.builtin_condition_primary_return retval = new java_libbashParser.builtin_condition_primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN433=null;
        Token BLANK434=null;
        Token BLANK436=null;
        Token RPAREN437=null;
        java_libbashParser.builtin_condition_return builtin_condition435 = null;

        java_libbashParser.builtin_negation_primary_return builtin_negation_primary438 = null;

        java_libbashParser.builtin_condition_unary_return builtin_condition_unary439 = null;

        java_libbashParser.builtin_condition_binary_return builtin_condition_binary440 = null;


        CommonTree LPAREN433_tree=null;
        CommonTree BLANK434_tree=null;
        CommonTree BLANK436_tree=null;
        CommonTree RPAREN437_tree=null;

        try {
            // java_libbash.g:611:2: ( LPAREN ( BLANK )? builtin_condition ( BLANK )? RPAREN | ( BANG )=> builtin_negation_primary | ( unary_operator )=> builtin_condition_unary | builtin_condition_binary )
            int alt154=4;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // java_libbash.g:611:4: LPAREN ( BLANK )? builtin_condition ( BLANK )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN433=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtin_condition_primary3768); if (state.failed) return retval;
                    // java_libbash.g:611:17: ( BLANK )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==BLANK) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // java_libbash.g:611:17: BLANK
                            {
                            BLANK434=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_primary3771); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_builtin_condition_in_builtin_condition_primary3775);
                    builtin_condition435=builtin_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition435.getTree());
                    // java_libbash.g:611:43: ( BLANK )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==BLANK) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // java_libbash.g:611:43: BLANK
                            {
                            BLANK436=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_primary3777); if (state.failed) return retval;

                            }
                            break;

                    }

                    RPAREN437=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtin_condition_primary3781); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // java_libbash.g:612:4: ( BANG )=> builtin_negation_primary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_negation_primary_in_builtin_condition_primary3793);
                    builtin_negation_primary438=builtin_negation_primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_negation_primary438.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:613:4: ( unary_operator )=> builtin_condition_unary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_condition_unary_in_builtin_condition_primary3804);
                    builtin_condition_unary439=builtin_condition_unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_unary439.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:614:4: builtin_condition_binary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_builtin_condition_binary_in_builtin_condition_primary3809);
                    builtin_condition_binary440=builtin_condition_binary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_condition_binary440.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_condition_primary"

    public static class builtin_condition_unary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_condition_unary"
    // java_libbash.g:615:1: builtin_condition_unary : unary_operator BLANK condition_part ;
    public final java_libbashParser.builtin_condition_unary_return builtin_condition_unary() throws RecognitionException {
        java_libbashParser.builtin_condition_unary_return retval = new java_libbashParser.builtin_condition_unary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK442=null;
        java_libbashParser.unary_operator_return unary_operator441 = null;

        java_libbashParser.condition_part_return condition_part443 = null;


        CommonTree BLANK442_tree=null;

        try {
            // java_libbash.g:616:2: ( unary_operator BLANK condition_part )
            // java_libbash.g:616:4: unary_operator BLANK condition_part
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_operator_in_builtin_condition_unary3817);
            unary_operator441=unary_operator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(unary_operator441.getTree(), root_0);
            BLANK442=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_unary3820); if (state.failed) return retval;
            pushFollow(FOLLOW_condition_part_in_builtin_condition_unary3823);
            condition_part443=condition_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_part443.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_condition_unary"

    public static class builtin_condition_binary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_condition_binary"
    // java_libbash.g:617:1: builtin_condition_binary : condition_part ( BLANK builtin_binary_string_operator BLANK condition_part )? ;
    public final java_libbashParser.builtin_condition_binary_return builtin_condition_binary() throws RecognitionException {
        java_libbashParser.builtin_condition_binary_return retval = new java_libbashParser.builtin_condition_binary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK445=null;
        Token BLANK447=null;
        java_libbashParser.condition_part_return condition_part444 = null;

        java_libbashParser.builtin_binary_string_operator_return builtin_binary_string_operator446 = null;

        java_libbashParser.condition_part_return condition_part448 = null;


        CommonTree BLANK445_tree=null;
        CommonTree BLANK447_tree=null;

        try {
            // java_libbash.g:618:2: ( condition_part ( BLANK builtin_binary_string_operator BLANK condition_part )? )
            // java_libbash.g:618:4: condition_part ( BLANK builtin_binary_string_operator BLANK condition_part )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_condition_part_in_builtin_condition_binary3831);
            condition_part444=condition_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_part444.getTree());
            // java_libbash.g:618:19: ( BLANK builtin_binary_string_operator BLANK condition_part )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==BLANK) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==MINUS) ) {
                    int LA155_3 = input.LA(3);

                    if ( (LA155_3==NAME) ) {
                        alt155=1;
                    }
                }
                else if ( (LA155_1==BANG||LA155_1==EQUALS||(LA155_1>=ESC_LT && LA155_1<=ESC_GT)) ) {
                    alt155=1;
                }
            }
            switch (alt155) {
                case 1 :
                    // java_libbash.g:618:20: BLANK builtin_binary_string_operator BLANK condition_part
                    {
                    BLANK445=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_binary3834); if (state.failed) return retval;
                    pushFollow(FOLLOW_builtin_binary_string_operator_in_builtin_condition_binary3837);
                    builtin_binary_string_operator446=builtin_binary_string_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(builtin_binary_string_operator446.getTree(), root_0);
                    BLANK447=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_condition_binary3840); if (state.failed) return retval;
                    pushFollow(FOLLOW_condition_part_in_builtin_condition_binary3843);
                    condition_part448=condition_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_part448.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_condition_binary"

    public static class builtin_binary_string_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_binary_string_operator"
    // java_libbash.g:619:1: builtin_binary_string_operator : ( binary_operator | ( EQUALS EQUALS )=> EQUALS EQUALS -> EQUALS | EQUALS | BANG EQUALS -> NOT_EQUALS | ESC_LT | ESC_GT );
    public final java_libbashParser.builtin_binary_string_operator_return builtin_binary_string_operator() throws RecognitionException {
        java_libbashParser.builtin_binary_string_operator_return retval = new java_libbashParser.builtin_binary_string_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS450=null;
        Token EQUALS451=null;
        Token EQUALS452=null;
        Token BANG453=null;
        Token EQUALS454=null;
        Token ESC_LT455=null;
        Token ESC_GT456=null;
        java_libbashParser.binary_operator_return binary_operator449 = null;


        CommonTree EQUALS450_tree=null;
        CommonTree EQUALS451_tree=null;
        CommonTree EQUALS452_tree=null;
        CommonTree BANG453_tree=null;
        CommonTree EQUALS454_tree=null;
        CommonTree ESC_LT455_tree=null;
        CommonTree ESC_GT456_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");

        try {
            // java_libbash.g:620:2: ( binary_operator | ( EQUALS EQUALS )=> EQUALS EQUALS -> EQUALS | EQUALS | BANG EQUALS -> NOT_EQUALS | ESC_LT | ESC_GT )
            int alt156=6;
            switch ( input.LA(1) ) {
            case MINUS:
                {
                alt156=1;
                }
                break;
            case EQUALS:
                {
                int LA156_2 = input.LA(2);

                if ( (LA156_2==EQUALS) && (synpred34_java_libbash())) {
                    alt156=2;
                }
                else if ( (LA156_2==BLANK) ) {
                    alt156=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 2, input);

                    throw nvae;
                }
                }
                break;
            case BANG:
                {
                alt156=4;
                }
                break;
            case ESC_LT:
                {
                alt156=5;
                }
                break;
            case ESC_GT:
                {
                alt156=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // java_libbash.g:620:4: binary_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_binary_operator_in_builtin_binary_string_operator3853);
                    binary_operator449=binary_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, binary_operator449.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:621:4: ( EQUALS EQUALS )=> EQUALS EQUALS
                    {
                    EQUALS450=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_builtin_binary_string_operator3866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS450);

                    EQUALS451=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_builtin_binary_string_operator3868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS451);



                    // AST REWRITE
                    // elements: EQUALS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 621:37: -> EQUALS
                    {
                        adaptor.addChild(root_0, stream_EQUALS.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:622:4: EQUALS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUALS452=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_builtin_binary_string_operator3877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS452_tree = (CommonTree)adaptor.create(EQUALS452);
                    adaptor.addChild(root_0, EQUALS452_tree);
                    }

                    }
                    break;
                case 4 :
                    // java_libbash.g:623:4: BANG EQUALS
                    {
                    BANG453=(Token)match(input,BANG,FOLLOW_BANG_in_builtin_binary_string_operator3882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG453);

                    EQUALS454=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_builtin_binary_string_operator3884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS454);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 623:16: -> NOT_EQUALS
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(NOT_EQUALS, "NOT_EQUALS"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:624:4: ESC_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_LT455=(Token)match(input,ESC_LT,FOLLOW_ESC_LT_in_builtin_binary_string_operator3893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_LT455_tree = (CommonTree)adaptor.create(ESC_LT455);
                    adaptor.addChild(root_0, ESC_LT455_tree);
                    }

                    }
                    break;
                case 6 :
                    // java_libbash.g:625:4: ESC_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_GT456=(Token)match(input,ESC_GT,FOLLOW_ESC_GT_in_builtin_binary_string_operator3898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_GT456_tree = (CommonTree)adaptor.create(ESC_GT456);
                    adaptor.addChild(root_0, ESC_GT456_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_binary_string_operator"

    public static class builtin_logic_and_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_logic_and"
    // java_libbash.g:626:1: builtin_logic_and : {...}? => BLANK MINUS LETTER -> BUILTIN_LOGIC_AND ;
    public final java_libbashParser.builtin_logic_and_return builtin_logic_and() throws RecognitionException {
        java_libbashParser.builtin_logic_and_return retval = new java_libbashParser.builtin_logic_and_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK457=null;
        Token MINUS458=null;
        Token LETTER459=null;

        CommonTree BLANK457_tree=null;
        CommonTree MINUS458_tree=null;
        CommonTree LETTER459_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_LETTER=new RewriteRuleTokenStream(adaptor,"token LETTER");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");

        try {
            // java_libbash.g:630:2: ({...}? => BLANK MINUS LETTER -> BUILTIN_LOGIC_AND )
            // java_libbash.g:630:4: {...}? => BLANK MINUS LETTER
            {
            if ( !((LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && "a".equals(get_string(LT(3))))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "builtin_logic_and", "LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && \"a\".equals(get_string(LT(3)))");
            }
            BLANK457=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_logic_and3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK457);

            MINUS458=(Token)match(input,MINUS,FOLLOW_MINUS_in_builtin_logic_and3914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS458);

            LETTER459=(Token)match(input,LETTER,FOLLOW_LETTER_in_builtin_logic_and3916); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LETTER.add(LETTER459);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 630:113: -> BUILTIN_LOGIC_AND
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(BUILTIN_LOGIC_AND, "BUILTIN_LOGIC_AND"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_logic_and"

    public static class builtin_logic_or_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtin_logic_or"
    // java_libbash.g:632:1: builtin_logic_or : {...}? => BLANK MINUS LETTER -> BUILTIN_LOGIC_OR ;
    public final java_libbashParser.builtin_logic_or_return builtin_logic_or() throws RecognitionException {
        java_libbashParser.builtin_logic_or_return retval = new java_libbashParser.builtin_logic_or_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK460=null;
        Token MINUS461=null;
        Token LETTER462=null;

        CommonTree BLANK460_tree=null;
        CommonTree MINUS461_tree=null;
        CommonTree LETTER462_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_LETTER=new RewriteRuleTokenStream(adaptor,"token LETTER");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");

        try {
            // java_libbash.g:636:2: ({...}? => BLANK MINUS LETTER -> BUILTIN_LOGIC_OR )
            // java_libbash.g:636:4: {...}? => BLANK MINUS LETTER
            {
            if ( !((LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && "o".equals(get_string(LT(3))))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "builtin_logic_or", "LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && \"o\".equals(get_string(LT(3)))");
            }
            BLANK460=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_logic_or3935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BLANK.add(BLANK460);

            MINUS461=(Token)match(input,MINUS,FOLLOW_MINUS_in_builtin_logic_or3937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MINUS.add(MINUS461);

            LETTER462=(Token)match(input,LETTER,FOLLOW_LETTER_in_builtin_logic_or3939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LETTER.add(LETTER462);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 636:113: -> BUILTIN_LOGIC_OR
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(BUILTIN_LOGIC_OR, "BUILTIN_LOGIC_OR"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtin_logic_or"

    public static class binary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "binary_operator"
    // java_libbash.g:639:1: binary_operator : MINUS NAME ;
    public final java_libbashParser.binary_operator_return binary_operator() throws RecognitionException {
        java_libbashParser.binary_operator_return retval = new java_libbashParser.binary_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS463=null;
        Token NAME464=null;

        CommonTree MINUS463_tree=null;
        CommonTree NAME464_tree=null;

        try {
            // java_libbash.g:640:2: ( MINUS NAME )
            // java_libbash.g:640:4: MINUS NAME
            {
            root_0 = (CommonTree)adaptor.nil();

            MINUS463=(Token)match(input,MINUS,FOLLOW_MINUS_in_binary_operator3953); if (state.failed) return retval;
            NAME464=(Token)match(input,NAME,FOLLOW_NAME_in_binary_operator3956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME464_tree = (CommonTree)adaptor.create(NAME464);
            root_0 = (CommonTree)adaptor.becomeRoot(NAME464_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "binary_operator"

    public static class unary_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_operator"
    // java_libbash.g:641:1: unary_operator : MINUS LETTER ;
    public final java_libbashParser.unary_operator_return unary_operator() throws RecognitionException {
        java_libbashParser.unary_operator_return retval = new java_libbashParser.unary_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS465=null;
        Token LETTER466=null;

        CommonTree MINUS465_tree=null;
        CommonTree LETTER466_tree=null;

        try {
            // java_libbash.g:642:2: ( MINUS LETTER )
            // java_libbash.g:642:4: MINUS LETTER
            {
            root_0 = (CommonTree)adaptor.nil();

            MINUS465=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_operator3965); if (state.failed) return retval;
            LETTER466=(Token)match(input,LETTER,FOLLOW_LETTER_in_unary_operator3968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LETTER466_tree = (CommonTree)adaptor.create(LETTER466);
            adaptor.addChild(root_0, LETTER466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_operator"

    public static class condition_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_part"
    // java_libbash.g:645:1: condition_part : string_expr ;
    public final java_libbashParser.condition_part_return condition_part() throws RecognitionException {
        java_libbashParser.condition_part_return retval = new java_libbashParser.condition_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.string_expr_return string_expr467 = null;



        try {
            // java_libbash.g:646:2: ( string_expr )
            // java_libbash.g:646:4: string_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_string_expr_in_condition_part3978);
            string_expr467=string_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr467.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "condition_part"

    public static class name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "name"
    // java_libbash.g:648:1: name : ( NAME | LETTER | UNDERSCORE );
    public final java_libbashParser.name_return name() throws RecognitionException {
        java_libbashParser.name_return retval = new java_libbashParser.name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set468=null;

        CommonTree set468_tree=null;

        try {
            // java_libbash.g:649:2: ( NAME | LETTER | UNDERSCORE )
            // java_libbash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set468=(Token)input.LT(1);
            if ( input.LA(1)==LETTER||input.LA(1)==NAME||input.LA(1)==UNDERSCORE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set468));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "name"

    public static class num_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "num"
    // java_libbash.g:651:1: num options {k=1; } : ( DIGIT | NUMBER );
    public final java_libbashParser.num_return num() throws RecognitionException {
        java_libbashParser.num_return retval = new java_libbashParser.num_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set469=null;

        CommonTree set469_tree=null;

        try {
            // java_libbash.g:653:2: ( DIGIT | NUMBER )
            // java_libbash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set469=(Token)input.LT(1);
            if ( input.LA(1)==DIGIT||input.LA(1)==NUMBER ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set469));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "num"

    public static class string_expr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_expr"
    // java_libbash.g:655:1: string_expr : (~ POUND )=> string_expr_part ( string_expr_part )* -> ^( STRING ( string_expr_part )+ ) ;
    public final java_libbashParser.string_expr_return string_expr() throws RecognitionException {
        java_libbashParser.string_expr_return retval = new java_libbashParser.string_expr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.string_expr_part_return string_expr_part470 = null;

        java_libbashParser.string_expr_part_return string_expr_part471 = null;


        RewriteRuleSubtreeStream stream_string_expr_part=new RewriteRuleSubtreeStream(adaptor,"rule string_expr_part");
        try {
            // java_libbash.g:656:2: ( (~ POUND )=> string_expr_part ( string_expr_part )* -> ^( STRING ( string_expr_part )+ ) )
            // java_libbash.g:656:4: (~ POUND )=> string_expr_part ( string_expr_part )*
            {
            pushFollow(FOLLOW_string_expr_part_in_string_expr4029);
            string_expr_part470=string_expr_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part470.getTree());
            // java_libbash.g:656:33: ( string_expr_part )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==POUND||LA157_0==BANG||(LA157_0>=TIME && LA157_0<=LETTER)||LA157_0==DIGIT||(LA157_0>=NAME && LA157_0<=LBRACE)||(LA157_0>=FOR && LA157_0<=DONE)||(LA157_0>=SELECT && LA157_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA157_0>=SLASH && LA157_0<=QMARK)||(LA157_0>=COMMAND_SUBSTITUTION_PAREN && LA157_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt157=1;
                }


                switch (alt157) {
            	case 1 :
            	    // java_libbash.g:656:33: string_expr_part
            	    {
            	    pushFollow(FOLLOW_string_expr_part_in_string_expr4031);
            	    string_expr_part471=string_expr_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part471.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);



            // AST REWRITE
            // elements: string_expr_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 656:51: -> ^( STRING ( string_expr_part )+ )
            {
                // java_libbash.g:656:54: ^( STRING ( string_expr_part )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                if ( !(stream_string_expr_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_string_expr_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_string_expr_part.nextTree());

                }
                stream_string_expr_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_expr"

    public static class string_expr_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_expr_part"
    // java_libbash.g:658:1: string_expr_part : ( quoted_string | non_quoted_string | reserved_word );
    public final java_libbashParser.string_expr_part_return string_expr_part() throws RecognitionException {
        java_libbashParser.string_expr_part_return retval = new java_libbashParser.string_expr_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.quoted_string_return quoted_string472 = null;

        java_libbashParser.non_quoted_string_return non_quoted_string473 = null;

        java_libbashParser.reserved_word_return reserved_word474 = null;



        try {
            // java_libbash.g:659:2: ( quoted_string | non_quoted_string | reserved_word )
            int alt158=3;
            switch ( input.LA(1) ) {
            case DQUOTE:
            case SINGLE_QUOTED_STRING_TOKEN:
                {
                alt158=1;
                }
                break;
            case POUND:
            case BANG:
            case MINUS:
            case LETTER:
            case DIGIT:
            case NAME:
            case EXPORT:
            case LOCAL:
            case DECLARE:
            case LSQUARE:
            case RSQUARE:
            case EQUALS:
            case PLUS:
            case LBRACE:
            case TILDE:
            case ESC:
            case ESC_LT:
            case ESC_GT:
            case UNDERSCORE:
            case NUMBER:
            case DOLLAR:
            case SLASH:
            case OTHER:
            case PCT:
            case PCTPCT:
            case DOT:
            case DOTDOT:
            case COLON:
            case CARET:
            case COMMA:
            case AT:
            case ESC_RPAREN:
            case ESC_LPAREN:
            case ESC_RSQUARE:
            case ESC_LSQUARE:
            case ESC_DOLLAR:
            case ESC_TICK:
            case ESC_DQUOTE:
            case ESC_SQUOTE:
            case TIMES:
            case QMARK:
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt158=2;
                }
                break;
            case TIME:
            case FOR:
            case IN:
            case DO:
            case DONE:
            case SELECT:
            case IF:
            case THEN:
            case ELSE:
            case FI:
            case ELIF:
            case WHILE:
            case UNTIL:
            case CASE:
            case ESAC:
                {
                alt158=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // java_libbash.g:659:4: quoted_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_quoted_string_in_string_expr_part4050);
                    quoted_string472=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string472.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:659:20: non_quoted_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_non_quoted_string_in_string_expr_part4054);
                    non_quoted_string473=non_quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, non_quoted_string473.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:659:40: reserved_word
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_reserved_word_in_string_expr_part4058);
                    reserved_word474=reserved_word();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reserved_word474.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_expr_part"

    public static class string_expr_no_reserved_word_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_expr_no_reserved_word"
    // java_libbash.g:661:1: string_expr_no_reserved_word : (~ POUND )=> ( non_quoted_string ( string_expr_part )* -> ^( STRING non_quoted_string ( string_expr_part )* ) | quoted_string ( string_expr_part )* -> ^( STRING quoted_string ( string_expr_part )* ) ) ;
    public final java_libbashParser.string_expr_no_reserved_word_return string_expr_no_reserved_word() throws RecognitionException {
        java_libbashParser.string_expr_no_reserved_word_return retval = new java_libbashParser.string_expr_no_reserved_word_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.non_quoted_string_return non_quoted_string475 = null;

        java_libbashParser.string_expr_part_return string_expr_part476 = null;

        java_libbashParser.quoted_string_return quoted_string477 = null;

        java_libbashParser.string_expr_part_return string_expr_part478 = null;


        RewriteRuleSubtreeStream stream_non_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule non_quoted_string");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_string_expr_part=new RewriteRuleSubtreeStream(adaptor,"rule string_expr_part");
        try {
            // java_libbash.g:662:2: ( (~ POUND )=> ( non_quoted_string ( string_expr_part )* -> ^( STRING non_quoted_string ( string_expr_part )* ) | quoted_string ( string_expr_part )* -> ^( STRING quoted_string ( string_expr_part )* ) ) )
            // java_libbash.g:662:4: (~ POUND )=> ( non_quoted_string ( string_expr_part )* -> ^( STRING non_quoted_string ( string_expr_part )* ) | quoted_string ( string_expr_part )* -> ^( STRING quoted_string ( string_expr_part )* ) )
            {
            // java_libbash.g:663:4: ( non_quoted_string ( string_expr_part )* -> ^( STRING non_quoted_string ( string_expr_part )* ) | quoted_string ( string_expr_part )* -> ^( STRING quoted_string ( string_expr_part )* ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==POUND||LA161_0==BANG||(LA161_0>=MINUS && LA161_0<=LETTER)||LA161_0==DIGIT||(LA161_0>=NAME && LA161_0<=PLUS)||LA161_0==LBRACE||(LA161_0>=TILDE && LA161_0<=DOLLAR)||(LA161_0>=SLASH && LA161_0<=QMARK)||(LA161_0>=COMMAND_SUBSTITUTION_PAREN && LA161_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                alt161=1;
            }
            else if ( (LA161_0==DQUOTE||LA161_0==SINGLE_QUOTED_STRING_TOKEN) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // java_libbash.g:664:5: non_quoted_string ( string_expr_part )*
                    {
                    pushFollow(FOLLOW_non_quoted_string_in_string_expr_no_reserved_word4083);
                    non_quoted_string475=non_quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_non_quoted_string.add(non_quoted_string475.getTree());
                    // java_libbash.g:664:23: ( string_expr_part )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==POUND||LA159_0==BANG||(LA159_0>=TIME && LA159_0<=LETTER)||LA159_0==DIGIT||(LA159_0>=NAME && LA159_0<=LBRACE)||(LA159_0>=FOR && LA159_0<=DONE)||(LA159_0>=SELECT && LA159_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA159_0>=SLASH && LA159_0<=QMARK)||(LA159_0>=COMMAND_SUBSTITUTION_PAREN && LA159_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // java_libbash.g:664:23: string_expr_part
                    	    {
                    	    pushFollow(FOLLOW_string_expr_part_in_string_expr_no_reserved_word4085);
                    	    string_expr_part476=string_expr_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part476.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: non_quoted_string, string_expr_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 664:41: -> ^( STRING non_quoted_string ( string_expr_part )* )
                    {
                        // java_libbash.g:664:44: ^( STRING non_quoted_string ( string_expr_part )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_non_quoted_string.nextTree());
                        // java_libbash.g:664:71: ( string_expr_part )*
                        while ( stream_string_expr_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_string_expr_part.nextTree());

                        }
                        stream_string_expr_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:665:7: quoted_string ( string_expr_part )*
                    {
                    pushFollow(FOLLOW_quoted_string_in_string_expr_no_reserved_word4105);
                    quoted_string477=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string477.getTree());
                    // java_libbash.g:665:21: ( string_expr_part )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==POUND||LA160_0==BANG||(LA160_0>=TIME && LA160_0<=LETTER)||LA160_0==DIGIT||(LA160_0>=NAME && LA160_0<=LBRACE)||(LA160_0>=FOR && LA160_0<=DONE)||(LA160_0>=SELECT && LA160_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA160_0>=SLASH && LA160_0<=QMARK)||(LA160_0>=COMMAND_SUBSTITUTION_PAREN && LA160_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // java_libbash.g:665:21: string_expr_part
                    	    {
                    	    pushFollow(FOLLOW_string_expr_part_in_string_expr_no_reserved_word4107);
                    	    string_expr_part478=string_expr_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part478.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: string_expr_part, quoted_string
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 665:39: -> ^( STRING quoted_string ( string_expr_part )* )
                    {
                        // java_libbash.g:665:42: ^( STRING quoted_string ( string_expr_part )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, stream_quoted_string.nextTree());
                        // java_libbash.g:665:65: ( string_expr_part )*
                        while ( stream_string_expr_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_string_expr_part.nextTree());

                        }
                        stream_string_expr_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_expr_no_reserved_word"

    public static class reserved_word_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reserved_word"
    // java_libbash.g:668:1: reserved_word : ( CASE | DO | DONE | ELIF | ELSE | ESAC | FI | FOR | IF | IN | SELECT | THEN | UNTIL | WHILE | TIME );
    public final java_libbashParser.reserved_word_return reserved_word() throws RecognitionException {
        java_libbashParser.reserved_word_return retval = new java_libbashParser.reserved_word_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set479=null;

        CommonTree set479_tree=null;

        try {
            // java_libbash.g:669:2: ( CASE | DO | DONE | ELIF | ELSE | ESAC | FI | FOR | IF | IN | SELECT | THEN | UNTIL | WHILE | TIME )
            // java_libbash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set479=(Token)input.LT(1);
            if ( input.LA(1)==TIME||(input.LA(1)>=FOR && input.LA(1)<=DONE)||(input.LA(1)>=SELECT && input.LA(1)<=ESAC) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set479));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reserved_word"

    public static class non_quoted_string_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "non_quoted_string"
    // java_libbash.g:671:1: non_quoted_string : ( string_part | variable_reference | command_substitution | arithmetic_expansion | brace_expansion | BANG | DOLLAR SINGLE_QUOTED_STRING_TOKEN -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN ) );
    public final java_libbashParser.non_quoted_string_return non_quoted_string() throws RecognitionException {
        java_libbashParser.non_quoted_string_return retval = new java_libbashParser.non_quoted_string_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BANG485=null;
        Token DOLLAR486=null;
        Token SINGLE_QUOTED_STRING_TOKEN487=null;
        java_libbashParser.string_part_return string_part480 = null;

        java_libbashParser.variable_reference_return variable_reference481 = null;

        java_libbashParser.command_substitution_return command_substitution482 = null;

        java_libbashParser.arithmetic_expansion_return arithmetic_expansion483 = null;

        java_libbashParser.brace_expansion_return brace_expansion484 = null;


        CommonTree BANG485_tree=null;
        CommonTree DOLLAR486_tree=null;
        CommonTree SINGLE_QUOTED_STRING_TOKEN487_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_SINGLE_QUOTED_STRING_TOKEN=new RewriteRuleTokenStream(adaptor,"token SINGLE_QUOTED_STRING_TOKEN");

        try {
            // java_libbash.g:672:2: ( string_part | variable_reference | command_substitution | arithmetic_expansion | brace_expansion | BANG | DOLLAR SINGLE_QUOTED_STRING_TOKEN -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN ) )
            int alt162=7;
            switch ( input.LA(1) ) {
            case POUND:
            case MINUS:
            case LETTER:
            case DIGIT:
            case NAME:
            case EXPORT:
            case LOCAL:
            case DECLARE:
            case LSQUARE:
            case RSQUARE:
            case EQUALS:
            case PLUS:
            case TILDE:
            case ESC:
            case ESC_LT:
            case ESC_GT:
            case UNDERSCORE:
            case NUMBER:
            case SLASH:
            case OTHER:
            case PCT:
            case PCTPCT:
            case DOT:
            case DOTDOT:
            case COLON:
            case CARET:
            case COMMA:
            case AT:
            case ESC_RPAREN:
            case ESC_LPAREN:
            case ESC_RSQUARE:
            case ESC_LSQUARE:
            case ESC_DOLLAR:
            case ESC_TICK:
            case ESC_DQUOTE:
            case ESC_SQUOTE:
            case TIMES:
            case QMARK:
                {
                alt162=1;
                }
                break;
            case DOLLAR:
                {
                switch ( input.LA(2) ) {
                case POUND:
                case BANG:
                case MINUS:
                case LETTER:
                case DIGIT:
                case NAME:
                case LBRACE:
                case UNDERSCORE:
                case NUMBER:
                case DOLLAR:
                case AT:
                case TIMES:
                case QMARK:
                    {
                    alt162=2;
                    }
                    break;
                case LSQUARE:
                case LLPAREN:
                    {
                    alt162=4;
                    }
                    break;
                case SINGLE_QUOTED_STRING_TOKEN:
                    {
                    alt162=7;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 2, input);

                    throw nvae;
                }

                }
                break;
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt162=3;
                }
                break;
            case LBRACE:
                {
                alt162=5;
                }
                break;
            case BANG:
                {
                alt162=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // java_libbash.g:672:4: string_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_part_in_non_quoted_string4170);
                    string_part480=string_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_part480.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:673:4: variable_reference
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_reference_in_non_quoted_string4175);
                    variable_reference481=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference481.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:674:4: command_substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_command_substitution_in_non_quoted_string4180);
                    command_substitution482=command_substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, command_substitution482.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:675:4: arithmetic_expansion
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_expansion_in_non_quoted_string4185);
                    arithmetic_expansion483=arithmetic_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion483.getTree());

                    }
                    break;
                case 5 :
                    // java_libbash.g:676:4: brace_expansion
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_brace_expansion_in_non_quoted_string4190);
                    brace_expansion484=brace_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion484.getTree());

                    }
                    break;
                case 6 :
                    // java_libbash.g:677:4: BANG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BANG485=(Token)match(input,BANG,FOLLOW_BANG_in_non_quoted_string4195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BANG485_tree = (CommonTree)adaptor.create(BANG485);
                    adaptor.addChild(root_0, BANG485_tree);
                    }

                    }
                    break;
                case 7 :
                    // java_libbash.g:678:4: DOLLAR SINGLE_QUOTED_STRING_TOKEN
                    {
                    DOLLAR486=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_non_quoted_string4200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR486);

                    SINGLE_QUOTED_STRING_TOKEN487=(Token)match(input,SINGLE_QUOTED_STRING_TOKEN,FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_non_quoted_string4202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SINGLE_QUOTED_STRING_TOKEN.add(SINGLE_QUOTED_STRING_TOKEN487);



                    // AST REWRITE
                    // elements: SINGLE_QUOTED_STRING_TOKEN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 678:38: -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN )
                    {
                        // java_libbash.g:678:41: ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANSI_C_QUOTING, "ANSI_C_QUOTING"), root_1);

                        adaptor.addChild(root_1, stream_SINGLE_QUOTED_STRING_TOKEN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "non_quoted_string"

    public static class quoted_string_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quoted_string"
    // java_libbash.g:680:1: quoted_string : ( double_quoted_string | SINGLE_QUOTED_STRING_TOKEN -> ^( SINGLE_QUOTED_STRING SINGLE_QUOTED_STRING_TOKEN ) );
    public final java_libbashParser.quoted_string_return quoted_string() throws RecognitionException {
        java_libbashParser.quoted_string_return retval = new java_libbashParser.quoted_string_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SINGLE_QUOTED_STRING_TOKEN489=null;
        java_libbashParser.double_quoted_string_return double_quoted_string488 = null;


        CommonTree SINGLE_QUOTED_STRING_TOKEN489_tree=null;
        RewriteRuleTokenStream stream_SINGLE_QUOTED_STRING_TOKEN=new RewriteRuleTokenStream(adaptor,"token SINGLE_QUOTED_STRING_TOKEN");

        try {
            // java_libbash.g:681:2: ( double_quoted_string | SINGLE_QUOTED_STRING_TOKEN -> ^( SINGLE_QUOTED_STRING SINGLE_QUOTED_STRING_TOKEN ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==DQUOTE) ) {
                alt163=1;
            }
            else if ( (LA163_0==SINGLE_QUOTED_STRING_TOKEN) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // java_libbash.g:681:4: double_quoted_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_double_quoted_string_in_quoted_string4219);
                    double_quoted_string488=double_quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_quoted_string488.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:682:4: SINGLE_QUOTED_STRING_TOKEN
                    {
                    SINGLE_QUOTED_STRING_TOKEN489=(Token)match(input,SINGLE_QUOTED_STRING_TOKEN,FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_quoted_string4224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SINGLE_QUOTED_STRING_TOKEN.add(SINGLE_QUOTED_STRING_TOKEN489);



                    // AST REWRITE
                    // elements: SINGLE_QUOTED_STRING_TOKEN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 682:31: -> ^( SINGLE_QUOTED_STRING SINGLE_QUOTED_STRING_TOKEN )
                    {
                        // java_libbash.g:682:34: ^( SINGLE_QUOTED_STRING SINGLE_QUOTED_STRING_TOKEN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SINGLE_QUOTED_STRING, "SINGLE_QUOTED_STRING"), root_1);

                        adaptor.addChild(root_1, stream_SINGLE_QUOTED_STRING_TOKEN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quoted_string"

    public static class double_quoted_string_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "double_quoted_string"
    // java_libbash.g:684:1: double_quoted_string : DQUOTE ( (~ DQUOTE )=> expansion_base )* DQUOTE -> ^( DOUBLE_QUOTED_STRING ( expansion_base )* ) ;
    public final java_libbashParser.double_quoted_string_return double_quoted_string() throws RecognitionException {
        java_libbashParser.double_quoted_string_return retval = new java_libbashParser.double_quoted_string_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DQUOTE490=null;
        Token DQUOTE492=null;
        java_libbashParser.expansion_base_return expansion_base491 = null;


        CommonTree DQUOTE490_tree=null;
        CommonTree DQUOTE492_tree=null;
        RewriteRuleTokenStream stream_DQUOTE=new RewriteRuleTokenStream(adaptor,"token DQUOTE");
        RewriteRuleSubtreeStream stream_expansion_base=new RewriteRuleSubtreeStream(adaptor,"rule expansion_base");
        try {
            // java_libbash.g:685:2: ( DQUOTE ( (~ DQUOTE )=> expansion_base )* DQUOTE -> ^( DOUBLE_QUOTED_STRING ( expansion_base )* ) )
            // java_libbash.g:685:4: DQUOTE ( (~ DQUOTE )=> expansion_base )* DQUOTE
            {
            DQUOTE490=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_double_quoted_string4241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DQUOTE.add(DQUOTE490);

            // java_libbash.g:685:11: ( (~ DQUOTE )=> expansion_base )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==DQUOTE) ) {
                    int LA164_1 = input.LA(2);

                    if ( (synpred37_java_libbash()) ) {
                        alt164=1;
                    }


                }
                else if ( (LA164_0==DOLLAR) && (synpred37_java_libbash())) {
                    alt164=1;
                }
                else if ( (LA164_0==COMMAND_SUBSTITUTION_PAREN) && (synpred37_java_libbash())) {
                    alt164=1;
                }
                else if ( (LA164_0==COMMAND_SUBSTITUTION_TICK) && (synpred37_java_libbash())) {
                    alt164=1;
                }
                else if ( (LA164_0==ESC) && (synpred37_java_libbash())) {
                    alt164=1;
                }
                else if ( (LA164_0==LBRACE) && (synpred37_java_libbash())) {
                    alt164=1;
                }
                else if ( ((LA164_0>=ANSI_C_QUOTING && LA164_0<=PLUS)||(LA164_0>=RBRACE && LA164_0<=TILDE)||(LA164_0>=ESC_LT && LA164_0<=NUMBER)||(LA164_0>=SINGLE_QUOTED_STRING_TOKEN && LA164_0<=SQUOTE)||(LA164_0>=EXP && LA164_0<=CONTINUE_LINE)) && (synpred37_java_libbash())) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // java_libbash.g:685:12: (~ DQUOTE )=> expansion_base
            	    {
            	    pushFollow(FOLLOW_expansion_base_in_double_quoted_string4251);
            	    expansion_base491=expansion_base();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expansion_base.add(expansion_base491.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);

            DQUOTE492=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_double_quoted_string4255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DQUOTE.add(DQUOTE492);



            // AST REWRITE
            // elements: expansion_base
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 685:49: -> ^( DOUBLE_QUOTED_STRING ( expansion_base )* )
            {
                // java_libbash.g:685:52: ^( DOUBLE_QUOTED_STRING ( expansion_base )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOUBLE_QUOTED_STRING, "DOUBLE_QUOTED_STRING"), root_1);

                // java_libbash.g:685:75: ( expansion_base )*
                while ( stream_expansion_base.hasNext() ) {
                    adaptor.addChild(root_1, stream_expansion_base.nextTree());

                }
                stream_expansion_base.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "double_quoted_string"

    public static class expansion_base_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expansion_base"
    // java_libbash.g:688:1: expansion_base : ( ( DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG ) )=> variable_reference | ( command_substitution )=> command_substitution | ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_expansion | ( ESC DQUOTE )=> ESC DQUOTE -> DQUOTE | ( ESC TICK )=> ESC TICK -> TICK | ( ESC DOLLAR )=> ESC DOLLAR -> DOLLAR | ( brace_expansion )=> brace_expansion | ( DOLLAR SINGLE_QUOTED_STRING_TOKEN )=> DOLLAR SINGLE_QUOTED_STRING_TOKEN -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN ) | . );
    public final java_libbashParser.expansion_base_return expansion_base() throws RecognitionException {
        java_libbashParser.expansion_base_return retval = new java_libbashParser.expansion_base_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESC496=null;
        Token DQUOTE497=null;
        Token ESC498=null;
        Token TICK499=null;
        Token ESC500=null;
        Token DOLLAR501=null;
        Token DOLLAR503=null;
        Token SINGLE_QUOTED_STRING_TOKEN504=null;
        Token wildcard505=null;
        java_libbashParser.variable_reference_return variable_reference493 = null;

        java_libbashParser.command_substitution_return command_substitution494 = null;

        java_libbashParser.arithmetic_expansion_return arithmetic_expansion495 = null;

        java_libbashParser.brace_expansion_return brace_expansion502 = null;


        CommonTree ESC496_tree=null;
        CommonTree DQUOTE497_tree=null;
        CommonTree ESC498_tree=null;
        CommonTree TICK499_tree=null;
        CommonTree ESC500_tree=null;
        CommonTree DOLLAR501_tree=null;
        CommonTree DOLLAR503_tree=null;
        CommonTree SINGLE_QUOTED_STRING_TOKEN504_tree=null;
        CommonTree wildcard505_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_TICK=new RewriteRuleTokenStream(adaptor,"token TICK");
        RewriteRuleTokenStream stream_DQUOTE=new RewriteRuleTokenStream(adaptor,"token DQUOTE");
        RewriteRuleTokenStream stream_ESC=new RewriteRuleTokenStream(adaptor,"token ESC");
        RewriteRuleTokenStream stream_SINGLE_QUOTED_STRING_TOKEN=new RewriteRuleTokenStream(adaptor,"token SINGLE_QUOTED_STRING_TOKEN");

        try {
            // java_libbash.g:689:2: ( ( DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG ) )=> variable_reference | ( command_substitution )=> command_substitution | ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_expansion | ( ESC DQUOTE )=> ESC DQUOTE -> DQUOTE | ( ESC TICK )=> ESC TICK -> TICK | ( ESC DOLLAR )=> ESC DOLLAR -> DOLLAR | ( brace_expansion )=> brace_expansion | ( DOLLAR SINGLE_QUOTED_STRING_TOKEN )=> DOLLAR SINGLE_QUOTED_STRING_TOKEN -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN ) | . )
            int alt165=9;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // java_libbash.g:689:4: ( DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG ) )=> variable_reference
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_reference_in_expansion_base4302);
                    variable_reference493=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference493.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:690:4: ( command_substitution )=> command_substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_command_substitution_in_expansion_base4313);
                    command_substitution494=command_substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, command_substitution494.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:691:4: ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_expansion
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_expansion_in_expansion_base4330);
                    arithmetic_expansion495=arithmetic_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion495.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:692:4: ( ESC DQUOTE )=> ESC DQUOTE
                    {
                    ESC496=(Token)match(input,ESC,FOLLOW_ESC_in_expansion_base4343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ESC.add(ESC496);

                    DQUOTE497=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_expansion_base4345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DQUOTE.add(DQUOTE497);



                    // AST REWRITE
                    // elements: DQUOTE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 692:31: -> DQUOTE
                    {
                        adaptor.addChild(root_0, stream_DQUOTE.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:693:4: ( ESC TICK )=> ESC TICK
                    {
                    ESC498=(Token)match(input,ESC,FOLLOW_ESC_in_expansion_base4362); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ESC.add(ESC498);

                    TICK499=(Token)match(input,TICK,FOLLOW_TICK_in_expansion_base4364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICK.add(TICK499);



                    // AST REWRITE
                    // elements: TICK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 693:27: -> TICK
                    {
                        adaptor.addChild(root_0, stream_TICK.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:694:4: ( ESC DOLLAR )=> ESC DOLLAR
                    {
                    ESC500=(Token)match(input,ESC,FOLLOW_ESC_in_expansion_base4381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ESC.add(ESC500);

                    DOLLAR501=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_expansion_base4383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR501);



                    // AST REWRITE
                    // elements: DOLLAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 694:31: -> DOLLAR
                    {
                        adaptor.addChild(root_0, stream_DOLLAR.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // java_libbash.g:695:4: ( brace_expansion )=> brace_expansion
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_brace_expansion_in_expansion_base4398);
                    brace_expansion502=brace_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion502.getTree());

                    }
                    break;
                case 8 :
                    // java_libbash.g:696:4: ( DOLLAR SINGLE_QUOTED_STRING_TOKEN )=> DOLLAR SINGLE_QUOTED_STRING_TOKEN
                    {
                    DOLLAR503=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_expansion_base4411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR503);

                    SINGLE_QUOTED_STRING_TOKEN504=(Token)match(input,SINGLE_QUOTED_STRING_TOKEN,FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_expansion_base4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SINGLE_QUOTED_STRING_TOKEN.add(SINGLE_QUOTED_STRING_TOKEN504);



                    // AST REWRITE
                    // elements: SINGLE_QUOTED_STRING_TOKEN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 697:4: -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN )
                    {
                        // java_libbash.g:697:7: ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANSI_C_QUOTING, "ANSI_C_QUOTING"), root_1);

                        adaptor.addChild(root_1, stream_SINGLE_QUOTED_STRING_TOKEN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // java_libbash.g:698:4: .
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    wildcard505=(Token)input.LT(1);
                    matchAny(input); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    wildcard505_tree = (CommonTree)adaptor.create(wildcard505);
                    adaptor.addChild(root_0, wildcard505_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expansion_base"

    public static class all_expansions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "all_expansions"
    // java_libbash.g:700:1: all_expansions : ( expansion_atom )+ -> ^( STRING ( expansion_atom )+ ) ;
    public final java_libbashParser.all_expansions_return all_expansions() throws RecognitionException {
        java_libbashParser.all_expansions_return retval = new java_libbashParser.all_expansions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.expansion_atom_return expansion_atom506 = null;


        RewriteRuleSubtreeStream stream_expansion_atom=new RewriteRuleSubtreeStream(adaptor,"rule expansion_atom");
        try {
            // java_libbash.g:701:2: ( ( expansion_atom )+ -> ^( STRING ( expansion_atom )+ ) )
            // java_libbash.g:701:4: ( expansion_atom )+
            {
            // java_libbash.g:701:4: ( expansion_atom )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( ((LA166_0>=ANSI_C_QUOTING && LA166_0<=CONTINUE_LINE)) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // java_libbash.g:701:4: expansion_atom
            	    {
            	    pushFollow(FOLLOW_expansion_atom_in_all_expansions4438);
            	    expansion_atom506=expansion_atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expansion_atom.add(expansion_atom506.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);



            // AST REWRITE
            // elements: expansion_atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 701:20: -> ^( STRING ( expansion_atom )+ )
            {
                // java_libbash.g:701:23: ^( STRING ( expansion_atom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                if ( !(stream_expansion_atom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expansion_atom.hasNext() ) {
                    adaptor.addChild(root_1, stream_expansion_atom.nextTree());

                }
                stream_expansion_atom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "all_expansions"

    public static class expansion_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expansion_atom"
    // java_libbash.g:702:1: expansion_atom : ( ( DQUOTE )=> double_quoted_string | expansion_base );
    public final java_libbashParser.expansion_atom_return expansion_atom() throws RecognitionException {
        java_libbashParser.expansion_atom_return retval = new java_libbashParser.expansion_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.double_quoted_string_return double_quoted_string507 = null;

        java_libbashParser.expansion_base_return expansion_base508 = null;



        try {
            // java_libbash.g:703:2: ( ( DQUOTE )=> double_quoted_string | expansion_base )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==DQUOTE) ) {
                int LA167_1 = input.LA(2);

                if ( (synpred46_java_libbash()) ) {
                    alt167=1;
                }
                else if ( (true) ) {
                    alt167=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA167_0>=ANSI_C_QUOTING && LA167_0<=PLUS)||(LA167_0>=LBRACE && LA167_0<=CONTINUE_LINE)) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // java_libbash.g:703:4: ( DQUOTE )=> double_quoted_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_double_quoted_string_in_expansion_atom4462);
                    double_quoted_string507=double_quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, double_quoted_string507.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:704:4: expansion_base
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expansion_base_in_expansion_atom4467);
                    expansion_base508=expansion_base();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expansion_base508.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expansion_atom"

    public static class string_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "string_part"
    // java_libbash.g:706:1: string_part : ( ns_string_part | SLASH );
    public final java_libbashParser.string_part_return string_part() throws RecognitionException {
        java_libbashParser.string_part_return retval = new java_libbashParser.string_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SLASH510=null;
        java_libbashParser.ns_string_part_return ns_string_part509 = null;


        CommonTree SLASH510_tree=null;

        try {
            // java_libbash.g:707:2: ( ns_string_part | SLASH )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==POUND||(LA168_0>=MINUS && LA168_0<=LETTER)||LA168_0==DIGIT||(LA168_0>=NAME && LA168_0<=PLUS)||(LA168_0>=TILDE && LA168_0<=NUMBER)||(LA168_0>=OTHER && LA168_0<=QMARK)) ) {
                alt168=1;
            }
            else if ( (LA168_0==SLASH) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }
            switch (alt168) {
                case 1 :
                    // java_libbash.g:707:4: ns_string_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ns_string_part_in_string_part4476);
                    ns_string_part509=ns_string_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ns_string_part509.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:708:4: SLASH
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SLASH510=(Token)match(input,SLASH,FOLLOW_SLASH_in_string_part4481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH510_tree = (CommonTree)adaptor.create(SLASH510);
                    adaptor.addChild(root_0, SLASH510_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "string_part"

    public static class ns_string_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ns_string_part"
    // java_libbash.g:710:1: ns_string_part : ( num | name | escaped_character | OTHER | EQUALS | PCT | PCTPCT | PLUS | MINUS | DOT | DOTDOT | COLON | TILDE | LSQUARE | RSQUARE | CARET | POUND | COMMA | EXPORT | LOCAL | DECLARE | AT | ESC_RPAREN | ESC_LPAREN | ESC_RSQUARE | ESC_LSQUARE | ESC_DOLLAR | ESC_GT | ESC_LT | ESC_TICK | ESC_DQUOTE | ESC_SQUOTE | TIMES | QMARK );
    public final java_libbashParser.ns_string_part_return ns_string_part() throws RecognitionException {
        java_libbashParser.ns_string_part_return retval = new java_libbashParser.ns_string_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OTHER514=null;
        Token EQUALS515=null;
        Token PCT516=null;
        Token PCTPCT517=null;
        Token PLUS518=null;
        Token MINUS519=null;
        Token DOT520=null;
        Token DOTDOT521=null;
        Token COLON522=null;
        Token TILDE523=null;
        Token LSQUARE524=null;
        Token RSQUARE525=null;
        Token CARET526=null;
        Token POUND527=null;
        Token COMMA528=null;
        Token EXPORT529=null;
        Token LOCAL530=null;
        Token DECLARE531=null;
        Token AT532=null;
        Token ESC_RPAREN533=null;
        Token ESC_LPAREN534=null;
        Token ESC_RSQUARE535=null;
        Token ESC_LSQUARE536=null;
        Token ESC_DOLLAR537=null;
        Token ESC_GT538=null;
        Token ESC_LT539=null;
        Token ESC_TICK540=null;
        Token ESC_DQUOTE541=null;
        Token ESC_SQUOTE542=null;
        Token TIMES543=null;
        Token QMARK544=null;
        java_libbashParser.num_return num511 = null;

        java_libbashParser.name_return name512 = null;

        java_libbashParser.escaped_character_return escaped_character513 = null;


        CommonTree OTHER514_tree=null;
        CommonTree EQUALS515_tree=null;
        CommonTree PCT516_tree=null;
        CommonTree PCTPCT517_tree=null;
        CommonTree PLUS518_tree=null;
        CommonTree MINUS519_tree=null;
        CommonTree DOT520_tree=null;
        CommonTree DOTDOT521_tree=null;
        CommonTree COLON522_tree=null;
        CommonTree TILDE523_tree=null;
        CommonTree LSQUARE524_tree=null;
        CommonTree RSQUARE525_tree=null;
        CommonTree CARET526_tree=null;
        CommonTree POUND527_tree=null;
        CommonTree COMMA528_tree=null;
        CommonTree EXPORT529_tree=null;
        CommonTree LOCAL530_tree=null;
        CommonTree DECLARE531_tree=null;
        CommonTree AT532_tree=null;
        CommonTree ESC_RPAREN533_tree=null;
        CommonTree ESC_LPAREN534_tree=null;
        CommonTree ESC_RSQUARE535_tree=null;
        CommonTree ESC_LSQUARE536_tree=null;
        CommonTree ESC_DOLLAR537_tree=null;
        CommonTree ESC_GT538_tree=null;
        CommonTree ESC_LT539_tree=null;
        CommonTree ESC_TICK540_tree=null;
        CommonTree ESC_DQUOTE541_tree=null;
        CommonTree ESC_SQUOTE542_tree=null;
        CommonTree TIMES543_tree=null;
        CommonTree QMARK544_tree=null;

        try {
            // java_libbash.g:711:2: ( num | name | escaped_character | OTHER | EQUALS | PCT | PCTPCT | PLUS | MINUS | DOT | DOTDOT | COLON | TILDE | LSQUARE | RSQUARE | CARET | POUND | COMMA | EXPORT | LOCAL | DECLARE | AT | ESC_RPAREN | ESC_LPAREN | ESC_RSQUARE | ESC_LSQUARE | ESC_DOLLAR | ESC_GT | ESC_LT | ESC_TICK | ESC_DQUOTE | ESC_SQUOTE | TIMES | QMARK )
            int alt169=34;
            switch ( input.LA(1) ) {
            case DIGIT:
            case NUMBER:
                {
                alt169=1;
                }
                break;
            case LETTER:
            case NAME:
            case UNDERSCORE:
                {
                alt169=2;
                }
                break;
            case ESC:
                {
                alt169=3;
                }
                break;
            case OTHER:
                {
                alt169=4;
                }
                break;
            case EQUALS:
                {
                alt169=5;
                }
                break;
            case PCT:
                {
                alt169=6;
                }
                break;
            case PCTPCT:
                {
                alt169=7;
                }
                break;
            case PLUS:
                {
                alt169=8;
                }
                break;
            case MINUS:
                {
                alt169=9;
                }
                break;
            case DOT:
                {
                alt169=10;
                }
                break;
            case DOTDOT:
                {
                alt169=11;
                }
                break;
            case COLON:
                {
                alt169=12;
                }
                break;
            case TILDE:
                {
                alt169=13;
                }
                break;
            case LSQUARE:
                {
                alt169=14;
                }
                break;
            case RSQUARE:
                {
                alt169=15;
                }
                break;
            case CARET:
                {
                alt169=16;
                }
                break;
            case POUND:
                {
                alt169=17;
                }
                break;
            case COMMA:
                {
                alt169=18;
                }
                break;
            case EXPORT:
                {
                alt169=19;
                }
                break;
            case LOCAL:
                {
                alt169=20;
                }
                break;
            case DECLARE:
                {
                alt169=21;
                }
                break;
            case AT:
                {
                alt169=22;
                }
                break;
            case ESC_RPAREN:
                {
                alt169=23;
                }
                break;
            case ESC_LPAREN:
                {
                alt169=24;
                }
                break;
            case ESC_RSQUARE:
                {
                alt169=25;
                }
                break;
            case ESC_LSQUARE:
                {
                alt169=26;
                }
                break;
            case ESC_DOLLAR:
                {
                alt169=27;
                }
                break;
            case ESC_GT:
                {
                alt169=28;
                }
                break;
            case ESC_LT:
                {
                alt169=29;
                }
                break;
            case ESC_TICK:
                {
                alt169=30;
                }
                break;
            case ESC_DQUOTE:
                {
                alt169=31;
                }
                break;
            case ESC_SQUOTE:
                {
                alt169=32;
                }
                break;
            case TIMES:
                {
                alt169=33;
                }
                break;
            case QMARK:
                {
                alt169=34;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // java_libbash.g:711:4: num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_num_in_ns_string_part4490);
                    num511=num();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num511.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:711:8: name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_name_in_ns_string_part4492);
                    name512=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name512.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:711:13: escaped_character
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_escaped_character_in_ns_string_part4494);
                    escaped_character513=escaped_character();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escaped_character513.getTree());

                    }
                    break;
                case 4 :
                    // java_libbash.g:712:3: OTHER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OTHER514=(Token)match(input,OTHER,FOLLOW_OTHER_in_ns_string_part4498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OTHER514_tree = (CommonTree)adaptor.create(OTHER514);
                    adaptor.addChild(root_0, OTHER514_tree);
                    }

                    }
                    break;
                case 5 :
                    // java_libbash.g:712:9: EQUALS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUALS515=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_ns_string_part4500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS515_tree = (CommonTree)adaptor.create(EQUALS515);
                    adaptor.addChild(root_0, EQUALS515_tree);
                    }

                    }
                    break;
                case 6 :
                    // java_libbash.g:712:16: PCT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PCT516=(Token)match(input,PCT,FOLLOW_PCT_in_ns_string_part4502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PCT516_tree = (CommonTree)adaptor.create(PCT516);
                    adaptor.addChild(root_0, PCT516_tree);
                    }

                    }
                    break;
                case 7 :
                    // java_libbash.g:712:20: PCTPCT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PCTPCT517=(Token)match(input,PCTPCT,FOLLOW_PCTPCT_in_ns_string_part4504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PCTPCT517_tree = (CommonTree)adaptor.create(PCTPCT517);
                    adaptor.addChild(root_0, PCTPCT517_tree);
                    }

                    }
                    break;
                case 8 :
                    // java_libbash.g:712:27: PLUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PLUS518=(Token)match(input,PLUS,FOLLOW_PLUS_in_ns_string_part4506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS518_tree = (CommonTree)adaptor.create(PLUS518);
                    adaptor.addChild(root_0, PLUS518_tree);
                    }

                    }
                    break;
                case 9 :
                    // java_libbash.g:712:32: MINUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MINUS519=(Token)match(input,MINUS,FOLLOW_MINUS_in_ns_string_part4508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS519_tree = (CommonTree)adaptor.create(MINUS519);
                    adaptor.addChild(root_0, MINUS519_tree);
                    }

                    }
                    break;
                case 10 :
                    // java_libbash.g:712:38: DOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOT520=(Token)match(input,DOT,FOLLOW_DOT_in_ns_string_part4510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT520_tree = (CommonTree)adaptor.create(DOT520);
                    adaptor.addChild(root_0, DOT520_tree);
                    }

                    }
                    break;
                case 11 :
                    // java_libbash.g:712:42: DOTDOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOTDOT521=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_ns_string_part4512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTDOT521_tree = (CommonTree)adaptor.create(DOTDOT521);
                    adaptor.addChild(root_0, DOTDOT521_tree);
                    }

                    }
                    break;
                case 12 :
                    // java_libbash.g:712:49: COLON
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COLON522=(Token)match(input,COLON,FOLLOW_COLON_in_ns_string_part4514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON522_tree = (CommonTree)adaptor.create(COLON522);
                    adaptor.addChild(root_0, COLON522_tree);
                    }

                    }
                    break;
                case 13 :
                    // java_libbash.g:713:3: TILDE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TILDE523=(Token)match(input,TILDE,FOLLOW_TILDE_in_ns_string_part4518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE523_tree = (CommonTree)adaptor.create(TILDE523);
                    adaptor.addChild(root_0, TILDE523_tree);
                    }

                    }
                    break;
                case 14 :
                    // java_libbash.g:713:9: LSQUARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LSQUARE524=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_ns_string_part4520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LSQUARE524_tree = (CommonTree)adaptor.create(LSQUARE524);
                    adaptor.addChild(root_0, LSQUARE524_tree);
                    }

                    }
                    break;
                case 15 :
                    // java_libbash.g:713:17: RSQUARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RSQUARE525=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_ns_string_part4522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RSQUARE525_tree = (CommonTree)adaptor.create(RSQUARE525);
                    adaptor.addChild(root_0, RSQUARE525_tree);
                    }

                    }
                    break;
                case 16 :
                    // java_libbash.g:713:25: CARET
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CARET526=(Token)match(input,CARET,FOLLOW_CARET_in_ns_string_part4524); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CARET526_tree = (CommonTree)adaptor.create(CARET526);
                    adaptor.addChild(root_0, CARET526_tree);
                    }

                    }
                    break;
                case 17 :
                    // java_libbash.g:713:31: POUND
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    POUND527=(Token)match(input,POUND,FOLLOW_POUND_in_ns_string_part4526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND527_tree = (CommonTree)adaptor.create(POUND527);
                    adaptor.addChild(root_0, POUND527_tree);
                    }

                    }
                    break;
                case 18 :
                    // java_libbash.g:713:37: COMMA
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_ns_string_part4528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA528_tree = (CommonTree)adaptor.create(COMMA528);
                    adaptor.addChild(root_0, COMMA528_tree);
                    }

                    }
                    break;
                case 19 :
                    // java_libbash.g:713:43: EXPORT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXPORT529=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_ns_string_part4530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXPORT529_tree = (CommonTree)adaptor.create(EXPORT529);
                    adaptor.addChild(root_0, EXPORT529_tree);
                    }

                    }
                    break;
                case 20 :
                    // java_libbash.g:713:50: LOCAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LOCAL530=(Token)match(input,LOCAL,FOLLOW_LOCAL_in_ns_string_part4532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LOCAL530_tree = (CommonTree)adaptor.create(LOCAL530);
                    adaptor.addChild(root_0, LOCAL530_tree);
                    }

                    }
                    break;
                case 21 :
                    // java_libbash.g:713:56: DECLARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DECLARE531=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_ns_string_part4534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECLARE531_tree = (CommonTree)adaptor.create(DECLARE531);
                    adaptor.addChild(root_0, DECLARE531_tree);
                    }

                    }
                    break;
                case 22 :
                    // java_libbash.g:713:64: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT532=(Token)match(input,AT,FOLLOW_AT_in_ns_string_part4536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT532_tree = (CommonTree)adaptor.create(AT532);
                    adaptor.addChild(root_0, AT532_tree);
                    }

                    }
                    break;
                case 23 :
                    // java_libbash.g:715:3: ESC_RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_RPAREN533=(Token)match(input,ESC_RPAREN,FOLLOW_ESC_RPAREN_in_ns_string_part4541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_RPAREN533_tree = (CommonTree)adaptor.create(ESC_RPAREN533);
                    adaptor.addChild(root_0, ESC_RPAREN533_tree);
                    }

                    }
                    break;
                case 24 :
                    // java_libbash.g:715:14: ESC_LPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_LPAREN534=(Token)match(input,ESC_LPAREN,FOLLOW_ESC_LPAREN_in_ns_string_part4543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_LPAREN534_tree = (CommonTree)adaptor.create(ESC_LPAREN534);
                    adaptor.addChild(root_0, ESC_LPAREN534_tree);
                    }

                    }
                    break;
                case 25 :
                    // java_libbash.g:715:25: ESC_RSQUARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_RSQUARE535=(Token)match(input,ESC_RSQUARE,FOLLOW_ESC_RSQUARE_in_ns_string_part4545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_RSQUARE535_tree = (CommonTree)adaptor.create(ESC_RSQUARE535);
                    adaptor.addChild(root_0, ESC_RSQUARE535_tree);
                    }

                    }
                    break;
                case 26 :
                    // java_libbash.g:715:37: ESC_LSQUARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_LSQUARE536=(Token)match(input,ESC_LSQUARE,FOLLOW_ESC_LSQUARE_in_ns_string_part4547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_LSQUARE536_tree = (CommonTree)adaptor.create(ESC_LSQUARE536);
                    adaptor.addChild(root_0, ESC_LSQUARE536_tree);
                    }

                    }
                    break;
                case 27 :
                    // java_libbash.g:715:49: ESC_DOLLAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_DOLLAR537=(Token)match(input,ESC_DOLLAR,FOLLOW_ESC_DOLLAR_in_ns_string_part4549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_DOLLAR537_tree = (CommonTree)adaptor.create(ESC_DOLLAR537);
                    adaptor.addChild(root_0, ESC_DOLLAR537_tree);
                    }

                    }
                    break;
                case 28 :
                    // java_libbash.g:715:60: ESC_GT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_GT538=(Token)match(input,ESC_GT,FOLLOW_ESC_GT_in_ns_string_part4551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_GT538_tree = (CommonTree)adaptor.create(ESC_GT538);
                    adaptor.addChild(root_0, ESC_GT538_tree);
                    }

                    }
                    break;
                case 29 :
                    // java_libbash.g:715:67: ESC_LT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_LT539=(Token)match(input,ESC_LT,FOLLOW_ESC_LT_in_ns_string_part4553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_LT539_tree = (CommonTree)adaptor.create(ESC_LT539);
                    adaptor.addChild(root_0, ESC_LT539_tree);
                    }

                    }
                    break;
                case 30 :
                    // java_libbash.g:715:74: ESC_TICK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_TICK540=(Token)match(input,ESC_TICK,FOLLOW_ESC_TICK_in_ns_string_part4555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_TICK540_tree = (CommonTree)adaptor.create(ESC_TICK540);
                    adaptor.addChild(root_0, ESC_TICK540_tree);
                    }

                    }
                    break;
                case 31 :
                    // java_libbash.g:715:83: ESC_DQUOTE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_DQUOTE541=(Token)match(input,ESC_DQUOTE,FOLLOW_ESC_DQUOTE_in_ns_string_part4557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_DQUOTE541_tree = (CommonTree)adaptor.create(ESC_DQUOTE541);
                    adaptor.addChild(root_0, ESC_DQUOTE541_tree);
                    }

                    }
                    break;
                case 32 :
                    // java_libbash.g:715:94: ESC_SQUOTE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESC_SQUOTE542=(Token)match(input,ESC_SQUOTE,FOLLOW_ESC_SQUOTE_in_ns_string_part4559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESC_SQUOTE542_tree = (CommonTree)adaptor.create(ESC_SQUOTE542);
                    adaptor.addChild(root_0, ESC_SQUOTE542_tree);
                    }

                    }
                    break;
                case 33 :
                    // java_libbash.g:717:3: TIMES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TIMES543=(Token)match(input,TIMES,FOLLOW_TIMES_in_ns_string_part4564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMES543_tree = (CommonTree)adaptor.create(TIMES543);
                    adaptor.addChild(root_0, TIMES543_tree);
                    }

                    }
                    break;
                case 34 :
                    // java_libbash.g:717:9: QMARK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QMARK544=(Token)match(input,QMARK,FOLLOW_QMARK_in_ns_string_part4566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QMARK544_tree = (CommonTree)adaptor.create(QMARK544);
                    adaptor.addChild(root_0, QMARK544_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ns_string_part"

    public static class escaped_character_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escaped_character"
    // java_libbash.g:719:1: escaped_character : ESC ( ( DIGIT )=> DIGIT | ( DIGIT DIGIT )=> DIGIT DIGIT | ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT | LETTER ALPHANUM ( ALPHANUM )? | . ) ;
    public final java_libbashParser.escaped_character_return escaped_character() throws RecognitionException {
        java_libbashParser.escaped_character_return retval = new java_libbashParser.escaped_character_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESC545=null;
        Token DIGIT546=null;
        Token DIGIT547=null;
        Token DIGIT548=null;
        Token DIGIT549=null;
        Token DIGIT550=null;
        Token DIGIT551=null;
        Token LETTER552=null;
        Token ALPHANUM553=null;
        Token ALPHANUM554=null;
        Token wildcard555=null;

        CommonTree ESC545_tree=null;
        CommonTree DIGIT546_tree=null;
        CommonTree DIGIT547_tree=null;
        CommonTree DIGIT548_tree=null;
        CommonTree DIGIT549_tree=null;
        CommonTree DIGIT550_tree=null;
        CommonTree DIGIT551_tree=null;
        CommonTree LETTER552_tree=null;
        CommonTree ALPHANUM553_tree=null;
        CommonTree ALPHANUM554_tree=null;
        CommonTree wildcard555_tree=null;

        try {
            // java_libbash.g:720:2: ( ESC ( ( DIGIT )=> DIGIT | ( DIGIT DIGIT )=> DIGIT DIGIT | ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT | LETTER ALPHANUM ( ALPHANUM )? | . ) )
            // java_libbash.g:720:4: ESC ( ( DIGIT )=> DIGIT | ( DIGIT DIGIT )=> DIGIT DIGIT | ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT | LETTER ALPHANUM ( ALPHANUM )? | . )
            {
            root_0 = (CommonTree)adaptor.nil();

            ESC545=(Token)match(input,ESC,FOLLOW_ESC_in_escaped_character4575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ESC545_tree = (CommonTree)adaptor.create(ESC545);
            adaptor.addChild(root_0, ESC545_tree);
            }
            // java_libbash.g:721:3: ( ( DIGIT )=> DIGIT | ( DIGIT DIGIT )=> DIGIT DIGIT | ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT | LETTER ALPHANUM ( ALPHANUM )? | . )
            int alt171=5;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // java_libbash.g:722:4: ( DIGIT )=> DIGIT
                    {
                    DIGIT546=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT546_tree = (CommonTree)adaptor.create(DIGIT546);
                    adaptor.addChild(root_0, DIGIT546_tree);
                    }

                    }
                    break;
                case 2 :
                    // java_libbash.g:723:6: ( DIGIT DIGIT )=> DIGIT DIGIT
                    {
                    DIGIT547=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT547_tree = (CommonTree)adaptor.create(DIGIT547);
                    adaptor.addChild(root_0, DIGIT547_tree);
                    }
                    DIGIT548=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT548_tree = (CommonTree)adaptor.create(DIGIT548);
                    adaptor.addChild(root_0, DIGIT548_tree);
                    }

                    }
                    break;
                case 3 :
                    // java_libbash.g:724:6: ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT
                    {
                    DIGIT549=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT549_tree = (CommonTree)adaptor.create(DIGIT549);
                    adaptor.addChild(root_0, DIGIT549_tree);
                    }
                    DIGIT550=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4626); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT550_tree = (CommonTree)adaptor.create(DIGIT550);
                    adaptor.addChild(root_0, DIGIT550_tree);
                    }
                    DIGIT551=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_escaped_character4628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT551_tree = (CommonTree)adaptor.create(DIGIT551);
                    adaptor.addChild(root_0, DIGIT551_tree);
                    }

                    }
                    break;
                case 4 :
                    // java_libbash.g:725:6: LETTER ALPHANUM ( ALPHANUM )?
                    {
                    LETTER552=(Token)match(input,LETTER,FOLLOW_LETTER_in_escaped_character4635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LETTER552_tree = (CommonTree)adaptor.create(LETTER552);
                    adaptor.addChild(root_0, LETTER552_tree);
                    }
                    ALPHANUM553=(Token)match(input,ALPHANUM,FOLLOW_ALPHANUM_in_escaped_character4637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALPHANUM553_tree = (CommonTree)adaptor.create(ALPHANUM553);
                    adaptor.addChild(root_0, ALPHANUM553_tree);
                    }
                    // java_libbash.g:725:22: ( ALPHANUM )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==ALPHANUM) ) {
                        int LA170_1 = input.LA(2);

                        if ( (!(((is_special_token(LA(1)))))) ) {
                            alt170=1;
                        }
                    }
                    switch (alt170) {
                        case 1 :
                            // java_libbash.g:725:22: ALPHANUM
                            {
                            ALPHANUM554=(Token)match(input,ALPHANUM,FOLLOW_ALPHANUM_in_escaped_character4639); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALPHANUM554_tree = (CommonTree)adaptor.create(ALPHANUM554);
                            adaptor.addChild(root_0, ALPHANUM554_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // java_libbash.g:726:6: .
                    {
                    wildcard555=(Token)input.LT(1);
                    matchAny(input); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    wildcard555_tree = (CommonTree)adaptor.create(wildcard555);
                    adaptor.addChild(root_0, wildcard555_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escaped_character"

    public static class extended_pattern_match_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extended_pattern_match"
    // java_libbash.g:729:1: extended_pattern_match : ( ( QMARK LPAREN )=> QMARK LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_MOST_ONE ( extended_pattern )+ ) | ( TIMES LPAREN )=> TIMES LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_ANY ( extended_pattern )+ ) | ( PLUS LPAREN )=> PLUS LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_LEAST_ONE ( extended_pattern )+ ) | ( AT LPAREN )=> AT LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_EXACTLY_ONE ( extended_pattern )+ ) | ( BANG LPAREN )=> BANG LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_NONE ( extended_pattern )+ ) | ( bracket_pattern_match )=> bracket_pattern_match | ( pattern_class_match )=> pattern_class_match | string_expr_part );
    public final java_libbashParser.extended_pattern_match_return extended_pattern_match() throws RecognitionException {
        java_libbashParser.extended_pattern_match_return retval = new java_libbashParser.extended_pattern_match_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token QMARK556=null;
        Token LPAREN557=null;
        Token PIPE559=null;
        Token RPAREN561=null;
        Token TIMES562=null;
        Token LPAREN563=null;
        Token PIPE565=null;
        Token RPAREN567=null;
        Token PLUS568=null;
        Token LPAREN569=null;
        Token PIPE571=null;
        Token RPAREN573=null;
        Token AT574=null;
        Token LPAREN575=null;
        Token PIPE577=null;
        Token RPAREN579=null;
        Token BANG580=null;
        Token LPAREN581=null;
        Token PIPE583=null;
        Token RPAREN585=null;
        java_libbashParser.extended_pattern_return extended_pattern558 = null;

        java_libbashParser.extended_pattern_return extended_pattern560 = null;

        java_libbashParser.extended_pattern_return extended_pattern564 = null;

        java_libbashParser.extended_pattern_return extended_pattern566 = null;

        java_libbashParser.extended_pattern_return extended_pattern570 = null;

        java_libbashParser.extended_pattern_return extended_pattern572 = null;

        java_libbashParser.extended_pattern_return extended_pattern576 = null;

        java_libbashParser.extended_pattern_return extended_pattern578 = null;

        java_libbashParser.extended_pattern_return extended_pattern582 = null;

        java_libbashParser.extended_pattern_return extended_pattern584 = null;

        java_libbashParser.bracket_pattern_match_return bracket_pattern_match586 = null;

        java_libbashParser.pattern_class_match_return pattern_class_match587 = null;

        java_libbashParser.string_expr_part_return string_expr_part588 = null;


        CommonTree QMARK556_tree=null;
        CommonTree LPAREN557_tree=null;
        CommonTree PIPE559_tree=null;
        CommonTree RPAREN561_tree=null;
        CommonTree TIMES562_tree=null;
        CommonTree LPAREN563_tree=null;
        CommonTree PIPE565_tree=null;
        CommonTree RPAREN567_tree=null;
        CommonTree PLUS568_tree=null;
        CommonTree LPAREN569_tree=null;
        CommonTree PIPE571_tree=null;
        CommonTree RPAREN573_tree=null;
        CommonTree AT574_tree=null;
        CommonTree LPAREN575_tree=null;
        CommonTree PIPE577_tree=null;
        CommonTree RPAREN579_tree=null;
        CommonTree BANG580_tree=null;
        CommonTree LPAREN581_tree=null;
        CommonTree PIPE583_tree=null;
        CommonTree RPAREN585_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_extended_pattern=new RewriteRuleSubtreeStream(adaptor,"rule extended_pattern");
        try {
            // java_libbash.g:730:2: ( ( QMARK LPAREN )=> QMARK LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_MOST_ONE ( extended_pattern )+ ) | ( TIMES LPAREN )=> TIMES LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_ANY ( extended_pattern )+ ) | ( PLUS LPAREN )=> PLUS LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_LEAST_ONE ( extended_pattern )+ ) | ( AT LPAREN )=> AT LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_EXACTLY_ONE ( extended_pattern )+ ) | ( BANG LPAREN )=> BANG LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_NONE ( extended_pattern )+ ) | ( bracket_pattern_match )=> bracket_pattern_match | ( pattern_class_match )=> pattern_class_match | string_expr_part )
            int alt177=8;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // java_libbash.g:730:4: ( QMARK LPAREN )=> QMARK LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN
                    {
                    QMARK556=(Token)match(input,QMARK,FOLLOW_QMARK_in_extended_pattern_match4668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QMARK.add(QMARK556);

                    LPAREN557=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN557);

                    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4672);
                    extended_pattern558=extended_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern558.getTree());
                    // java_libbash.g:730:52: ( PIPE extended_pattern )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==PIPE) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // java_libbash.g:730:53: PIPE extended_pattern
                    	    {
                    	    PIPE559=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4675); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE559);

                    	    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4677);
                    	    extended_pattern560=extended_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern560.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);

                    RPAREN561=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN561);



                    // AST REWRITE
                    // elements: extended_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 731:4: -> ^( EXTENDED_MATCH_AT_MOST_ONE ( extended_pattern )+ )
                    {
                        // java_libbash.g:731:7: ^( EXTENDED_MATCH_AT_MOST_ONE ( extended_pattern )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDED_MATCH_AT_MOST_ONE, "EXTENDED_MATCH_AT_MOST_ONE"), root_1);

                        if ( !(stream_extended_pattern.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                        }
                        stream_extended_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:732:4: ( TIMES LPAREN )=> TIMES LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN
                    {
                    TIMES562=(Token)match(input,TIMES,FOLLOW_TIMES_in_extended_pattern_match4706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(TIMES562);

                    LPAREN563=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN563);

                    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4710);
                    extended_pattern564=extended_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern564.getTree());
                    // java_libbash.g:732:52: ( PIPE extended_pattern )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==PIPE) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // java_libbash.g:732:53: PIPE extended_pattern
                    	    {
                    	    PIPE565=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4713); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE565);

                    	    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4715);
                    	    extended_pattern566=extended_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern566.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);

                    RPAREN567=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN567);



                    // AST REWRITE
                    // elements: extended_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 733:4: -> ^( EXTENDED_MATCH_ANY ( extended_pattern )+ )
                    {
                        // java_libbash.g:733:7: ^( EXTENDED_MATCH_ANY ( extended_pattern )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDED_MATCH_ANY, "EXTENDED_MATCH_ANY"), root_1);

                        if ( !(stream_extended_pattern.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                        }
                        stream_extended_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:734:4: ( PLUS LPAREN )=> PLUS LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN
                    {
                    PLUS568=(Token)match(input,PLUS,FOLLOW_PLUS_in_extended_pattern_match4744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS568);

                    LPAREN569=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4746); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN569);

                    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4748);
                    extended_pattern570=extended_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern570.getTree());
                    // java_libbash.g:734:50: ( PIPE extended_pattern )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==PIPE) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // java_libbash.g:734:51: PIPE extended_pattern
                    	    {
                    	    PIPE571=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4751); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE571);

                    	    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4753);
                    	    extended_pattern572=extended_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern572.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);

                    RPAREN573=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4757); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN573);



                    // AST REWRITE
                    // elements: extended_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 735:4: -> ^( EXTENDED_MATCH_AT_LEAST_ONE ( extended_pattern )+ )
                    {
                        // java_libbash.g:735:7: ^( EXTENDED_MATCH_AT_LEAST_ONE ( extended_pattern )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDED_MATCH_AT_LEAST_ONE, "EXTENDED_MATCH_AT_LEAST_ONE"), root_1);

                        if ( !(stream_extended_pattern.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                        }
                        stream_extended_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:736:4: ( AT LPAREN )=> AT LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN
                    {
                    AT574=(Token)match(input,AT,FOLLOW_AT_in_extended_pattern_match4782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT574);

                    LPAREN575=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN575);

                    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4786);
                    extended_pattern576=extended_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern576.getTree());
                    // java_libbash.g:736:46: ( PIPE extended_pattern )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==PIPE) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // java_libbash.g:736:47: PIPE extended_pattern
                    	    {
                    	    PIPE577=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4789); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE577);

                    	    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4791);
                    	    extended_pattern578=extended_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern578.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);

                    RPAREN579=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN579);



                    // AST REWRITE
                    // elements: extended_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 737:4: -> ^( EXTENDED_MATCH_EXACTLY_ONE ( extended_pattern )+ )
                    {
                        // java_libbash.g:737:7: ^( EXTENDED_MATCH_EXACTLY_ONE ( extended_pattern )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDED_MATCH_EXACTLY_ONE, "EXTENDED_MATCH_EXACTLY_ONE"), root_1);

                        if ( !(stream_extended_pattern.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                        }
                        stream_extended_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:738:4: ( BANG LPAREN )=> BANG LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN
                    {
                    BANG580=(Token)match(input,BANG,FOLLOW_BANG_in_extended_pattern_match4820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG580);

                    LPAREN581=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN581);

                    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4824);
                    extended_pattern582=extended_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern582.getTree());
                    // java_libbash.g:738:50: ( PIPE extended_pattern )*
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==PIPE) ) {
                            alt176=1;
                        }


                        switch (alt176) {
                    	case 1 :
                    	    // java_libbash.g:738:51: PIPE extended_pattern
                    	    {
                    	    PIPE583=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4827); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_PIPE.add(PIPE583);

                    	    pushFollow(FOLLOW_extended_pattern_in_extended_pattern_match4829);
                    	    extended_pattern584=extended_pattern();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_extended_pattern.add(extended_pattern584.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop176;
                        }
                    } while (true);

                    RPAREN585=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN585);



                    // AST REWRITE
                    // elements: extended_pattern
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 739:4: -> ^( EXTENDED_MATCH_NONE ( extended_pattern )+ )
                    {
                        // java_libbash.g:739:7: ^( EXTENDED_MATCH_NONE ( extended_pattern )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXTENDED_MATCH_NONE, "EXTENDED_MATCH_NONE"), root_1);

                        if ( !(stream_extended_pattern.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_extended_pattern.hasNext() ) {
                            adaptor.addChild(root_1, stream_extended_pattern.nextTree());

                        }
                        stream_extended_pattern.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:740:4: ( bracket_pattern_match )=> bracket_pattern_match
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_bracket_pattern_match_in_extended_pattern_match4856);
                    bracket_pattern_match586=bracket_pattern_match();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern_match586.getTree());

                    }
                    break;
                case 7 :
                    // java_libbash.g:741:4: ( pattern_class_match )=> pattern_class_match
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_class_match_in_extended_pattern_match4867);
                    pattern_class_match587=pattern_class_match();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_class_match587.getTree());

                    }
                    break;
                case 8 :
                    // java_libbash.g:742:4: string_expr_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_expr_part_in_extended_pattern_match4872);
                    string_expr_part588=string_expr_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr_part588.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extended_pattern_match"

    public static class extended_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extended_pattern"
    // java_libbash.g:744:1: extended_pattern : ( (~ ( RPAREN | PIPE ) )=> extended_pattern_match )+ -> ^( BRANCH ( extended_pattern_match )+ ) ;
    public final java_libbashParser.extended_pattern_return extended_pattern() throws RecognitionException {
        java_libbashParser.extended_pattern_return retval = new java_libbashParser.extended_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.extended_pattern_match_return extended_pattern_match589 = null;


        RewriteRuleSubtreeStream stream_extended_pattern_match=new RewriteRuleSubtreeStream(adaptor,"rule extended_pattern_match");
        try {
            // java_libbash.g:745:2: ( ( (~ ( RPAREN | PIPE ) )=> extended_pattern_match )+ -> ^( BRANCH ( extended_pattern_match )+ ) )
            // java_libbash.g:745:4: ( (~ ( RPAREN | PIPE ) )=> extended_pattern_match )+
            {
            // java_libbash.g:745:4: ( (~ ( RPAREN | PIPE ) )=> extended_pattern_match )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    // java_libbash.g:745:5: (~ ( RPAREN | PIPE ) )=> extended_pattern_match
            	    {
            	    pushFollow(FOLLOW_extended_pattern_match_in_extended_pattern4893);
            	    extended_pattern_match589=extended_pattern_match();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_extended_pattern_match.add(extended_pattern_match589.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);



            // AST REWRITE
            // elements: extended_pattern_match
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 745:50: -> ^( BRANCH ( extended_pattern_match )+ )
            {
                // java_libbash.g:745:53: ^( BRANCH ( extended_pattern_match )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRANCH, "BRANCH"), root_1);

                if ( !(stream_extended_pattern_match.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_extended_pattern_match.hasNext() ) {
                    adaptor.addChild(root_1, stream_extended_pattern_match.nextTree());

                }
                stream_extended_pattern_match.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extended_pattern"

    public static class bracket_pattern_match_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern_match"
    // java_libbash.g:747:1: bracket_pattern_match : ( LSQUARE bracket_pattern_match_operator bracket_pattern RSQUARE | TIMES -> MATCH_ALL | QMARK -> MATCH_ONE );
    public final java_libbashParser.bracket_pattern_match_return bracket_pattern_match() throws RecognitionException {
        java_libbashParser.bracket_pattern_match_return retval = new java_libbashParser.bracket_pattern_match_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE590=null;
        Token RSQUARE593=null;
        Token TIMES594=null;
        Token QMARK595=null;
        java_libbashParser.bracket_pattern_match_operator_return bracket_pattern_match_operator591 = null;

        java_libbashParser.bracket_pattern_return bracket_pattern592 = null;


        CommonTree LSQUARE590_tree=null;
        CommonTree RSQUARE593_tree=null;
        CommonTree TIMES594_tree=null;
        CommonTree QMARK595_tree=null;
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");

        try {
            // java_libbash.g:748:2: ( LSQUARE bracket_pattern_match_operator bracket_pattern RSQUARE | TIMES -> MATCH_ALL | QMARK -> MATCH_ONE )
            int alt179=3;
            switch ( input.LA(1) ) {
            case LSQUARE:
                {
                alt179=1;
                }
                break;
            case TIMES:
                {
                alt179=2;
                }
                break;
            case QMARK:
                {
                alt179=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // java_libbash.g:748:4: LSQUARE bracket_pattern_match_operator bracket_pattern RSQUARE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LSQUARE590=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_bracket_pattern_match4913); if (state.failed) return retval;
                    pushFollow(FOLLOW_bracket_pattern_match_operator_in_bracket_pattern_match4916);
                    bracket_pattern_match_operator591=bracket_pattern_match_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bracket_pattern_match_operator591.getTree(), root_0);
                    pushFollow(FOLLOW_bracket_pattern_in_bracket_pattern_match4919);
                    bracket_pattern592=bracket_pattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern592.getTree());
                    RSQUARE593=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match4921); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // java_libbash.g:749:4: TIMES
                    {
                    TIMES594=(Token)match(input,TIMES,FOLLOW_TIMES_in_bracket_pattern_match4927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(TIMES594);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 749:10: -> MATCH_ALL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MATCH_ALL, "MATCH_ALL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:750:4: QMARK
                    {
                    QMARK595=(Token)match(input,QMARK,FOLLOW_QMARK_in_bracket_pattern_match4936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QMARK.add(QMARK595);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 750:10: -> MATCH_ONE
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MATCH_ONE, "MATCH_ONE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern_match"

    public static class bracket_pattern_match_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern_match_operator"
    // java_libbash.g:751:1: bracket_pattern_match_operator : ( ( BANG )=> BANG -> MATCH_ANY_EXCEPT | ( CARET )=> CARET -> MATCH_ANY_EXCEPT | -> MATCH_ANY );
    public final java_libbashParser.bracket_pattern_match_operator_return bracket_pattern_match_operator() throws RecognitionException {
        java_libbashParser.bracket_pattern_match_operator_return retval = new java_libbashParser.bracket_pattern_match_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BANG596=null;
        Token CARET597=null;

        CommonTree BANG596_tree=null;
        CommonTree CARET597_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_CARET=new RewriteRuleTokenStream(adaptor,"token CARET");

        try {
            // java_libbash.g:752:2: ( ( BANG )=> BANG -> MATCH_ANY_EXCEPT | ( CARET )=> CARET -> MATCH_ANY_EXCEPT | -> MATCH_ANY )
            int alt180=3;
            switch ( input.LA(1) ) {
            case BANG:
                {
                int LA180_1 = input.LA(2);

                if ( (synpred58_java_libbash()) ) {
                    alt180=1;
                }
                else if ( (true) ) {
                    alt180=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 1, input);

                    throw nvae;
                }
                }
                break;
            case CARET:
                {
                int LA180_2 = input.LA(2);

                if ( (synpred59_java_libbash()) ) {
                    alt180=2;
                }
                else if ( (true) ) {
                    alt180=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 180, 2, input);

                    throw nvae;
                }
                }
                break;
            case POUND:
            case TIME:
            case MINUS:
            case LETTER:
            case DIGIT:
            case NAME:
            case EXPORT:
            case LOCAL:
            case DECLARE:
            case LSQUARE:
            case RSQUARE:
            case EQUALS:
            case PLUS:
            case DQUOTE:
            case LBRACE:
            case FOR:
            case IN:
            case DO:
            case DONE:
            case SELECT:
            case IF:
            case THEN:
            case ELSE:
            case FI:
            case ELIF:
            case WHILE:
            case UNTIL:
            case CASE:
            case ESAC:
            case TILDE:
            case ESC:
            case ESC_LT:
            case ESC_GT:
            case UNDERSCORE:
            case NUMBER:
            case DOLLAR:
            case SINGLE_QUOTED_STRING_TOKEN:
            case SLASH:
            case OTHER:
            case PCT:
            case PCTPCT:
            case DOT:
            case DOTDOT:
            case COLON:
            case COMMA:
            case AT:
            case ESC_RPAREN:
            case ESC_LPAREN:
            case ESC_RSQUARE:
            case ESC_LSQUARE:
            case ESC_DOLLAR:
            case ESC_TICK:
            case ESC_DQUOTE:
            case ESC_SQUOTE:
            case TIMES:
            case QMARK:
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt180=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // java_libbash.g:752:4: ( BANG )=> BANG
                    {
                    BANG596=(Token)match(input,BANG,FOLLOW_BANG_in_bracket_pattern_match_operator4954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG596);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 752:19: -> MATCH_ANY_EXCEPT
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MATCH_ANY_EXCEPT, "MATCH_ANY_EXCEPT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:753:4: ( CARET )=> CARET
                    {
                    CARET597=(Token)match(input,CARET,FOLLOW_CARET_in_bracket_pattern_match_operator4969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CARET.add(CARET597);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 753:21: -> MATCH_ANY_EXCEPT
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MATCH_ANY_EXCEPT, "MATCH_ANY_EXCEPT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:754:4: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 754:4: -> MATCH_ANY
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MATCH_ANY, "MATCH_ANY"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern_match_operator"

    public static class bracket_pattern_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern_part"
    // java_libbash.g:756:1: bracket_pattern_part : ( ( pattern_class_match )=> pattern_class_match | string_expr_part );
    public final java_libbashParser.bracket_pattern_part_return bracket_pattern_part() throws RecognitionException {
        java_libbashParser.bracket_pattern_part_return retval = new java_libbashParser.bracket_pattern_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.pattern_class_match_return pattern_class_match598 = null;

        java_libbashParser.string_expr_part_return string_expr_part599 = null;



        try {
            // java_libbash.g:757:2: ( ( pattern_class_match )=> pattern_class_match | string_expr_part )
            int alt181=2;
            alt181 = dfa181.predict(input);
            switch (alt181) {
                case 1 :
                    // java_libbash.g:757:4: ( pattern_class_match )=> pattern_class_match
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pattern_class_match_in_bracket_pattern_part4995);
                    pattern_class_match598=pattern_class_match();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_class_match598.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:758:4: string_expr_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_string_expr_part_in_bracket_pattern_part5000);
                    string_expr_part599=string_expr_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_expr_part599.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern_part"

    public static class bracket_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_pattern"
    // java_libbash.g:760:1: bracket_pattern : ( (~ RSQUARE )=> bracket_pattern_part )+ ;
    public final java_libbashParser.bracket_pattern_return bracket_pattern() throws RecognitionException {
        java_libbashParser.bracket_pattern_return retval = new java_libbashParser.bracket_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.bracket_pattern_part_return bracket_pattern_part600 = null;



        try {
            // java_libbash.g:761:2: ( ( (~ RSQUARE )=> bracket_pattern_part )+ )
            // java_libbash.g:761:4: ( (~ RSQUARE )=> bracket_pattern_part )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:761:4: ( (~ RSQUARE )=> bracket_pattern_part )+
            int cnt182=0;
            loop182:
            do {
                int alt182=2;
                alt182 = dfa182.predict(input);
                switch (alt182) {
            	case 1 :
            	    // java_libbash.g:761:5: (~ RSQUARE )=> bracket_pattern_part
            	    {
            	    pushFollow(FOLLOW_bracket_pattern_part_in_bracket_pattern5017);
            	    bracket_pattern_part600=bracket_pattern_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern_part600.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt182 >= 1 ) break loop182;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(182, input);
                        throw eee;
                }
                cnt182++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bracket_pattern"

    public static class pattern_class_match_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_class_match"
    // java_libbash.g:763:1: pattern_class_match : ( LSQUARE COLON NAME COLON RSQUARE -> ^( CHARACTER_CLASS NAME ) | LSQUARE EQUALS pattern_char EQUALS RSQUARE -> ^( EQUIVALENCE_CLASS pattern_char ) | LSQUARE DOT NAME DOT RSQUARE -> ^( COLLATING_SYMBOL NAME ) );
    public final java_libbashParser.pattern_class_match_return pattern_class_match() throws RecognitionException {
        java_libbashParser.pattern_class_match_return retval = new java_libbashParser.pattern_class_match_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE601=null;
        Token COLON602=null;
        Token NAME603=null;
        Token COLON604=null;
        Token RSQUARE605=null;
        Token LSQUARE606=null;
        Token EQUALS607=null;
        Token EQUALS609=null;
        Token RSQUARE610=null;
        Token LSQUARE611=null;
        Token DOT612=null;
        Token NAME613=null;
        Token DOT614=null;
        Token RSQUARE615=null;
        java_libbashParser.pattern_char_return pattern_char608 = null;


        CommonTree LSQUARE601_tree=null;
        CommonTree COLON602_tree=null;
        CommonTree NAME603_tree=null;
        CommonTree COLON604_tree=null;
        CommonTree RSQUARE605_tree=null;
        CommonTree LSQUARE606_tree=null;
        CommonTree EQUALS607_tree=null;
        CommonTree EQUALS609_tree=null;
        CommonTree RSQUARE610_tree=null;
        CommonTree LSQUARE611_tree=null;
        CommonTree DOT612_tree=null;
        CommonTree NAME613_tree=null;
        CommonTree DOT614_tree=null;
        CommonTree RSQUARE615_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_pattern_char=new RewriteRuleSubtreeStream(adaptor,"rule pattern_char");
        try {
            // java_libbash.g:764:2: ( LSQUARE COLON NAME COLON RSQUARE -> ^( CHARACTER_CLASS NAME ) | LSQUARE EQUALS pattern_char EQUALS RSQUARE -> ^( EQUIVALENCE_CLASS pattern_char ) | LSQUARE DOT NAME DOT RSQUARE -> ^( COLLATING_SYMBOL NAME ) )
            int alt183=3;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==LSQUARE) ) {
                switch ( input.LA(2) ) {
                case COLON:
                    {
                    alt183=1;
                    }
                    break;
                case EQUALS:
                    {
                    alt183=2;
                    }
                    break;
                case DOT:
                    {
                    alt183=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // java_libbash.g:764:4: LSQUARE COLON NAME COLON RSQUARE
                    {
                    LSQUARE601=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match5028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE601);

                    COLON602=(Token)match(input,COLON,FOLLOW_COLON_in_pattern_class_match5030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON602);

                    NAME603=(Token)match(input,NAME,FOLLOW_NAME_in_pattern_class_match5032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME603);

                    COLON604=(Token)match(input,COLON,FOLLOW_COLON_in_pattern_class_match5034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON604);

                    RSQUARE605=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match5036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE605);



                    // AST REWRITE
                    // elements: NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 764:37: -> ^( CHARACTER_CLASS NAME )
                    {
                        // java_libbash.g:764:40: ^( CHARACTER_CLASS NAME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CHARACTER_CLASS, "CHARACTER_CLASS"), root_1);

                        adaptor.addChild(root_1, stream_NAME.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:765:4: LSQUARE EQUALS pattern_char EQUALS RSQUARE
                    {
                    LSQUARE606=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match5049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE606);

                    EQUALS607=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_pattern_class_match5051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS607);

                    pushFollow(FOLLOW_pattern_char_in_pattern_class_match5053);
                    pattern_char608=pattern_char();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pattern_char.add(pattern_char608.getTree());
                    EQUALS609=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_pattern_class_match5055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS609);

                    RSQUARE610=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match5057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE610);



                    // AST REWRITE
                    // elements: pattern_char
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 765:47: -> ^( EQUIVALENCE_CLASS pattern_char )
                    {
                        // java_libbash.g:765:50: ^( EQUIVALENCE_CLASS pattern_char )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EQUIVALENCE_CLASS, "EQUIVALENCE_CLASS"), root_1);

                        adaptor.addChild(root_1, stream_pattern_char.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:766:4: LSQUARE DOT NAME DOT RSQUARE
                    {
                    LSQUARE611=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match5070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE611);

                    DOT612=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_class_match5072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT612);

                    NAME613=(Token)match(input,NAME,FOLLOW_NAME_in_pattern_class_match5074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME613);

                    DOT614=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_class_match5076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT614);

                    RSQUARE615=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match5078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE615);



                    // AST REWRITE
                    // elements: NAME
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 766:33: -> ^( COLLATING_SYMBOL NAME )
                    {
                        // java_libbash.g:766:36: ^( COLLATING_SYMBOL NAME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLLATING_SYMBOL, "COLLATING_SYMBOL"), root_1);

                        adaptor.addChild(root_1, stream_NAME.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_class_match"

    public static class pattern_char_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern_char"
    // java_libbash.g:768:1: pattern_char : ( LETTER | DIGIT | OTHER | QMARK | COLON | AT | SEMIC | POUND | SLASH | BANG | TIMES | COMMA | PIPE | AMP | MINUS | PLUS | PCT | LSQUARE | RSQUARE | RPAREN | LPAREN | RBRACE | LBRACE | DOLLAR | TICK | DOT | LESS_THAN | GREATER_THAN | SQUOTE | DQUOTE | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT );
    public final java_libbashParser.pattern_char_return pattern_char() throws RecognitionException {
        java_libbashParser.pattern_char_return retval = new java_libbashParser.pattern_char_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set616=null;

        CommonTree set616_tree=null;

        try {
            // java_libbash.g:769:2: ( LETTER | DIGIT | OTHER | QMARK | COLON | AT | SEMIC | POUND | SLASH | BANG | TIMES | COMMA | PIPE | AMP | MINUS | PLUS | PCT | LSQUARE | RSQUARE | RPAREN | LPAREN | RBRACE | LBRACE | DOLLAR | TICK | DOT | LESS_THAN | GREATER_THAN | SQUOTE | DQUOTE | AMP_LESS_THAN | AMP_GREATER_THAN | AMP_RSHIFT )
            // java_libbash.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set616=(Token)input.LT(1);
            if ( (input.LA(1)>=SEMIC && input.LA(1)<=POUND)||(input.LA(1)>=BANG && input.LA(1)<=PIPE)||(input.LA(1)>=MINUS && input.LA(1)<=DIGIT)||(input.LA(1)>=AMP_LESS_THAN && input.LA(1)<=AMP_RSHIFT)||(input.LA(1)>=LSQUARE && input.LA(1)<=RSQUARE)||(input.LA(1)>=PLUS && input.LA(1)<=RBRACE)||input.LA(1)==DOLLAR||(input.LA(1)>=TICK && input.LA(1)<=PCT)||input.LA(1)==DOT||input.LA(1)==COLON||(input.LA(1)>=COMMA && input.LA(1)<=AT)||(input.LA(1)>=TIMES && input.LA(1)<=QMARK)||input.LA(1)==SQUOTE ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set616));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pattern_char"

    public static class variable_reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_reference"
    // java_libbash.g:774:1: variable_reference : ( DOLLAR LBRACE parameter_expansion RBRACE -> ^( VAR_REF parameter_expansion ) | DOLLAR name -> ^( VAR_REF name ) | DOLLAR num -> ^( VAR_REF num ) | DOLLAR TIMES -> ^( VAR_REF TIMES ) | DOLLAR AT -> ^( VAR_REF AT ) | DOLLAR POUND -> ^( VAR_REF POUND ) | DOLLAR QMARK -> ^( VAR_REF QMARK ) | DOLLAR MINUS -> ^( VAR_REF MINUS ) | DOLLAR DOLLAR -> ^( VAR_REF DOLLAR ) | DOLLAR BANG -> ^( VAR_REF BANG ) );
    public final java_libbashParser.variable_reference_return variable_reference() throws RecognitionException {
        java_libbashParser.variable_reference_return retval = new java_libbashParser.variable_reference_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLAR617=null;
        Token LBRACE618=null;
        Token RBRACE620=null;
        Token DOLLAR621=null;
        Token DOLLAR623=null;
        Token DOLLAR625=null;
        Token TIMES626=null;
        Token DOLLAR627=null;
        Token AT628=null;
        Token DOLLAR629=null;
        Token POUND630=null;
        Token DOLLAR631=null;
        Token QMARK632=null;
        Token DOLLAR633=null;
        Token MINUS634=null;
        Token DOLLAR635=null;
        Token DOLLAR636=null;
        Token DOLLAR637=null;
        Token BANG638=null;
        java_libbashParser.parameter_expansion_return parameter_expansion619 = null;

        java_libbashParser.name_return name622 = null;

        java_libbashParser.num_return num624 = null;


        CommonTree DOLLAR617_tree=null;
        CommonTree LBRACE618_tree=null;
        CommonTree RBRACE620_tree=null;
        CommonTree DOLLAR621_tree=null;
        CommonTree DOLLAR623_tree=null;
        CommonTree DOLLAR625_tree=null;
        CommonTree TIMES626_tree=null;
        CommonTree DOLLAR627_tree=null;
        CommonTree AT628_tree=null;
        CommonTree DOLLAR629_tree=null;
        CommonTree POUND630_tree=null;
        CommonTree DOLLAR631_tree=null;
        CommonTree QMARK632_tree=null;
        CommonTree DOLLAR633_tree=null;
        CommonTree MINUS634_tree=null;
        CommonTree DOLLAR635_tree=null;
        CommonTree DOLLAR636_tree=null;
        CommonTree DOLLAR637_tree=null;
        CommonTree BANG638_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleSubtreeStream stream_num=new RewriteRuleSubtreeStream(adaptor,"rule num");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_parameter_expansion=new RewriteRuleSubtreeStream(adaptor,"rule parameter_expansion");
        try {
            // java_libbash.g:775:2: ( DOLLAR LBRACE parameter_expansion RBRACE -> ^( VAR_REF parameter_expansion ) | DOLLAR name -> ^( VAR_REF name ) | DOLLAR num -> ^( VAR_REF num ) | DOLLAR TIMES -> ^( VAR_REF TIMES ) | DOLLAR AT -> ^( VAR_REF AT ) | DOLLAR POUND -> ^( VAR_REF POUND ) | DOLLAR QMARK -> ^( VAR_REF QMARK ) | DOLLAR MINUS -> ^( VAR_REF MINUS ) | DOLLAR DOLLAR -> ^( VAR_REF DOLLAR ) | DOLLAR BANG -> ^( VAR_REF BANG ) )
            int alt184=10;
            alt184 = dfa184.predict(input);
            switch (alt184) {
                case 1 :
                    // java_libbash.g:775:4: DOLLAR LBRACE parameter_expansion RBRACE
                    {
                    DOLLAR617=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR617);

                    LBRACE618=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_variable_reference5179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE618);

                    pushFollow(FOLLOW_parameter_expansion_in_variable_reference5181);
                    parameter_expansion619=parameter_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter_expansion.add(parameter_expansion619.getTree());
                    RBRACE620=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_variable_reference5183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE620);



                    // AST REWRITE
                    // elements: parameter_expansion
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 775:45: -> ^( VAR_REF parameter_expansion )
                    {
                        // java_libbash.g:775:48: ^( VAR_REF parameter_expansion )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_parameter_expansion.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:776:4: DOLLAR name
                    {
                    DOLLAR621=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR621);

                    pushFollow(FOLLOW_name_in_variable_reference5198);
                    name622=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name622.getTree());


                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 776:16: -> ^( VAR_REF name )
                    {
                        // java_libbash.g:776:19: ^( VAR_REF name )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:777:4: DOLLAR num
                    {
                    DOLLAR623=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR623);

                    pushFollow(FOLLOW_num_in_variable_reference5213);
                    num624=num();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_num.add(num624.getTree());


                    // AST REWRITE
                    // elements: num
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 777:15: -> ^( VAR_REF num )
                    {
                        // java_libbash.g:777:18: ^( VAR_REF num )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_num.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:778:4: DOLLAR TIMES
                    {
                    DOLLAR625=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR625);

                    TIMES626=(Token)match(input,TIMES,FOLLOW_TIMES_in_variable_reference5228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(TIMES626);



                    // AST REWRITE
                    // elements: TIMES
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 778:17: -> ^( VAR_REF TIMES )
                    {
                        // java_libbash.g:778:20: ^( VAR_REF TIMES )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_TIMES.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:779:4: DOLLAR AT
                    {
                    DOLLAR627=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR627);

                    AT628=(Token)match(input,AT,FOLLOW_AT_in_variable_reference5243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT628);



                    // AST REWRITE
                    // elements: AT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 779:14: -> ^( VAR_REF AT )
                    {
                        // java_libbash.g:779:17: ^( VAR_REF AT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_AT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:780:4: DOLLAR POUND
                    {
                    DOLLAR629=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5256); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR629);

                    POUND630=(Token)match(input,POUND,FOLLOW_POUND_in_variable_reference5258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND630);



                    // AST REWRITE
                    // elements: POUND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 780:17: -> ^( VAR_REF POUND )
                    {
                        // java_libbash.g:780:20: ^( VAR_REF POUND )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_POUND.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // java_libbash.g:781:4: DOLLAR QMARK
                    {
                    DOLLAR631=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR631);

                    QMARK632=(Token)match(input,QMARK,FOLLOW_QMARK_in_variable_reference5273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QMARK.add(QMARK632);



                    // AST REWRITE
                    // elements: QMARK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 781:17: -> ^( VAR_REF QMARK )
                    {
                        // java_libbash.g:781:20: ^( VAR_REF QMARK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_QMARK.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // java_libbash.g:782:4: DOLLAR MINUS
                    {
                    DOLLAR633=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR633);

                    MINUS634=(Token)match(input,MINUS,FOLLOW_MINUS_in_variable_reference5288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS634);



                    // AST REWRITE
                    // elements: MINUS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 782:17: -> ^( VAR_REF MINUS )
                    {
                        // java_libbash.g:782:20: ^( VAR_REF MINUS )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_MINUS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // java_libbash.g:783:4: DOLLAR DOLLAR
                    {
                    DOLLAR635=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR635);

                    DOLLAR636=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR636);



                    // AST REWRITE
                    // elements: DOLLAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 783:18: -> ^( VAR_REF DOLLAR )
                    {
                        // java_libbash.g:783:21: ^( VAR_REF DOLLAR )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_DOLLAR.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // java_libbash.g:784:4: DOLLAR BANG
                    {
                    DOLLAR637=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_reference5316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR637);

                    BANG638=(Token)match(input,BANG,FOLLOW_BANG_in_variable_reference5318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG638);



                    // AST REWRITE
                    // elements: BANG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 784:16: -> ^( VAR_REF BANG )
                    {
                        // java_libbash.g:784:19: ^( VAR_REF BANG )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_BANG.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_reference"

    public static class parameter_expansion_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_expansion"
    // java_libbash.g:786:1: parameter_expansion : ( variable_name ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name ) | BANG variable_name_for_bang ( TIMES -> ^( BANG variable_name_for_bang TIMES ) | AT -> ^( BANG variable_name_for_bang AT ) | LSQUARE (op= TIMES | op= AT ) RSQUARE -> ^( LIST_EXPAND variable_name_for_bang $op) ) | {...}? => variable_size_ref );
    public final java_libbashParser.parameter_expansion_return parameter_expansion() throws RecognitionException {
        java_libbashParser.parameter_expansion_return retval = new java_libbashParser.parameter_expansion_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        Token COLON642=null;
        Token BLANK643=null;
        Token COLON644=null;
        Token BLANK645=null;
        Token COLON646=null;
        Token BLANK647=null;
        Token SLASH652=null;
        Token BLANK654=null;
        Token BANG655=null;
        Token TIMES657=null;
        Token AT658=null;
        Token LSQUARE659=null;
        Token RSQUARE660=null;
        java_libbashParser.explicit_arithmetic_return os = null;

        java_libbashParser.explicit_arithmetic_return len = null;

        java_libbashParser.variable_name_return variable_name639 = null;

        java_libbashParser.parameter_value_operator_return parameter_value_operator640 = null;

        java_libbashParser.parameter_expansion_value_return parameter_expansion_value641 = null;

        java_libbashParser.parameter_delete_operator_return parameter_delete_operator648 = null;

        java_libbashParser.parameter_delete_pattern_return parameter_delete_pattern649 = null;

        java_libbashParser.parameter_replace_operator_return parameter_replace_operator650 = null;

        java_libbashParser.parameter_replace_pattern_return parameter_replace_pattern651 = null;

        java_libbashParser.parameter_expansion_value_return parameter_expansion_value653 = null;

        java_libbashParser.variable_name_for_bang_return variable_name_for_bang656 = null;

        java_libbashParser.variable_size_ref_return variable_size_ref661 = null;


        CommonTree op_tree=null;
        CommonTree COLON642_tree=null;
        CommonTree BLANK643_tree=null;
        CommonTree COLON644_tree=null;
        CommonTree BLANK645_tree=null;
        CommonTree COLON646_tree=null;
        CommonTree BLANK647_tree=null;
        CommonTree SLASH652_tree=null;
        CommonTree BLANK654_tree=null;
        CommonTree BANG655_tree=null;
        CommonTree TIMES657_tree=null;
        CommonTree AT658_tree=null;
        CommonTree LSQUARE659_tree=null;
        CommonTree RSQUARE660_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_SLASH=new RewriteRuleTokenStream(adaptor,"token SLASH");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_variable_name_for_bang=new RewriteRuleSubtreeStream(adaptor,"rule variable_name_for_bang");
        RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");
        RewriteRuleSubtreeStream stream_parameter_replace_operator=new RewriteRuleSubtreeStream(adaptor,"rule parameter_replace_operator");
        RewriteRuleSubtreeStream stream_explicit_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule explicit_arithmetic");
        RewriteRuleSubtreeStream stream_parameter_delete_operator=new RewriteRuleSubtreeStream(adaptor,"rule parameter_delete_operator");
        RewriteRuleSubtreeStream stream_parameter_delete_pattern=new RewriteRuleSubtreeStream(adaptor,"rule parameter_delete_pattern");
        RewriteRuleSubtreeStream stream_parameter_replace_pattern=new RewriteRuleSubtreeStream(adaptor,"rule parameter_replace_pattern");
        RewriteRuleSubtreeStream stream_parameter_value_operator=new RewriteRuleSubtreeStream(adaptor,"rule parameter_value_operator");
        RewriteRuleSubtreeStream stream_parameter_expansion_value=new RewriteRuleSubtreeStream(adaptor,"rule parameter_expansion_value");
        try {
            // java_libbash.g:787:2: ( variable_name ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name ) | BANG variable_name_for_bang ( TIMES -> ^( BANG variable_name_for_bang TIMES ) | AT -> ^( BANG variable_name_for_bang AT ) | LSQUARE (op= TIMES | op= AT ) RSQUARE -> ^( LIST_EXPAND variable_name_for_bang $op) ) | {...}? => variable_size_ref )
            int alt195=3;
            alt195 = dfa195.predict(input);
            switch (alt195) {
                case 1 :
                    // java_libbash.g:787:4: variable_name ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name )
                    {
                    pushFollow(FOLLOW_variable_name_in_parameter_expansion5335);
                    variable_name639=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name.add(variable_name639.getTree());
                    // java_libbash.g:788:3: ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name )
                    int alt192=5;
                    alt192 = dfa192.predict(input);
                    switch (alt192) {
                        case 1 :
                            // java_libbash.g:789:4: ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value
                            {
                            pushFollow(FOLLOW_parameter_value_operator_in_parameter_expansion5350);
                            parameter_value_operator640=parameter_value_operator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_value_operator.add(parameter_value_operator640.getTree());
                            pushFollow(FOLLOW_parameter_expansion_value_in_parameter_expansion5352);
                            parameter_expansion_value641=parameter_expansion_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_expansion_value.add(parameter_expansion_value641.getTree());


                            // AST REWRITE
                            // elements: parameter_value_operator, parameter_expansion_value, variable_name
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 790:5: -> ^( parameter_value_operator variable_name parameter_expansion_value )
                            {
                                // java_libbash.g:790:8: ^( parameter_value_operator variable_name parameter_expansion_value )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_parameter_value_operator.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_variable_name.nextTree());
                                adaptor.addChild(root_1, stream_parameter_expansion_value.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:791:6: COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) )
                            {
                            COLON642=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_expansion5373); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON642);

                            // java_libbash.g:791:12: ( BLANK )?
                            int alt185=2;
                            int LA185_0 = input.LA(1);

                            if ( (LA185_0==BLANK) ) {
                                alt185=1;
                            }
                            switch (alt185) {
                                case 1 :
                                    // java_libbash.g:791:12: BLANK
                                    {
                                    BLANK643=(Token)match(input,BLANK,FOLLOW_BLANK_in_parameter_expansion5375); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK643);


                                    }
                                    break;

                            }

                            // java_libbash.g:792:5: (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) )
                            int alt189=2;
                            int LA189_0 = input.LA(1);

                            if ( (LA189_0==BANG||(LA189_0>=MINUS && LA189_0<=LETTER)||LA189_0==LPAREN||LA189_0==DIGIT||LA189_0==NAME||(LA189_0>=PLUS && LA189_0<=DQUOTE)||LA189_0==TILDE||(LA189_0>=UNDERSCORE && LA189_0<=DOLLAR)||(LA189_0>=COMMAND_SUBSTITUTION_PAREN && LA189_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                                alt189=1;
                            }
                            else if ( (LA189_0==COLON) ) {
                                alt189=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 189, 0, input);

                                throw nvae;
                            }
                            switch (alt189) {
                                case 1 :
                                    // java_libbash.g:793:6: os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )?
                                    {
                                    pushFollow(FOLLOW_explicit_arithmetic_in_parameter_expansion5391);
                                    os=explicit_arithmetic();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_explicit_arithmetic.add(os.getTree());
                                    // java_libbash.g:793:29: ( COLON ( BLANK )? len= explicit_arithmetic )?
                                    int alt187=2;
                                    int LA187_0 = input.LA(1);

                                    if ( (LA187_0==COLON) ) {
                                        alt187=1;
                                    }
                                    switch (alt187) {
                                        case 1 :
                                            // java_libbash.g:793:30: COLON ( BLANK )? len= explicit_arithmetic
                                            {
                                            COLON644=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_expansion5394); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_COLON.add(COLON644);

                                            // java_libbash.g:793:36: ( BLANK )?
                                            int alt186=2;
                                            int LA186_0 = input.LA(1);

                                            if ( (LA186_0==BLANK) ) {
                                                alt186=1;
                                            }
                                            switch (alt186) {
                                                case 1 :
                                                    // java_libbash.g:793:36: BLANK
                                                    {
                                                    BLANK645=(Token)match(input,BLANK,FOLLOW_BLANK_in_parameter_expansion5396); if (state.failed) return retval; 
                                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK645);


                                                    }
                                                    break;

                                            }

                                            pushFollow(FOLLOW_explicit_arithmetic_in_parameter_expansion5401);
                                            len=explicit_arithmetic();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) stream_explicit_arithmetic.add(len.getTree());

                                            }
                                            break;

                                    }



                                    // AST REWRITE
                                    // elements: len, os, variable_name
                                    // token labels: 
                                    // rule labels: os, retval, len
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_os=new RewriteRuleSubtreeStream(adaptor,"rule os",os!=null?os.tree:null);
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                                    RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 797:7: -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? )
                                    {
                                        // java_libbash.g:797:10: ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_1);

                                        adaptor.addChild(root_1, stream_variable_name.nextTree());
                                        // java_libbash.g:797:33: ^( OFFSET $os)
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_2);

                                        adaptor.addChild(root_2, stream_os.nextTree());

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        // java_libbash.g:797:47: ( ^( OFFSET ^( $len) ) )?
                                        if ( stream_len.hasNext() ) {
                                            // java_libbash.g:797:47: ^( OFFSET ^( $len) )
                                            {
                                            CommonTree root_2 = (CommonTree)adaptor.nil();
                                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_2);

                                            // java_libbash.g:797:56: ^( $len)
                                            {
                                            CommonTree root_3 = (CommonTree)adaptor.nil();
                                            root_3 = (CommonTree)adaptor.becomeRoot(stream_len.nextNode(), root_3);

                                            adaptor.addChild(root_2, root_3);
                                            }

                                            adaptor.addChild(root_1, root_2);
                                            }

                                        }
                                        stream_len.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // java_libbash.g:798:8: COLON ( BLANK )? len= explicit_arithmetic
                                    {
                                    COLON646=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_expansion5446); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(COLON646);

                                    // java_libbash.g:798:14: ( BLANK )?
                                    int alt188=2;
                                    int LA188_0 = input.LA(1);

                                    if ( (LA188_0==BLANK) ) {
                                        alt188=1;
                                    }
                                    switch (alt188) {
                                        case 1 :
                                            // java_libbash.g:798:14: BLANK
                                            {
                                            BLANK647=(Token)match(input,BLANK,FOLLOW_BLANK_in_parameter_expansion5448); if (state.failed) return retval; 
                                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK647);


                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_explicit_arithmetic_in_parameter_expansion5453);
                                    len=explicit_arithmetic();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_explicit_arithmetic.add(len.getTree());


                                    // AST REWRITE
                                    // elements: variable_name, len
                                    // token labels: 
                                    // rule labels: retval, len
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                                    RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.tree:null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 799:7: -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? )
                                    {
                                        // java_libbash.g:799:10: ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? )
                                        {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_1);

                                        adaptor.addChild(root_1, stream_variable_name.nextTree());
                                        // java_libbash.g:799:33: ^( OFFSET NUMBER[\"0\"] )
                                        {
                                        CommonTree root_2 = (CommonTree)adaptor.nil();
                                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_2);

                                        adaptor.addChild(root_2, (CommonTree)adaptor.create(NUMBER, "0"));

                                        adaptor.addChild(root_1, root_2);
                                        }
                                        // java_libbash.g:799:55: ( ^( OFFSET ^( $len) ) )?
                                        if ( stream_len.hasNext() ) {
                                            // java_libbash.g:799:55: ^( OFFSET ^( $len) )
                                            {
                                            CommonTree root_2 = (CommonTree)adaptor.nil();
                                            root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_2);

                                            // java_libbash.g:799:64: ^( $len)
                                            {
                                            CommonTree root_3 = (CommonTree)adaptor.nil();
                                            root_3 = (CommonTree)adaptor.becomeRoot(stream_len.nextNode(), root_3);

                                            adaptor.addChild(root_2, root_3);
                                            }

                                            adaptor.addChild(root_1, root_2);
                                            }

                                        }
                                        stream_len.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 3 :
                            // java_libbash.g:801:6: parameter_delete_operator parameter_delete_pattern
                            {
                            pushFollow(FOLLOW_parameter_delete_operator_in_parameter_expansion5497);
                            parameter_delete_operator648=parameter_delete_operator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_delete_operator.add(parameter_delete_operator648.getTree());
                            pushFollow(FOLLOW_parameter_delete_pattern_in_parameter_expansion5499);
                            parameter_delete_pattern649=parameter_delete_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_delete_pattern.add(parameter_delete_pattern649.getTree());


                            // AST REWRITE
                            // elements: parameter_delete_pattern, parameter_delete_operator, variable_name
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 802:5: -> ^( parameter_delete_operator variable_name parameter_delete_pattern )
                            {
                                // java_libbash.g:802:8: ^( parameter_delete_operator variable_name parameter_delete_pattern )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_parameter_delete_operator.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_variable_name.nextTree());
                                adaptor.addChild(root_1, stream_parameter_delete_pattern.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // java_libbash.g:803:6: parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )?
                            {
                            pushFollow(FOLLOW_parameter_replace_operator_in_parameter_expansion5520);
                            parameter_replace_operator650=parameter_replace_operator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_replace_operator.add(parameter_replace_operator650.getTree());
                            pushFollow(FOLLOW_parameter_replace_pattern_in_parameter_expansion5522);
                            parameter_replace_pattern651=parameter_replace_pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_parameter_replace_pattern.add(parameter_replace_pattern651.getTree());
                            // java_libbash.g:803:59: ( SLASH parameter_expansion_value )?
                            int alt190=2;
                            int LA190_0 = input.LA(1);

                            if ( (LA190_0==SLASH) ) {
                                alt190=1;
                            }
                            switch (alt190) {
                                case 1 :
                                    // java_libbash.g:803:60: SLASH parameter_expansion_value
                                    {
                                    SLASH652=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_expansion5525); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH652);

                                    pushFollow(FOLLOW_parameter_expansion_value_in_parameter_expansion5527);
                                    parameter_expansion_value653=parameter_expansion_value();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_parameter_expansion_value.add(parameter_expansion_value653.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: parameter_expansion_value, variable_name, parameter_replace_operator, parameter_replace_pattern
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 804:5: -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? )
                            {
                                // java_libbash.g:804:8: ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_parameter_replace_operator.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_variable_name.nextTree());
                                adaptor.addChild(root_1, stream_parameter_replace_pattern.nextTree());
                                // java_libbash.g:804:77: ( parameter_expansion_value )?
                                if ( stream_parameter_expansion_value.hasNext() ) {
                                    adaptor.addChild(root_1, stream_parameter_expansion_value.nextTree());

                                }
                                stream_parameter_expansion_value.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // java_libbash.g:805:6: ( BLANK )?
                            {
                            // java_libbash.g:805:6: ( BLANK )?
                            int alt191=2;
                            int LA191_0 = input.LA(1);

                            if ( (LA191_0==BLANK) ) {
                                alt191=1;
                            }
                            switch (alt191) {
                                case 1 :
                                    // java_libbash.g:805:6: BLANK
                                    {
                                    BLANK654=(Token)match(input,BLANK,FOLLOW_BLANK_in_parameter_expansion5553); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK654);


                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: variable_name
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 805:13: -> variable_name
                            {
                                adaptor.addChild(root_0, stream_variable_name.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // java_libbash.g:807:5: BANG variable_name_for_bang ( TIMES -> ^( BANG variable_name_for_bang TIMES ) | AT -> ^( BANG variable_name_for_bang AT ) | LSQUARE (op= TIMES | op= AT ) RSQUARE -> ^( LIST_EXPAND variable_name_for_bang $op) )
                    {
                    BANG655=(Token)match(input,BANG,FOLLOW_BANG_in_parameter_expansion5568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG655);

                    pushFollow(FOLLOW_variable_name_for_bang_in_parameter_expansion5570);
                    variable_name_for_bang656=variable_name_for_bang();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name_for_bang.add(variable_name_for_bang656.getTree());
                    // java_libbash.g:808:4: ( TIMES -> ^( BANG variable_name_for_bang TIMES ) | AT -> ^( BANG variable_name_for_bang AT ) | LSQUARE (op= TIMES | op= AT ) RSQUARE -> ^( LIST_EXPAND variable_name_for_bang $op) )
                    int alt194=3;
                    switch ( input.LA(1) ) {
                    case TIMES:
                        {
                        alt194=1;
                        }
                        break;
                    case AT:
                        {
                        alt194=2;
                        }
                        break;
                    case LSQUARE:
                        {
                        alt194=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;
                    }

                    switch (alt194) {
                        case 1 :
                            // java_libbash.g:809:5: TIMES
                            {
                            TIMES657=(Token)match(input,TIMES,FOLLOW_TIMES_in_parameter_expansion5581); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_TIMES.add(TIMES657);



                            // AST REWRITE
                            // elements: variable_name_for_bang, TIMES, BANG
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 809:11: -> ^( BANG variable_name_for_bang TIMES )
                            {
                                // java_libbash.g:809:14: ^( BANG variable_name_for_bang TIMES )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BANG.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_variable_name_for_bang.nextTree());
                                adaptor.addChild(root_1, stream_TIMES.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:810:7: AT
                            {
                            AT658=(Token)match(input,AT,FOLLOW_AT_in_parameter_expansion5599); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AT.add(AT658);



                            // AST REWRITE
                            // elements: AT, variable_name_for_bang, BANG
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 810:10: -> ^( BANG variable_name_for_bang AT )
                            {
                                // java_libbash.g:810:13: ^( BANG variable_name_for_bang AT )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BANG.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_variable_name_for_bang.nextTree());
                                adaptor.addChild(root_1, stream_AT.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // java_libbash.g:811:7: LSQUARE (op= TIMES | op= AT ) RSQUARE
                            {
                            LSQUARE659=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_parameter_expansion5617); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE659);

                            // java_libbash.g:811:15: (op= TIMES | op= AT )
                            int alt193=2;
                            int LA193_0 = input.LA(1);

                            if ( (LA193_0==TIMES) ) {
                                alt193=1;
                            }
                            else if ( (LA193_0==AT) ) {
                                alt193=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 193, 0, input);

                                throw nvae;
                            }
                            switch (alt193) {
                                case 1 :
                                    // java_libbash.g:811:16: op= TIMES
                                    {
                                    op=(Token)match(input,TIMES,FOLLOW_TIMES_in_parameter_expansion5622); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_TIMES.add(op);


                                    }
                                    break;
                                case 2 :
                                    // java_libbash.g:811:25: op= AT
                                    {
                                    op=(Token)match(input,AT,FOLLOW_AT_in_parameter_expansion5626); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_AT.add(op);


                                    }
                                    break;

                            }

                            RSQUARE660=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_parameter_expansion5629); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE660);



                            // AST REWRITE
                            // elements: variable_name_for_bang, op
                            // token labels: op
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_op=new RewriteRuleTokenStream(adaptor,"token op",op);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 811:40: -> ^( LIST_EXPAND variable_name_for_bang $op)
                            {
                                // java_libbash.g:811:43: ^( LIST_EXPAND variable_name_for_bang $op)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_EXPAND, "LIST_EXPAND"), root_1);

                                adaptor.addChild(root_1, stream_variable_name_for_bang.nextTree());
                                adaptor.addChild(root_1, stream_op.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // java_libbash.g:813:5: {...}? => variable_size_ref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((LA(1) == POUND && LA(2) != RBRACE )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_expansion", "LA(1) == POUND && LA(2) != RBRACE ");
                    }
                    pushFollow(FOLLOW_variable_size_ref_in_parameter_expansion5655);
                    variable_size_ref661=variable_size_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_size_ref661.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_expansion"

    public static class parameter_delete_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_delete_operator"
    // java_libbash.g:814:1: parameter_delete_operator : ( ( POUND POUND )=> POUND POUND -> REPLACE_AT_START | POUND -> LAZY_REMOVE_AT_START | PCT -> LAZY_REMOVE_AT_END | PCTPCT -> REPLACE_AT_END );
    public final java_libbashParser.parameter_delete_operator_return parameter_delete_operator() throws RecognitionException {
        java_libbashParser.parameter_delete_operator_return retval = new java_libbashParser.parameter_delete_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token POUND662=null;
        Token POUND663=null;
        Token POUND664=null;
        Token PCT665=null;
        Token PCTPCT666=null;

        CommonTree POUND662_tree=null;
        CommonTree POUND663_tree=null;
        CommonTree POUND664_tree=null;
        CommonTree PCT665_tree=null;
        CommonTree PCTPCT666_tree=null;
        RewriteRuleTokenStream stream_PCTPCT=new RewriteRuleTokenStream(adaptor,"token PCTPCT");
        RewriteRuleTokenStream stream_PCT=new RewriteRuleTokenStream(adaptor,"token PCT");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");

        try {
            // java_libbash.g:815:2: ( ( POUND POUND )=> POUND POUND -> REPLACE_AT_START | POUND -> LAZY_REMOVE_AT_START | PCT -> LAZY_REMOVE_AT_END | PCTPCT -> REPLACE_AT_END )
            int alt196=4;
            switch ( input.LA(1) ) {
            case POUND:
                {
                int LA196_1 = input.LA(2);

                if ( (LA196_1==POUND) ) {
                    int LA196_4 = input.LA(3);

                    if ( (synpred63_java_libbash()) ) {
                        alt196=1;
                    }
                    else if ( (true) ) {
                        alt196=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 196, 4, input);

                        throw nvae;
                    }
                }
                else if ( ((LA196_1>=ANSI_C_QUOTING && LA196_1<=AMP)||(LA196_1>=LOGICAND && LA196_1<=CONTINUE_LINE)) ) {
                    alt196=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 1, input);

                    throw nvae;
                }
                }
                break;
            case PCT:
                {
                alt196=3;
                }
                break;
            case PCTPCT:
                {
                alt196=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // java_libbash.g:815:4: ( POUND POUND )=> POUND POUND
                    {
                    POUND662=(Token)match(input,POUND,FOLLOW_POUND_in_parameter_delete_operator5671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND662);

                    POUND663=(Token)match(input,POUND,FOLLOW_POUND_in_parameter_delete_operator5673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND663);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 815:33: -> REPLACE_AT_START
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_AT_START, "REPLACE_AT_START"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:816:4: POUND
                    {
                    POUND664=(Token)match(input,POUND,FOLLOW_POUND_in_parameter_delete_operator5682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND664);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 816:10: -> LAZY_REMOVE_AT_START
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LAZY_REMOVE_AT_START, "LAZY_REMOVE_AT_START"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:817:4: PCT
                    {
                    PCT665=(Token)match(input,PCT,FOLLOW_PCT_in_parameter_delete_operator5691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PCT.add(PCT665);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 817:8: -> LAZY_REMOVE_AT_END
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LAZY_REMOVE_AT_END, "LAZY_REMOVE_AT_END"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:818:4: PCTPCT
                    {
                    PCTPCT666=(Token)match(input,PCTPCT,FOLLOW_PCTPCT_in_parameter_delete_operator5700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PCTPCT.add(PCTPCT666);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 818:11: -> REPLACE_AT_END
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_AT_END, "REPLACE_AT_END"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_delete_operator"

    public static class parameter_value_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_value_operator"
    // java_libbash.g:819:1: parameter_value_operator : ( COLON MINUS -> USE_DEFAULT_WHEN_UNSET_OR_NULL | COLON EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL | COLON QMARK -> DISPLAY_ERROR_WHEN_UNSET_OR_NULL | COLON PLUS -> USE_ALTERNATE_WHEN_UNSET_OR_NULL | MINUS -> USE_DEFAULT_WHEN_UNSET | EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET | QMARK -> DISPLAY_ERROR_WHEN_UNSET | PLUS -> USE_ALTERNATE_WHEN_UNSET );
    public final java_libbashParser.parameter_value_operator_return parameter_value_operator() throws RecognitionException {
        java_libbashParser.parameter_value_operator_return retval = new java_libbashParser.parameter_value_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON667=null;
        Token MINUS668=null;
        Token COLON669=null;
        Token EQUALS670=null;
        Token COLON671=null;
        Token QMARK672=null;
        Token COLON673=null;
        Token PLUS674=null;
        Token MINUS675=null;
        Token EQUALS676=null;
        Token QMARK677=null;
        Token PLUS678=null;

        CommonTree COLON667_tree=null;
        CommonTree MINUS668_tree=null;
        CommonTree COLON669_tree=null;
        CommonTree EQUALS670_tree=null;
        CommonTree COLON671_tree=null;
        CommonTree QMARK672_tree=null;
        CommonTree COLON673_tree=null;
        CommonTree PLUS674_tree=null;
        CommonTree MINUS675_tree=null;
        CommonTree EQUALS676_tree=null;
        CommonTree QMARK677_tree=null;
        CommonTree PLUS678_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");

        try {
            // java_libbash.g:820:2: ( COLON MINUS -> USE_DEFAULT_WHEN_UNSET_OR_NULL | COLON EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL | COLON QMARK -> DISPLAY_ERROR_WHEN_UNSET_OR_NULL | COLON PLUS -> USE_ALTERNATE_WHEN_UNSET_OR_NULL | MINUS -> USE_DEFAULT_WHEN_UNSET | EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET | QMARK -> DISPLAY_ERROR_WHEN_UNSET | PLUS -> USE_ALTERNATE_WHEN_UNSET )
            int alt197=8;
            alt197 = dfa197.predict(input);
            switch (alt197) {
                case 1 :
                    // java_libbash.g:820:4: COLON MINUS
                    {
                    COLON667=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_value_operator5712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON667);

                    MINUS668=(Token)match(input,MINUS,FOLLOW_MINUS_in_parameter_value_operator5714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS668);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 820:16: -> USE_DEFAULT_WHEN_UNSET_OR_NULL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(USE_DEFAULT_WHEN_UNSET_OR_NULL, "USE_DEFAULT_WHEN_UNSET_OR_NULL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:821:4: COLON EQUALS
                    {
                    COLON669=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_value_operator5723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON669);

                    EQUALS670=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_parameter_value_operator5725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS670);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 821:17: -> ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL, "ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:822:4: COLON QMARK
                    {
                    COLON671=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_value_operator5734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON671);

                    QMARK672=(Token)match(input,QMARK,FOLLOW_QMARK_in_parameter_value_operator5736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QMARK.add(QMARK672);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 822:16: -> DISPLAY_ERROR_WHEN_UNSET_OR_NULL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DISPLAY_ERROR_WHEN_UNSET_OR_NULL, "DISPLAY_ERROR_WHEN_UNSET_OR_NULL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:823:4: COLON PLUS
                    {
                    COLON673=(Token)match(input,COLON,FOLLOW_COLON_in_parameter_value_operator5745); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON673);

                    PLUS674=(Token)match(input,PLUS,FOLLOW_PLUS_in_parameter_value_operator5747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS674);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 823:15: -> USE_ALTERNATE_WHEN_UNSET_OR_NULL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(USE_ALTERNATE_WHEN_UNSET_OR_NULL, "USE_ALTERNATE_WHEN_UNSET_OR_NULL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:824:4: MINUS
                    {
                    MINUS675=(Token)match(input,MINUS,FOLLOW_MINUS_in_parameter_value_operator5756); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS675);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 824:10: -> USE_DEFAULT_WHEN_UNSET
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(USE_DEFAULT_WHEN_UNSET, "USE_DEFAULT_WHEN_UNSET"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:825:4: EQUALS
                    {
                    EQUALS676=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_parameter_value_operator5765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS676);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 825:11: -> ASSIGN_DEFAULT_WHEN_UNSET
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ASSIGN_DEFAULT_WHEN_UNSET, "ASSIGN_DEFAULT_WHEN_UNSET"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // java_libbash.g:826:4: QMARK
                    {
                    QMARK677=(Token)match(input,QMARK,FOLLOW_QMARK_in_parameter_value_operator5774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QMARK.add(QMARK677);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 826:10: -> DISPLAY_ERROR_WHEN_UNSET
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DISPLAY_ERROR_WHEN_UNSET, "DISPLAY_ERROR_WHEN_UNSET"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // java_libbash.g:827:4: PLUS
                    {
                    PLUS678=(Token)match(input,PLUS,FOLLOW_PLUS_in_parameter_value_operator5783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS678);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 827:9: -> USE_ALTERNATE_WHEN_UNSET
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(USE_ALTERNATE_WHEN_UNSET, "USE_ALTERNATE_WHEN_UNSET"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_value_operator"

    public static class parameter_replace_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_replace_pattern"
    // java_libbash.g:828:1: parameter_replace_pattern : ( ( SLASH )=> -> ^( STRING NAME ) | ( (~ SLASH )=> parameter_pattern_part )+ -> ^( STRING ( parameter_pattern_part )+ ) );
    public final java_libbashParser.parameter_replace_pattern_return parameter_replace_pattern() throws RecognitionException {
        java_libbashParser.parameter_replace_pattern_return retval = new java_libbashParser.parameter_replace_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.parameter_pattern_part_return parameter_pattern_part679 = null;


        RewriteRuleSubtreeStream stream_parameter_pattern_part=new RewriteRuleSubtreeStream(adaptor,"rule parameter_pattern_part");
        try {
            // java_libbash.g:829:2: ( ( SLASH )=> -> ^( STRING NAME ) | ( (~ SLASH )=> parameter_pattern_part )+ -> ^( STRING ( parameter_pattern_part )+ ) )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==SLASH) ) {
                int LA199_1 = input.LA(2);

                if ( (synpred64_java_libbash()) ) {
                    alt199=1;
                }
                else if ( (true) ) {
                    alt199=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==RBRACE) && ((is_special_token(LA(1))))) {
                int LA199_2 = input.LA(2);

                if ( (synpred64_java_libbash()) ) {
                    alt199=1;
                }
                else if ( ((is_special_token(LA(1)))) ) {
                    alt199=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==POUND||LA199_0==BANG||(LA199_0>=TIME && LA199_0<=LETTER)||LA199_0==DIGIT||(LA199_0>=NAME && LA199_0<=LBRACE)||(LA199_0>=FOR && LA199_0<=DONE)||(LA199_0>=SELECT && LA199_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA199_0>=OTHER && LA199_0<=QMARK)||(LA199_0>=COMMAND_SUBSTITUTION_PAREN && LA199_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                alt199=2;
            }
            else if ( ((LA199_0>=ANSI_C_QUOTING && LA199_0<=AMP)||(LA199_0>=LOGICAND && LA199_0<=LOGICOR)||LA199_0==PIPE||(LA199_0>=LESS_THAN && LA199_0<=RPAREN)||(LA199_0>=HERE_STRING_OP && LA199_0<=AMP_RSHIFT)||(LA199_0>=LLPAREN && LA199_0<=DOUBLE_SEMIC)||LA199_0==TICK||(LA199_0>=ALPHANUM && LA199_0<=SQUOTE)||(LA199_0>=EXP && LA199_0<=CONTINUE_LINE)) && ((is_special_token(LA(1))))) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // java_libbash.g:829:4: ( SLASH )=>
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 829:15: -> ^( STRING NAME )
                    {
                        // java_libbash.g:829:18: ^( STRING NAME )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        adaptor.addChild(root_1, (CommonTree)adaptor.create(NAME, "NAME"));

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:830:4: ( (~ SLASH )=> parameter_pattern_part )+
                    {
                    // java_libbash.g:830:4: ( (~ SLASH )=> parameter_pattern_part )+
                    int cnt198=0;
                    loop198:
                    do {
                        int alt198=2;
                        alt198 = dfa198.predict(input);
                        switch (alt198) {
                    	case 1 :
                    	    // java_libbash.g:830:5: (~ SLASH )=> parameter_pattern_part
                    	    {
                    	    pushFollow(FOLLOW_parameter_pattern_part_in_parameter_replace_pattern5820);
                    	    parameter_pattern_part679=parameter_pattern_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter_pattern_part.add(parameter_pattern_part679.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt198 >= 1 ) break loop198;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(198, input);
                                throw eee;
                        }
                        cnt198++;
                    } while (true);



                    // AST REWRITE
                    // elements: parameter_pattern_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 830:42: -> ^( STRING ( parameter_pattern_part )+ )
                    {
                        // java_libbash.g:830:45: ^( STRING ( parameter_pattern_part )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        if ( !(stream_parameter_pattern_part.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_parameter_pattern_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_parameter_pattern_part.nextTree());

                        }
                        stream_parameter_pattern_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_replace_pattern"

    public static class parameter_delete_pattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_delete_pattern"
    // java_libbash.g:831:1: parameter_delete_pattern : ( parameter_pattern_part )+ -> ^( STRING ( parameter_pattern_part )+ ) ;
    public final java_libbashParser.parameter_delete_pattern_return parameter_delete_pattern() throws RecognitionException {
        java_libbashParser.parameter_delete_pattern_return retval = new java_libbashParser.parameter_delete_pattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.parameter_pattern_part_return parameter_pattern_part680 = null;


        RewriteRuleSubtreeStream stream_parameter_pattern_part=new RewriteRuleSubtreeStream(adaptor,"rule parameter_pattern_part");
        try {
            // java_libbash.g:832:2: ( ( parameter_pattern_part )+ -> ^( STRING ( parameter_pattern_part )+ ) )
            // java_libbash.g:832:4: ( parameter_pattern_part )+
            {
            // java_libbash.g:832:4: ( parameter_pattern_part )+
            int cnt200=0;
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==RBRACE) ) {
                    int LA200_1 = input.LA(2);

                    if ( ((is_special_token(LA(1)))) ) {
                        alt200=1;
                    }


                }
                else if ( (LA200_0==POUND||LA200_0==BANG||(LA200_0>=TIME && LA200_0<=LETTER)||LA200_0==DIGIT||(LA200_0>=NAME && LA200_0<=LBRACE)||(LA200_0>=FOR && LA200_0<=DONE)||(LA200_0>=SELECT && LA200_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA200_0>=SLASH && LA200_0<=QMARK)||(LA200_0>=COMMAND_SUBSTITUTION_PAREN && LA200_0<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt200=1;
                }
                else if ( ((LA200_0>=ANSI_C_QUOTING && LA200_0<=AMP)||(LA200_0>=LOGICAND && LA200_0<=LOGICOR)||LA200_0==PIPE||(LA200_0>=LESS_THAN && LA200_0<=RPAREN)||(LA200_0>=HERE_STRING_OP && LA200_0<=AMP_RSHIFT)||(LA200_0>=LLPAREN && LA200_0<=DOUBLE_SEMIC)||LA200_0==TICK||(LA200_0>=ALPHANUM && LA200_0<=SQUOTE)||(LA200_0>=EXP && LA200_0<=CONTINUE_LINE)) && ((is_special_token(LA(1))))) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // java_libbash.g:832:4: parameter_pattern_part
            	    {
            	    pushFollow(FOLLOW_parameter_pattern_part_in_parameter_delete_pattern5839);
            	    parameter_pattern_part680=parameter_pattern_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_parameter_pattern_part.add(parameter_pattern_part680.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt200 >= 1 ) break loop200;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(200, input);
                        throw eee;
                }
                cnt200++;
            } while (true);



            // AST REWRITE
            // elements: parameter_pattern_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:28: -> ^( STRING ( parameter_pattern_part )+ )
            {
                // java_libbash.g:832:31: ^( STRING ( parameter_pattern_part )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                if ( !(stream_parameter_pattern_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_parameter_pattern_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_parameter_pattern_part.nextTree());

                }
                stream_parameter_pattern_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_delete_pattern"

    public static class parameter_pattern_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_pattern_part"
    // java_libbash.g:833:1: parameter_pattern_part : ( extended_pattern_match | {...}? => . );
    public final java_libbashParser.parameter_pattern_part_return parameter_pattern_part() throws RecognitionException {
        java_libbashParser.parameter_pattern_part_return retval = new java_libbashParser.parameter_pattern_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token wildcard682=null;
        java_libbashParser.extended_pattern_match_return extended_pattern_match681 = null;


        CommonTree wildcard682_tree=null;

        try {
            // java_libbash.g:834:2: ( extended_pattern_match | {...}? => . )
            int alt201=2;
            alt201 = dfa201.predict(input);
            switch (alt201) {
                case 1 :
                    // java_libbash.g:834:4: extended_pattern_match
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extended_pattern_match_in_parameter_pattern_part5857);
                    extended_pattern_match681=extended_pattern_match();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extended_pattern_match681.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:834:27: {...}? => .
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((is_special_token(LA(1)))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "parameter_pattern_part", "is_special_token(LA(1))");
                    }
                    wildcard682=(Token)input.LT(1);
                    matchAny(input); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    wildcard682_tree = (CommonTree)adaptor.create(wildcard682);
                    adaptor.addChild(root_0, wildcard682_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_pattern_part"

    protected static class parameter_expansion_value_scope {
        int num_of_braces;
    }
    protected Stack parameter_expansion_value_stack = new Stack();

    public static class parameter_expansion_value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_expansion_value"
    // java_libbash.g:837:1: parameter_expansion_value : parameter_expansion_value_atom -> ^( STRING parameter_expansion_value_atom ) ;
    public final java_libbashParser.parameter_expansion_value_return parameter_expansion_value() throws RecognitionException {
        parameter_expansion_value_stack.push(new parameter_expansion_value_scope());
        java_libbashParser.parameter_expansion_value_return retval = new java_libbashParser.parameter_expansion_value_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.parameter_expansion_value_atom_return parameter_expansion_value_atom683 = null;


        RewriteRuleSubtreeStream stream_parameter_expansion_value_atom=new RewriteRuleSubtreeStream(adaptor,"rule parameter_expansion_value_atom");
        try {
            // java_libbash.g:841:2: ( parameter_expansion_value_atom -> ^( STRING parameter_expansion_value_atom ) )
            // java_libbash.g:841:4: parameter_expansion_value_atom
            {
            pushFollow(FOLLOW_parameter_expansion_value_atom_in_parameter_expansion_value5877);
            parameter_expansion_value_atom683=parameter_expansion_value_atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_expansion_value_atom.add(parameter_expansion_value_atom683.getTree());


            // AST REWRITE
            // elements: parameter_expansion_value_atom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 841:35: -> ^( STRING parameter_expansion_value_atom )
            {
                // java_libbash.g:841:38: ^( STRING parameter_expansion_value_atom )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                adaptor.addChild(root_1, stream_parameter_expansion_value_atom.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            parameter_expansion_value_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "parameter_expansion_value"

    public static class parameter_expansion_value_atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_expansion_value_atom"
    // java_libbash.g:843:1: parameter_expansion_value_atom : ( (~ RBRACE )=> ({...}? => . )+ | -> EMPTY_EXPANSION_VALUE );
    public final java_libbashParser.parameter_expansion_value_atom_return parameter_expansion_value_atom() throws RecognitionException {
        java_libbashParser.parameter_expansion_value_atom_return retval = new java_libbashParser.parameter_expansion_value_atom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token wildcard684=null;

        CommonTree wildcard684_tree=null;

        try {
            // java_libbash.g:844:2: ( (~ RBRACE )=> ({...}? => . )+ | -> EMPTY_EXPANSION_VALUE )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==RBRACE) ) {
                int LA203_1 = input.LA(2);

                if ( (synpred66_java_libbash()) ) {
                    alt203=1;
                }
                else if ( (true) ) {
                    alt203=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 203, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA203_0>=ANSI_C_QUOTING && LA203_0<=LBRACE)||(LA203_0>=FOR && LA203_0<=CONTINUE_LINE)) && (synpred66_java_libbash())) {
                alt203=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }
            switch (alt203) {
                case 1 :
                    // java_libbash.g:844:4: (~ RBRACE )=> ({...}? => . )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      ((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces = 1;
                    }
                    // java_libbash.g:846:4: ({...}? => . )+
                    int cnt202=0;
                    loop202:
                    do {
                        int alt202=2;
                        int LA202_0 = input.LA(1);

                        if ( (LA202_0==RBRACE) ) {
                            int LA202_1 = input.LA(2);

                            if ( ((((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces != 0)) ) {
                                alt202=1;
                            }


                        }
                        else if ( ((LA202_0>=ANSI_C_QUOTING && LA202_0<=LBRACE)||(LA202_0>=FOR && LA202_0<=CONTINUE_LINE)) && ((((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces != 0))) {
                            alt202=1;
                        }


                        switch (alt202) {
                    	case 1 :
                    	    // java_libbash.g:847:5: {...}? => .
                    	    {
                    	    if ( !((((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces != 0)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        throw new FailedPredicateException(input, "parameter_expansion_value_atom", "$parameter_expansion_value::num_of_braces != 0");
                    	    }
                    	    wildcard684=(Token)input.LT(1);
                    	    matchAny(input); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    wildcard684_tree = (CommonTree)adaptor.create(wildcard684);
                    	    adaptor.addChild(root_0, wildcard684_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {

                    	           if(LA(1) == LBRACE && LA(-1) != ESC)
                    	            ++((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces;
                    	           else if(LA(1) == RBRACE && LA(-1) != ESC)
                    	            --((parameter_expansion_value_scope)parameter_expansion_value_stack.peek()).num_of_braces;
                    	          
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt202 >= 1 ) break loop202;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(202, input);
                                throw eee;
                        }
                        cnt202++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // java_libbash.g:855:4: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 855:4: -> EMPTY_EXPANSION_VALUE
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(EMPTY_EXPANSION_VALUE, "EMPTY_EXPANSION_VALUE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_expansion_value_atom"

    public static class parameter_replace_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_replace_operator"
    // java_libbash.g:857:1: parameter_replace_operator : ( ( SLASH SLASH )=> SLASH SLASH -> REPLACE_ALL | ( SLASH PCT )=> SLASH PCT -> REPLACE_AT_END | ( SLASH POUND )=> SLASH POUND -> REPLACE_AT_START | SLASH -> REPLACE_FIRST );
    public final java_libbashParser.parameter_replace_operator_return parameter_replace_operator() throws RecognitionException {
        java_libbashParser.parameter_replace_operator_return retval = new java_libbashParser.parameter_replace_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SLASH685=null;
        Token SLASH686=null;
        Token SLASH687=null;
        Token PCT688=null;
        Token SLASH689=null;
        Token POUND690=null;
        Token SLASH691=null;

        CommonTree SLASH685_tree=null;
        CommonTree SLASH686_tree=null;
        CommonTree SLASH687_tree=null;
        CommonTree PCT688_tree=null;
        CommonTree SLASH689_tree=null;
        CommonTree POUND690_tree=null;
        CommonTree SLASH691_tree=null;
        RewriteRuleTokenStream stream_SLASH=new RewriteRuleTokenStream(adaptor,"token SLASH");
        RewriteRuleTokenStream stream_PCT=new RewriteRuleTokenStream(adaptor,"token PCT");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");

        try {
            // java_libbash.g:858:2: ( ( SLASH SLASH )=> SLASH SLASH -> REPLACE_ALL | ( SLASH PCT )=> SLASH PCT -> REPLACE_AT_END | ( SLASH POUND )=> SLASH POUND -> REPLACE_AT_START | SLASH -> REPLACE_FIRST )
            int alt204=4;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==SLASH) ) {
                switch ( input.LA(2) ) {
                case SLASH:
                    {
                    int LA204_2 = input.LA(3);

                    if ( (synpred67_java_libbash()) ) {
                        alt204=1;
                    }
                    else if ( (true) ) {
                        alt204=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 2, input);

                        throw nvae;
                    }
                    }
                    break;
                case PCT:
                    {
                    int LA204_3 = input.LA(3);

                    if ( (synpred68_java_libbash()) ) {
                        alt204=2;
                    }
                    else if ( (true) ) {
                        alt204=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case POUND:
                    {
                    int LA204_4 = input.LA(3);

                    if ( (synpred69_java_libbash()) ) {
                        alt204=3;
                    }
                    else if ( (true) ) {
                        alt204=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 204, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case ANSI_C_QUOTING:
                case ARG:
                case ARRAY:
                case ARRAY_SIZE:
                case BRACE_EXP:
                case COMMAND_SUB:
                case CASE_PATTERN:
                case CASE_COMMAND:
                case SUBSHELL:
                case CURRENT_SHELL:
                case COMPOUND_COND:
                case CFOR:
                case FOR_INIT:
                case FOR_COND:
                case FOR_MOD:
                case IF_STATEMENT:
                case OP:
                case PRE_INCR:
                case PRE_DECR:
                case POST_INCR:
                case POST_DECR:
                case PROCESS_SUBSTITUTION:
                case VAR_REF:
                case NEGATION:
                case LIST:
                case STRING:
                case COMMAND:
                case FILE_DESCRIPTOR:
                case FILE_DESCRIPTOR_MOVE:
                case REDIR:
                case ARITHMETIC_CONDITION:
                case ARITHMETIC_EXPRESSION:
                case ARITHMETIC:
                case KEYWORD_TEST:
                case BUILTIN_TEST:
                case MATCH_ANY_EXCEPT:
                case EXTENDED_MATCH_EXACTLY_ONE:
                case EXTENDED_MATCH_AT_MOST_ONE:
                case EXTENDED_MATCH_NONE:
                case EXTENDED_MATCH_ANY:
                case EXTENDED_MATCH_AT_LEAST_ONE:
                case BRANCH:
                case MATCH_PATTERN:
                case MATCH_REGULAR_EXPRESSION:
                case ESCAPED_CHAR:
                case NOT_MATCH_PATTERN:
                case MATCH_ANY:
                case MATCH_ALL:
                case MATCH_ONE:
                case CHARACTER_CLASS:
                case EQUIVALENCE_CLASS:
                case COLLATING_SYMBOL:
                case DOUBLE_QUOTED_STRING:
                case SINGLE_QUOTED_STRING:
                case VARIABLE_DEFINITIONS:
                case USE_DEFAULT_WHEN_UNSET:
                case USE_ALTERNATE_WHEN_UNSET:
                case DISPLAY_ERROR_WHEN_UNSET:
                case ASSIGN_DEFAULT_WHEN_UNSET:
                case USE_DEFAULT_WHEN_UNSET_OR_NULL:
                case USE_ALTERNATE_WHEN_UNSET_OR_NULL:
                case DISPLAY_ERROR_WHEN_UNSET_OR_NULL:
                case ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL:
                case OFFSET:
                case LIST_EXPAND:
                case REPLACE_FIRST:
                case REPLACE_ALL:
                case REPLACE_AT_START:
                case REPLACE_AT_END:
                case LAZY_REMOVE_AT_START:
                case LAZY_REMOVE_AT_END:
                case EMPTY_EXPANSION_VALUE:
                case PLUS_SIGN:
                case MINUS_SIGN:
                case PLUS_ASSIGN:
                case MINUS_ASSIGN:
                case DIVIDE_ASSIGN:
                case MUL_ASSIGN:
                case MOD_ASSIGN:
                case LSHIFT_ASSIGN:
                case RSHIFT_ASSIGN:
                case AND_ASSIGN:
                case XOR_ASSIGN:
                case OR_ASSIGN:
                case LEQ:
                case GEQ:
                case NOT_EQUALS:
                case EQUALS_TO:
                case BUILTIN_LOGIC_AND:
                case BUILTIN_LOGIC_OR:
                case FUNCTION:
                case EOL:
                case BLANK:
                case SEMIC:
                case AMP:
                case LOGICAND:
                case LOGICOR:
                case BANG:
                case PIPE:
                case TIME:
                case MINUS:
                case LETTER:
                case LESS_THAN:
                case GREATER_THAN:
                case LPAREN:
                case RPAREN:
                case DIGIT:
                case HERE_STRING_OP:
                case LSHIFT:
                case RSHIFT:
                case AMP_LESS_THAN:
                case AMP_GREATER_THAN:
                case AMP_RSHIFT:
                case NAME:
                case EXPORT:
                case LOCAL:
                case DECLARE:
                case LSQUARE:
                case RSQUARE:
                case EQUALS:
                case PLUS:
                case DQUOTE:
                case LBRACE:
                case RBRACE:
                case FOR:
                case IN:
                case DO:
                case DONE:
                case LLPAREN:
                case DOUBLE_SEMIC:
                case SELECT:
                case IF:
                case THEN:
                case ELSE:
                case FI:
                case ELIF:
                case WHILE:
                case UNTIL:
                case CASE:
                case ESAC:
                case TILDE:
                case ESC:
                case ESC_LT:
                case ESC_GT:
                case UNDERSCORE:
                case NUMBER:
                case DOLLAR:
                case SINGLE_QUOTED_STRING_TOKEN:
                case TICK:
                case OTHER:
                case PCTPCT:
                case DOT:
                case DOTDOT:
                case COLON:
                case CARET:
                case COMMA:
                case AT:
                case ESC_RPAREN:
                case ESC_LPAREN:
                case ESC_RSQUARE:
                case ESC_LSQUARE:
                case ESC_DOLLAR:
                case ESC_TICK:
                case ESC_DQUOTE:
                case ESC_SQUOTE:
                case TIMES:
                case QMARK:
                case ALPHANUM:
                case SQUOTE:
                case COMMAND_SUBSTITUTION_PAREN:
                case COMMAND_SUBSTITUTION_TICK:
                case EXP:
                case COMMENT:
                case CONTINUE_LINE:
                    {
                    alt204=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 204, 1, input);

                    throw nvae;
                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // java_libbash.g:858:4: ( SLASH SLASH )=> SLASH SLASH
                    {
                    SLASH685=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_replace_operator5955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH685);

                    SLASH686=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_replace_operator5957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH686);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 858:33: -> REPLACE_ALL
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_ALL, "REPLACE_ALL"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:859:4: ( SLASH PCT )=> SLASH PCT
                    {
                    SLASH687=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_replace_operator5974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH687);

                    PCT688=(Token)match(input,PCT,FOLLOW_PCT_in_parameter_replace_operator5976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PCT.add(PCT688);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 859:29: -> REPLACE_AT_END
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_AT_END, "REPLACE_AT_END"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:860:4: ( SLASH POUND )=> SLASH POUND
                    {
                    SLASH689=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_replace_operator5993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH689);

                    POUND690=(Token)match(input,POUND,FOLLOW_POUND_in_parameter_replace_operator5995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND690);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 860:33: -> REPLACE_AT_START
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_AT_START, "REPLACE_AT_START"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:861:4: SLASH
                    {
                    SLASH691=(Token)match(input,SLASH,FOLLOW_SLASH_in_parameter_replace_operator6004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH691);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 861:10: -> REPLACE_FIRST
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(REPLACE_FIRST, "REPLACE_FIRST"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameter_replace_operator"

    public static class variable_name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_name"
    // java_libbash.g:863:1: variable_name : ( num | name LSQUARE AT RSQUARE -> ^( ARRAY name AT ) | name LSQUARE TIMES RSQUARE -> ^( ARRAY name TIMES ) | BANG variable_name_for_bang -> ^( VAR_REF variable_name_for_bang ) | variable_name_no_digit | DOLLAR | TIMES | AT | QMARK | POUND );
    public final java_libbashParser.variable_name_return variable_name() throws RecognitionException {
        java_libbashParser.variable_name_return retval = new java_libbashParser.variable_name_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE694=null;
        Token AT695=null;
        Token RSQUARE696=null;
        Token LSQUARE698=null;
        Token TIMES699=null;
        Token RSQUARE700=null;
        Token BANG701=null;
        Token DOLLAR704=null;
        Token TIMES705=null;
        Token AT706=null;
        Token QMARK707=null;
        Token POUND708=null;
        java_libbashParser.num_return num692 = null;

        java_libbashParser.name_return name693 = null;

        java_libbashParser.name_return name697 = null;

        java_libbashParser.variable_name_for_bang_return variable_name_for_bang702 = null;

        java_libbashParser.variable_name_no_digit_return variable_name_no_digit703 = null;


        CommonTree LSQUARE694_tree=null;
        CommonTree AT695_tree=null;
        CommonTree RSQUARE696_tree=null;
        CommonTree LSQUARE698_tree=null;
        CommonTree TIMES699_tree=null;
        CommonTree RSQUARE700_tree=null;
        CommonTree BANG701_tree=null;
        CommonTree DOLLAR704_tree=null;
        CommonTree TIMES705_tree=null;
        CommonTree AT706_tree=null;
        CommonTree QMARK707_tree=null;
        CommonTree POUND708_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleSubtreeStream stream_variable_name_for_bang=new RewriteRuleSubtreeStream(adaptor,"rule variable_name_for_bang");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // java_libbash.g:864:2: ( num | name LSQUARE AT RSQUARE -> ^( ARRAY name AT ) | name LSQUARE TIMES RSQUARE -> ^( ARRAY name TIMES ) | BANG variable_name_for_bang -> ^( VAR_REF variable_name_for_bang ) | variable_name_no_digit | DOLLAR | TIMES | AT | QMARK | POUND )
            int alt205=10;
            alt205 = dfa205.predict(input);
            switch (alt205) {
                case 1 :
                    // java_libbash.g:864:4: num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_num_in_variable_name6017);
                    num692=num();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num692.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:865:4: name LSQUARE AT RSQUARE
                    {
                    pushFollow(FOLLOW_name_in_variable_name6022);
                    name693=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name693.getTree());
                    LSQUARE694=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_variable_name6024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE694);

                    AT695=(Token)match(input,AT,FOLLOW_AT_in_variable_name6026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(AT695);

                    RSQUARE696=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_variable_name6028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE696);



                    // AST REWRITE
                    // elements: name, AT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 865:28: -> ^( ARRAY name AT )
                    {
                        // java_libbash.g:865:31: ^( ARRAY name AT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        adaptor.addChild(root_1, stream_AT.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:866:4: name LSQUARE TIMES RSQUARE
                    {
                    pushFollow(FOLLOW_name_in_variable_name6043);
                    name697=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name697.getTree());
                    LSQUARE698=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_variable_name6045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE698);

                    TIMES699=(Token)match(input,TIMES,FOLLOW_TIMES_in_variable_name6047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(TIMES699);

                    RSQUARE700=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_variable_name6049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE700);



                    // AST REWRITE
                    // elements: TIMES, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 866:31: -> ^( ARRAY name TIMES )
                    {
                        // java_libbash.g:866:34: ^( ARRAY name TIMES )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());
                        adaptor.addChild(root_1, stream_TIMES.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:867:4: BANG variable_name_for_bang
                    {
                    BANG701=(Token)match(input,BANG,FOLLOW_BANG_in_variable_name6064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG701);

                    pushFollow(FOLLOW_variable_name_for_bang_in_variable_name6066);
                    variable_name_for_bang702=variable_name_for_bang();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name_for_bang.add(variable_name_for_bang702.getTree());


                    // AST REWRITE
                    // elements: variable_name_for_bang
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 867:32: -> ^( VAR_REF variable_name_for_bang )
                    {
                        // java_libbash.g:867:35: ^( VAR_REF variable_name_for_bang )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_variable_name_for_bang.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:868:4: variable_name_no_digit
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_name_no_digit_in_variable_name6079);
                    variable_name_no_digit703=variable_name_no_digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name_no_digit703.getTree());

                    }
                    break;
                case 6 :
                    // java_libbash.g:869:4: DOLLAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DOLLAR704=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable_name6084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR704_tree = (CommonTree)adaptor.create(DOLLAR704);
                    adaptor.addChild(root_0, DOLLAR704_tree);
                    }

                    }
                    break;
                case 7 :
                    // java_libbash.g:870:4: TIMES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TIMES705=(Token)match(input,TIMES,FOLLOW_TIMES_in_variable_name6089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TIMES705_tree = (CommonTree)adaptor.create(TIMES705);
                    adaptor.addChild(root_0, TIMES705_tree);
                    }

                    }
                    break;
                case 8 :
                    // java_libbash.g:871:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT706=(Token)match(input,AT,FOLLOW_AT_in_variable_name6094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT706_tree = (CommonTree)adaptor.create(AT706);
                    adaptor.addChild(root_0, AT706_tree);
                    }

                    }
                    break;
                case 9 :
                    // java_libbash.g:872:4: QMARK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    QMARK707=(Token)match(input,QMARK,FOLLOW_QMARK_in_variable_name6099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QMARK707_tree = (CommonTree)adaptor.create(QMARK707);
                    adaptor.addChild(root_0, QMARK707_tree);
                    }

                    }
                    break;
                case 10 :
                    // java_libbash.g:873:4: POUND
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    POUND708=(Token)match(input,POUND,FOLLOW_POUND_in_variable_name6104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND708_tree = (CommonTree)adaptor.create(POUND708);
                    adaptor.addChild(root_0, POUND708_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_name"

    public static class variable_name_no_digit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_name_no_digit"
    // java_libbash.g:875:1: variable_name_no_digit : ( name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE -> ^( name explicit_arithmetic ) | name );
    public final java_libbashParser.variable_name_no_digit_return variable_name_no_digit() throws RecognitionException {
        java_libbashParser.variable_name_no_digit_return retval = new java_libbashParser.variable_name_no_digit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE710=null;
        Token BLANK711=null;
        Token BLANK713=null;
        Token RSQUARE714=null;
        java_libbashParser.name_return name709 = null;

        java_libbashParser.explicit_arithmetic_return explicit_arithmetic712 = null;

        java_libbashParser.name_return name715 = null;


        CommonTree LSQUARE710_tree=null;
        CommonTree BLANK711_tree=null;
        CommonTree BLANK713_tree=null;
        CommonTree RSQUARE714_tree=null;
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_explicit_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule explicit_arithmetic");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // java_libbash.g:876:2: ( name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE -> ^( name explicit_arithmetic ) | name )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==LETTER||LA208_0==NAME||LA208_0==UNDERSCORE) ) {
                int LA208_1 = input.LA(2);

                if ( (LA208_1==EOF||(LA208_1>=EOL && LA208_1<=PIPE)||LA208_1==MINUS||(LA208_1>=LESS_THAN && LA208_1<=GREATER_THAN)||LA208_1==RPAREN||(LA208_1>=LSHIFT && LA208_1<=RSHIFT)||(LA208_1>=RSQUARE && LA208_1<=DQUOTE)||LA208_1==RBRACE||LA208_1==DOUBLE_SEMIC||LA208_1==SLASH||(LA208_1>=PCT && LA208_1<=PCTPCT)||(LA208_1>=COLON && LA208_1<=COMMA)||(LA208_1>=TIMES && LA208_1<=QMARK)||LA208_1==EXP) ) {
                    alt208=2;
                }
                else if ( (LA208_1==LSQUARE) ) {
                    alt208=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }
            switch (alt208) {
                case 1 :
                    // java_libbash.g:876:4: name LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE
                    {
                    pushFollow(FOLLOW_name_in_variable_name_no_digit6113);
                    name709=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name709.getTree());
                    LSQUARE710=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_variable_name_no_digit6115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE710);

                    // java_libbash.g:876:17: ( BLANK )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==BLANK) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // java_libbash.g:876:17: BLANK
                            {
                            BLANK711=(Token)match(input,BLANK,FOLLOW_BLANK_in_variable_name_no_digit6117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK711);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_explicit_arithmetic_in_variable_name_no_digit6120);
                    explicit_arithmetic712=explicit_arithmetic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicit_arithmetic.add(explicit_arithmetic712.getTree());
                    // java_libbash.g:876:44: ( BLANK )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==BLANK) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // java_libbash.g:876:44: BLANK
                            {
                            BLANK713=(Token)match(input,BLANK,FOLLOW_BLANK_in_variable_name_no_digit6122); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK713);


                            }
                            break;

                    }

                    RSQUARE714=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_variable_name_no_digit6125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE714);



                    // AST REWRITE
                    // elements: name, explicit_arithmetic
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 876:59: -> ^( name explicit_arithmetic )
                    {
                        // java_libbash.g:876:62: ^( name explicit_arithmetic )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_name.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_explicit_arithmetic.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:877:4: name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_name_in_variable_name_no_digit6138);
                    name715=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name715.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_name_no_digit"

    public static class variable_name_for_bang_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_name_for_bang"
    // java_libbash.g:879:1: variable_name_for_bang : ( num | name | POUND );
    public final java_libbashParser.variable_name_for_bang_return variable_name_for_bang() throws RecognitionException {
        java_libbashParser.variable_name_for_bang_return retval = new java_libbashParser.variable_name_for_bang_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token POUND718=null;
        java_libbashParser.num_return num716 = null;

        java_libbashParser.name_return name717 = null;


        CommonTree POUND718_tree=null;

        try {
            // java_libbash.g:880:2: ( num | name | POUND )
            int alt209=3;
            switch ( input.LA(1) ) {
            case DIGIT:
            case NUMBER:
                {
                alt209=1;
                }
                break;
            case LETTER:
            case NAME:
            case UNDERSCORE:
                {
                alt209=2;
                }
                break;
            case POUND:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // java_libbash.g:880:4: num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_num_in_variable_name_for_bang6147);
                    num716=num();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num716.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:880:8: name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_name_in_variable_name_for_bang6149);
                    name717=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name717.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:880:13: POUND
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    POUND718=(Token)match(input,POUND,FOLLOW_POUND_in_variable_name_for_bang6151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND718_tree = (CommonTree)adaptor.create(POUND718);
                    adaptor.addChild(root_0, POUND718_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_name_for_bang"

    public static class variable_size_ref_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_size_ref"
    // java_libbash.g:881:1: variable_size_ref : ( ( POUND name LSQUARE )=> POUND name LSQUARE array_size_index RSQUARE -> ^( POUND ^( name array_size_index ) ) | POUND variable_name );
    public final java_libbashParser.variable_size_ref_return variable_size_ref() throws RecognitionException {
        java_libbashParser.variable_size_ref_return retval = new java_libbashParser.variable_size_ref_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token POUND719=null;
        Token LSQUARE721=null;
        Token RSQUARE723=null;
        Token POUND724=null;
        java_libbashParser.name_return name720 = null;

        java_libbashParser.array_size_index_return array_size_index722 = null;

        java_libbashParser.variable_name_return variable_name725 = null;


        CommonTree POUND719_tree=null;
        CommonTree LSQUARE721_tree=null;
        CommonTree RSQUARE723_tree=null;
        CommonTree POUND724_tree=null;
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleSubtreeStream stream_array_size_index=new RewriteRuleSubtreeStream(adaptor,"rule array_size_index");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // java_libbash.g:882:2: ( ( POUND name LSQUARE )=> POUND name LSQUARE array_size_index RSQUARE -> ^( POUND ^( name array_size_index ) ) | POUND variable_name )
            int alt210=2;
            alt210 = dfa210.predict(input);
            switch (alt210) {
                case 1 :
                    // java_libbash.g:882:4: ( POUND name LSQUARE )=> POUND name LSQUARE array_size_index RSQUARE
                    {
                    POUND719=(Token)match(input,POUND,FOLLOW_POUND_in_variable_size_ref6169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_POUND.add(POUND719);

                    pushFollow(FOLLOW_name_in_variable_size_ref6171);
                    name720=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name720.getTree());
                    LSQUARE721=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_variable_size_ref6173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE721);

                    pushFollow(FOLLOW_array_size_index_in_variable_size_ref6175);
                    array_size_index722=array_size_index();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_size_index.add(array_size_index722.getTree());
                    RSQUARE723=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_variable_size_ref6177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE723);



                    // AST REWRITE
                    // elements: name, array_size_index, POUND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 882:72: -> ^( POUND ^( name array_size_index ) )
                    {
                        // java_libbash.g:882:75: ^( POUND ^( name array_size_index ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_POUND.nextNode(), root_1);

                        // java_libbash.g:882:83: ^( name array_size_index )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_name.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_array_size_index.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:883:4: POUND variable_name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    POUND724=(Token)match(input,POUND,FOLLOW_POUND_in_variable_size_ref6194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    POUND724_tree = (CommonTree)adaptor.create(POUND724);
                    root_0 = (CommonTree)adaptor.becomeRoot(POUND724_tree, root_0);
                    }
                    pushFollow(FOLLOW_variable_name_in_variable_size_ref6197);
                    variable_name725=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name725.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variable_size_ref"

    public static class array_size_index_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "array_size_index"
    // java_libbash.g:884:1: array_size_index : ( ( DIGIT )+ | ( AT | TIMES ) -> ARRAY_SIZE );
    public final java_libbashParser.array_size_index_return array_size_index() throws RecognitionException {
        java_libbashParser.array_size_index_return retval = new java_libbashParser.array_size_index_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIGIT726=null;
        Token AT727=null;
        Token TIMES728=null;

        CommonTree DIGIT726_tree=null;
        CommonTree AT727_tree=null;
        CommonTree TIMES728_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");

        try {
            // java_libbash.g:885:2: ( ( DIGIT )+ | ( AT | TIMES ) -> ARRAY_SIZE )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==DIGIT) ) {
                alt213=1;
            }
            else if ( (LA213_0==AT||LA213_0==TIMES) ) {
                alt213=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // java_libbash.g:885:4: ( DIGIT )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // java_libbash.g:885:4: ( DIGIT )+
                    int cnt211=0;
                    loop211:
                    do {
                        int alt211=2;
                        int LA211_0 = input.LA(1);

                        if ( (LA211_0==DIGIT) ) {
                            alt211=1;
                        }


                        switch (alt211) {
                    	case 1 :
                    	    // java_libbash.g:885:4: DIGIT
                    	    {
                    	    DIGIT726=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_array_size_index6205); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DIGIT726_tree = (CommonTree)adaptor.create(DIGIT726);
                    	    adaptor.addChild(root_0, DIGIT726_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt211 >= 1 ) break loop211;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(211, input);
                                throw eee;
                        }
                        cnt211++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // java_libbash.g:886:4: ( AT | TIMES )
                    {
                    // java_libbash.g:886:4: ( AT | TIMES )
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==AT) ) {
                        alt212=1;
                    }
                    else if ( (LA212_0==TIMES) ) {
                        alt212=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 0, input);

                        throw nvae;
                    }
                    switch (alt212) {
                        case 1 :
                            // java_libbash.g:886:5: AT
                            {
                            AT727=(Token)match(input,AT,FOLLOW_AT_in_array_size_index6212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AT.add(AT727);


                            }
                            break;
                        case 2 :
                            // java_libbash.g:886:8: TIMES
                            {
                            TIMES728=(Token)match(input,TIMES,FOLLOW_TIMES_in_array_size_index6214); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_TIMES.add(TIMES728);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 886:15: -> ARRAY_SIZE
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ARRAY_SIZE, "ARRAY_SIZE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "array_size_index"

    public static class wspace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wspace"
    // java_libbash.g:888:1: wspace : ( BLANK | EOL )+ ;
    public final java_libbashParser.wspace_return wspace() throws RecognitionException {
        java_libbashParser.wspace_return retval = new java_libbashParser.wspace_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set729=null;

        CommonTree set729_tree=null;

        try {
            // java_libbash.g:889:2: ( ( BLANK | EOL )+ )
            // java_libbash.g:889:4: ( BLANK | EOL )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:889:4: ( BLANK | EOL )+
            int cnt214=0;
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==BLANK) ) {
                    int LA214_2 = input.LA(2);

                    if ( (!(((LA(1) == GREATER_THAN)))) ) {
                        alt214=1;
                    }


                }
                else if ( (LA214_0==EOL) ) {
                    alt214=1;
                }


                switch (alt214) {
            	case 1 :
            	    // java_libbash.g:
            	    {
            	    set729=(Token)input.LT(1);
            	    if ( (input.LA(1)>=EOL && input.LA(1)<=BLANK) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set729));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt214 >= 1 ) break loop214;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(214, input);
                        throw eee;
                }
                cnt214++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wspace"

    public static class command_substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command_substitution"
    // java_libbash.g:891:1: command_substitution : ( COMMAND_SUBSTITUTION_PAREN -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_PAREN ) | COMMAND_SUBSTITUTION_TICK -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_TICK ) );
    public final java_libbashParser.command_substitution_return command_substitution() throws RecognitionException {
        java_libbashParser.command_substitution_return retval = new java_libbashParser.command_substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMAND_SUBSTITUTION_PAREN730=null;
        Token COMMAND_SUBSTITUTION_TICK731=null;

        CommonTree COMMAND_SUBSTITUTION_PAREN730_tree=null;
        CommonTree COMMAND_SUBSTITUTION_TICK731_tree=null;
        RewriteRuleTokenStream stream_COMMAND_SUBSTITUTION_TICK=new RewriteRuleTokenStream(adaptor,"token COMMAND_SUBSTITUTION_TICK");
        RewriteRuleTokenStream stream_COMMAND_SUBSTITUTION_PAREN=new RewriteRuleTokenStream(adaptor,"token COMMAND_SUBSTITUTION_PAREN");

        try {
            // java_libbash.g:892:2: ( COMMAND_SUBSTITUTION_PAREN -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_PAREN ) | COMMAND_SUBSTITUTION_TICK -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_TICK ) )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==COMMAND_SUBSTITUTION_PAREN) ) {
                alt215=1;
            }
            else if ( (LA215_0==COMMAND_SUBSTITUTION_TICK) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    // java_libbash.g:892:4: COMMAND_SUBSTITUTION_PAREN
                    {
                    COMMAND_SUBSTITUTION_PAREN730=(Token)match(input,COMMAND_SUBSTITUTION_PAREN,FOLLOW_COMMAND_SUBSTITUTION_PAREN_in_command_substitution6242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMAND_SUBSTITUTION_PAREN.add(COMMAND_SUBSTITUTION_PAREN730);



                    // AST REWRITE
                    // elements: COMMAND_SUBSTITUTION_PAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 892:31: -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_PAREN )
                    {
                        // java_libbash.g:892:34: ^( COMMAND_SUB COMMAND_SUBSTITUTION_PAREN )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND_SUB, "COMMAND_SUB"), root_1);

                        adaptor.addChild(root_1, stream_COMMAND_SUBSTITUTION_PAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:893:4: COMMAND_SUBSTITUTION_TICK
                    {
                    COMMAND_SUBSTITUTION_TICK731=(Token)match(input,COMMAND_SUBSTITUTION_TICK,FOLLOW_COMMAND_SUBSTITUTION_TICK_in_command_substitution6255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMAND_SUBSTITUTION_TICK.add(COMMAND_SUBSTITUTION_TICK731);



                    // AST REWRITE
                    // elements: COMMAND_SUBSTITUTION_TICK
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 893:30: -> ^( COMMAND_SUB COMMAND_SUBSTITUTION_TICK )
                    {
                        // java_libbash.g:893:33: ^( COMMAND_SUB COMMAND_SUBSTITUTION_TICK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND_SUB, "COMMAND_SUB"), root_1);

                        adaptor.addChild(root_1, stream_COMMAND_SUBSTITUTION_TICK.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command_substitution"

    public static class brace_expansion_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brace_expansion"
    // java_libbash.g:895:1: brace_expansion : LBRACE ( BLANK )* brace_expansion_inside ( BLANK )* RBRACE -> ^( BRACE_EXP brace_expansion_inside ) ;
    public final java_libbashParser.brace_expansion_return brace_expansion() throws RecognitionException {
        java_libbashParser.brace_expansion_return retval = new java_libbashParser.brace_expansion_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACE732=null;
        Token BLANK733=null;
        Token BLANK735=null;
        Token RBRACE736=null;
        java_libbashParser.brace_expansion_inside_return brace_expansion_inside734 = null;


        CommonTree LBRACE732_tree=null;
        CommonTree BLANK733_tree=null;
        CommonTree BLANK735_tree=null;
        CommonTree RBRACE736_tree=null;
        RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
        RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_brace_expansion_inside=new RewriteRuleSubtreeStream(adaptor,"rule brace_expansion_inside");
        try {
            // java_libbash.g:896:2: ( LBRACE ( BLANK )* brace_expansion_inside ( BLANK )* RBRACE -> ^( BRACE_EXP brace_expansion_inside ) )
            // java_libbash.g:896:4: LBRACE ( BLANK )* brace_expansion_inside ( BLANK )* RBRACE
            {
            LBRACE732=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_brace_expansion6272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE732);

            // java_libbash.g:896:11: ( BLANK )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==BLANK) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // java_libbash.g:896:11: BLANK
            	    {
            	    BLANK733=(Token)match(input,BLANK,FOLLOW_BLANK_in_brace_expansion6274); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK733);


            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);

            pushFollow(FOLLOW_brace_expansion_inside_in_brace_expansion6277);
            brace_expansion_inside734=brace_expansion_inside();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_brace_expansion_inside.add(brace_expansion_inside734.getTree());
            // java_libbash.g:896:41: ( BLANK )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==BLANK) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // java_libbash.g:896:41: BLANK
            	    {
            	    BLANK735=(Token)match(input,BLANK,FOLLOW_BLANK_in_brace_expansion6279); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BLANK.add(BLANK735);


            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);

            RBRACE736=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_brace_expansion6282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE736);



            // AST REWRITE
            // elements: brace_expansion_inside
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 896:55: -> ^( BRACE_EXP brace_expansion_inside )
            {
                // java_libbash.g:896:58: ^( BRACE_EXP brace_expansion_inside )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRACE_EXP, "BRACE_EXP"), root_1);

                adaptor.addChild(root_1, stream_brace_expansion_inside.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brace_expansion"

    public static class brace_expansion_inside_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brace_expansion_inside"
    // java_libbash.g:897:1: brace_expansion_inside : ( commasep | range );
    public final java_libbashParser.brace_expansion_inside_return brace_expansion_inside() throws RecognitionException {
        java_libbashParser.brace_expansion_inside_return retval = new java_libbashParser.brace_expansion_inside_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.commasep_return commasep737 = null;

        java_libbashParser.range_return range738 = null;



        try {
            // java_libbash.g:898:2: ( commasep | range )
            int alt218=2;
            switch ( input.LA(1) ) {
            case POUND:
            case BANG:
            case TIME:
            case MINUS:
            case NAME:
            case EXPORT:
            case LOCAL:
            case DECLARE:
            case LSQUARE:
            case RSQUARE:
            case EQUALS:
            case PLUS:
            case DQUOTE:
            case LBRACE:
            case FOR:
            case IN:
            case DO:
            case DONE:
            case SELECT:
            case IF:
            case THEN:
            case ELSE:
            case FI:
            case ELIF:
            case WHILE:
            case UNTIL:
            case CASE:
            case ESAC:
            case TILDE:
            case ESC:
            case ESC_LT:
            case ESC_GT:
            case UNDERSCORE:
            case NUMBER:
            case DOLLAR:
            case SINGLE_QUOTED_STRING_TOKEN:
            case SLASH:
            case OTHER:
            case PCT:
            case PCTPCT:
            case DOT:
            case DOTDOT:
            case COLON:
            case CARET:
            case COMMA:
            case AT:
            case ESC_RPAREN:
            case ESC_LPAREN:
            case ESC_RSQUARE:
            case ESC_LSQUARE:
            case ESC_DOLLAR:
            case ESC_TICK:
            case ESC_DQUOTE:
            case ESC_SQUOTE:
            case TIMES:
            case QMARK:
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt218=1;
                }
                break;
            case DIGIT:
                {
                int LA218_2 = input.LA(2);

                if ( (LA218_2==DOTDOT) ) {
                    int LA218_4 = input.LA(3);

                    if ( (LA218_4==DIGIT) ) {
                        int LA218_6 = input.LA(4);

                        if ( (LA218_6==BLANK||LA218_6==RBRACE) ) {
                            alt218=2;
                        }
                        else if ( (LA218_6==POUND||LA218_6==BANG||(LA218_6>=TIME && LA218_6<=LETTER)||LA218_6==DIGIT||(LA218_6>=NAME && LA218_6<=LBRACE)||(LA218_6>=FOR && LA218_6<=DONE)||(LA218_6>=SELECT && LA218_6<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_6>=SLASH && LA218_6<=QMARK)||(LA218_6>=COMMAND_SUBSTITUTION_PAREN && LA218_6<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt218=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 218, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA218_4==POUND||LA218_4==BANG||(LA218_4>=TIME && LA218_4<=LETTER)||(LA218_4>=NAME && LA218_4<=LBRACE)||(LA218_4>=FOR && LA218_4<=DONE)||(LA218_4>=SELECT && LA218_4<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_4>=SLASH && LA218_4<=QMARK)||(LA218_4>=COMMAND_SUBSTITUTION_PAREN && LA218_4<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt218=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 4, input);

                        throw nvae;
                    }
                }
                else if ( (LA218_2==POUND||LA218_2==BANG||(LA218_2>=TIME && LA218_2<=LETTER)||LA218_2==DIGIT||(LA218_2>=NAME && LA218_2<=LBRACE)||(LA218_2>=FOR && LA218_2<=DONE)||(LA218_2>=SELECT && LA218_2<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_2>=SLASH && LA218_2<=DOT)||(LA218_2>=COLON && LA218_2<=QMARK)||(LA218_2>=COMMAND_SUBSTITUTION_PAREN && LA218_2<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt218=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 2, input);

                    throw nvae;
                }
                }
                break;
            case LETTER:
                {
                int LA218_3 = input.LA(2);

                if ( (LA218_3==DOTDOT) ) {
                    int LA218_5 = input.LA(3);

                    if ( (LA218_5==LETTER) ) {
                        int LA218_7 = input.LA(4);

                        if ( (LA218_7==POUND||LA218_7==BANG||(LA218_7>=TIME && LA218_7<=LETTER)||LA218_7==DIGIT||(LA218_7>=NAME && LA218_7<=LBRACE)||(LA218_7>=FOR && LA218_7<=DONE)||(LA218_7>=SELECT && LA218_7<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_7>=SLASH && LA218_7<=QMARK)||(LA218_7>=COMMAND_SUBSTITUTION_PAREN && LA218_7<=COMMAND_SUBSTITUTION_TICK)) ) {
                            alt218=1;
                        }
                        else if ( (LA218_7==BLANK||LA218_7==RBRACE) ) {
                            alt218=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 218, 7, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA218_5==POUND||LA218_5==BANG||(LA218_5>=TIME && LA218_5<=MINUS)||LA218_5==DIGIT||(LA218_5>=NAME && LA218_5<=LBRACE)||(LA218_5>=FOR && LA218_5<=DONE)||(LA218_5>=SELECT && LA218_5<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_5>=SLASH && LA218_5<=QMARK)||(LA218_5>=COMMAND_SUBSTITUTION_PAREN && LA218_5<=COMMAND_SUBSTITUTION_TICK)) ) {
                        alt218=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 218, 5, input);

                        throw nvae;
                    }
                }
                else if ( (LA218_3==POUND||LA218_3==BANG||(LA218_3>=TIME && LA218_3<=LETTER)||LA218_3==DIGIT||(LA218_3>=NAME && LA218_3<=LBRACE)||(LA218_3>=FOR && LA218_3<=DONE)||(LA218_3>=SELECT && LA218_3<=SINGLE_QUOTED_STRING_TOKEN)||(LA218_3>=SLASH && LA218_3<=DOT)||(LA218_3>=COLON && LA218_3<=QMARK)||(LA218_3>=COMMAND_SUBSTITUTION_PAREN && LA218_3<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt218=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 218, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // java_libbash.g:898:4: commasep
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_commasep_in_brace_expansion_inside6298);
                    commasep737=commasep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commasep737.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:898:13: range
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_range_in_brace_expansion_inside6300);
                    range738=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range738.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brace_expansion_inside"

    public static class range_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // java_libbash.g:899:1: range : ( DIGIT DOTDOT DIGIT | LETTER DOTDOT LETTER );
    public final java_libbashParser.range_return range() throws RecognitionException {
        java_libbashParser.range_return retval = new java_libbashParser.range_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIGIT739=null;
        Token DOTDOT740=null;
        Token DIGIT741=null;
        Token LETTER742=null;
        Token DOTDOT743=null;
        Token LETTER744=null;

        CommonTree DIGIT739_tree=null;
        CommonTree DOTDOT740_tree=null;
        CommonTree DIGIT741_tree=null;
        CommonTree LETTER742_tree=null;
        CommonTree DOTDOT743_tree=null;
        CommonTree LETTER744_tree=null;

        try {
            // java_libbash.g:900:2: ( DIGIT DOTDOT DIGIT | LETTER DOTDOT LETTER )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==DIGIT) ) {
                alt219=1;
            }
            else if ( (LA219_0==LETTER) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // java_libbash.g:900:4: DIGIT DOTDOT DIGIT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DIGIT739=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_range6308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT739_tree = (CommonTree)adaptor.create(DIGIT739);
                    adaptor.addChild(root_0, DIGIT739_tree);
                    }
                    DOTDOT740=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_range6310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTDOT740_tree = (CommonTree)adaptor.create(DOTDOT740);
                    root_0 = (CommonTree)adaptor.becomeRoot(DOTDOT740_tree, root_0);
                    }
                    DIGIT741=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_range6313); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIGIT741_tree = (CommonTree)adaptor.create(DIGIT741);
                    adaptor.addChild(root_0, DIGIT741_tree);
                    }

                    }
                    break;
                case 2 :
                    // java_libbash.g:901:4: LETTER DOTDOT LETTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LETTER742=(Token)match(input,LETTER,FOLLOW_LETTER_in_range6318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LETTER742_tree = (CommonTree)adaptor.create(LETTER742);
                    adaptor.addChild(root_0, LETTER742_tree);
                    }
                    DOTDOT743=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_range6320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOTDOT743_tree = (CommonTree)adaptor.create(DOTDOT743);
                    root_0 = (CommonTree)adaptor.becomeRoot(DOTDOT743_tree, root_0);
                    }
                    LETTER744=(Token)match(input,LETTER,FOLLOW_LETTER_in_range6323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LETTER744_tree = (CommonTree)adaptor.create(LETTER744);
                    adaptor.addChild(root_0, LETTER744_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class brace_expansion_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brace_expansion_part"
    // java_libbash.g:902:1: brace_expansion_part : ( (~ COMMA )=> string_expr_part )* -> ^( STRING ( string_expr_part )* ) ;
    public final java_libbashParser.brace_expansion_part_return brace_expansion_part() throws RecognitionException {
        java_libbashParser.brace_expansion_part_return retval = new java_libbashParser.brace_expansion_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.string_expr_part_return string_expr_part745 = null;


        RewriteRuleSubtreeStream stream_string_expr_part=new RewriteRuleSubtreeStream(adaptor,"rule string_expr_part");
        try {
            // java_libbash.g:903:2: ( ( (~ COMMA )=> string_expr_part )* -> ^( STRING ( string_expr_part )* ) )
            // java_libbash.g:903:4: ( (~ COMMA )=> string_expr_part )*
            {
            // java_libbash.g:903:4: ( (~ COMMA )=> string_expr_part )*
            loop220:
            do {
                int alt220=2;
                alt220 = dfa220.predict(input);
                switch (alt220) {
            	case 1 :
            	    // java_libbash.g:903:5: (~ COMMA )=> string_expr_part
            	    {
            	    pushFollow(FOLLOW_string_expr_part_in_brace_expansion_part6339);
            	    string_expr_part745=string_expr_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_string_expr_part.add(string_expr_part745.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);



            // AST REWRITE
            // elements: string_expr_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 903:36: -> ^( STRING ( string_expr_part )* )
            {
                // java_libbash.g:903:39: ^( STRING ( string_expr_part )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                // java_libbash.g:903:48: ( string_expr_part )*
                while ( stream_string_expr_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_string_expr_part.nextTree());

                }
                stream_string_expr_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brace_expansion_part"

    public static class commasep_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commasep"
    // java_libbash.g:904:1: commasep : brace_expansion_part ( COMMA brace_expansion_part )+ ;
    public final java_libbashParser.commasep_return commasep() throws RecognitionException {
        java_libbashParser.commasep_return retval = new java_libbashParser.commasep_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA747=null;
        java_libbashParser.brace_expansion_part_return brace_expansion_part746 = null;

        java_libbashParser.brace_expansion_part_return brace_expansion_part748 = null;


        CommonTree COMMA747_tree=null;

        try {
            // java_libbash.g:905:2: ( brace_expansion_part ( COMMA brace_expansion_part )+ )
            // java_libbash.g:905:4: brace_expansion_part ( COMMA brace_expansion_part )+
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_brace_expansion_part_in_commasep6358);
            brace_expansion_part746=brace_expansion_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion_part746.getTree());
            // java_libbash.g:905:25: ( COMMA brace_expansion_part )+
            int cnt221=0;
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // java_libbash.g:905:26: COMMA brace_expansion_part
            	    {
            	    COMMA747=(Token)match(input,COMMA,FOLLOW_COMMA_in_commasep6361); if (state.failed) return retval;
            	    pushFollow(FOLLOW_brace_expansion_part_in_commasep6364);
            	    brace_expansion_part748=brace_expansion_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion_part748.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt221 >= 1 ) break loop221;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(221, input);
                        throw eee;
                }
                cnt221++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "commasep"

    public static class explicit_arithmetic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicit_arithmetic"
    // java_libbash.g:907:1: explicit_arithmetic : ( ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_part | arithmetics );
    public final java_libbashParser.explicit_arithmetic_return explicit_arithmetic() throws RecognitionException {
        java_libbashParser.explicit_arithmetic_return retval = new java_libbashParser.explicit_arithmetic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.arithmetic_part_return arithmetic_part749 = null;

        java_libbashParser.arithmetics_return arithmetics750 = null;



        try {
            // java_libbash.g:908:2: ( ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_part | arithmetics )
            int alt222=2;
            alt222 = dfa222.predict(input);
            switch (alt222) {
                case 1 :
                    // java_libbash.g:908:4: ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_part
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_part_in_explicit_arithmetic6387);
                    arithmetic_part749=arithmetic_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_part749.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:909:4: arithmetics
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetics_in_explicit_arithmetic6392);
                    arithmetics750=arithmetics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetics750.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "explicit_arithmetic"

    public static class arithmetic_expansion_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic_expansion"
    // java_libbash.g:911:1: arithmetic_expansion : arithmetic_part -> ^( ARITHMETIC_EXPRESSION arithmetic_part ) ;
    public final java_libbashParser.arithmetic_expansion_return arithmetic_expansion() throws RecognitionException {
        java_libbashParser.arithmetic_expansion_return retval = new java_libbashParser.arithmetic_expansion_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.arithmetic_part_return arithmetic_part751 = null;


        RewriteRuleSubtreeStream stream_arithmetic_part=new RewriteRuleSubtreeStream(adaptor,"rule arithmetic_part");
        try {
            // java_libbash.g:912:2: ( arithmetic_part -> ^( ARITHMETIC_EXPRESSION arithmetic_part ) )
            // java_libbash.g:912:4: arithmetic_part
            {
            pushFollow(FOLLOW_arithmetic_part_in_arithmetic_expansion6401);
            arithmetic_part751=arithmetic_part();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arithmetic_part.add(arithmetic_part751.getTree());


            // AST REWRITE
            // elements: arithmetic_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 912:20: -> ^( ARITHMETIC_EXPRESSION arithmetic_part )
            {
                // java_libbash.g:912:23: ^( ARITHMETIC_EXPRESSION arithmetic_part )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARITHMETIC_EXPRESSION, "ARITHMETIC_EXPRESSION"), root_1);

                adaptor.addChild(root_1, stream_arithmetic_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic_expansion"

    public static class arithmetic_part_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic_part"
    // java_libbash.g:914:1: arithmetic_part : ( DOLLAR LLPAREN ( BLANK )? arithmetics ( BLANK )? RPAREN RPAREN -> arithmetics | DOLLAR LSQUARE ( BLANK )? arithmetics ( BLANK )? RSQUARE -> arithmetics );
    public final java_libbashParser.arithmetic_part_return arithmetic_part() throws RecognitionException {
        java_libbashParser.arithmetic_part_return retval = new java_libbashParser.arithmetic_part_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOLLAR752=null;
        Token LLPAREN753=null;
        Token BLANK754=null;
        Token BLANK756=null;
        Token RPAREN757=null;
        Token RPAREN758=null;
        Token DOLLAR759=null;
        Token LSQUARE760=null;
        Token BLANK761=null;
        Token BLANK763=null;
        Token RSQUARE764=null;
        java_libbashParser.arithmetics_return arithmetics755 = null;

        java_libbashParser.arithmetics_return arithmetics762 = null;


        CommonTree DOLLAR752_tree=null;
        CommonTree LLPAREN753_tree=null;
        CommonTree BLANK754_tree=null;
        CommonTree BLANK756_tree=null;
        CommonTree RPAREN757_tree=null;
        CommonTree RPAREN758_tree=null;
        CommonTree DOLLAR759_tree=null;
        CommonTree LSQUARE760_tree=null;
        CommonTree BLANK761_tree=null;
        CommonTree BLANK763_tree=null;
        CommonTree RSQUARE764_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LLPAREN=new RewriteRuleTokenStream(adaptor,"token LLPAREN");
        RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
        RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_arithmetics=new RewriteRuleSubtreeStream(adaptor,"rule arithmetics");
        try {
            // java_libbash.g:915:2: ( DOLLAR LLPAREN ( BLANK )? arithmetics ( BLANK )? RPAREN RPAREN -> arithmetics | DOLLAR LSQUARE ( BLANK )? arithmetics ( BLANK )? RSQUARE -> arithmetics )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==DOLLAR) ) {
                int LA227_1 = input.LA(2);

                if ( (LA227_1==LLPAREN) ) {
                    alt227=1;
                }
                else if ( (LA227_1==LSQUARE) ) {
                    alt227=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 227, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }
            switch (alt227) {
                case 1 :
                    // java_libbash.g:915:4: DOLLAR LLPAREN ( BLANK )? arithmetics ( BLANK )? RPAREN RPAREN
                    {
                    DOLLAR752=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_arithmetic_part6418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR752);

                    LLPAREN753=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_arithmetic_part6420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LLPAREN.add(LLPAREN753);

                    // java_libbash.g:915:19: ( BLANK )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==BLANK) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // java_libbash.g:915:19: BLANK
                            {
                            BLANK754=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_part6422); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK754);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arithmetics_in_arithmetic_part6425);
                    arithmetics755=arithmetics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arithmetics.add(arithmetics755.getTree());
                    // java_libbash.g:915:38: ( BLANK )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==BLANK) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // java_libbash.g:915:38: BLANK
                            {
                            BLANK756=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_part6427); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK756);


                            }
                            break;

                    }

                    RPAREN757=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arithmetic_part6430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN757);

                    RPAREN758=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_arithmetic_part6432); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN758);



                    // AST REWRITE
                    // elements: arithmetics
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 915:59: -> arithmetics
                    {
                        adaptor.addChild(root_0, stream_arithmetics.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:916:4: DOLLAR LSQUARE ( BLANK )? arithmetics ( BLANK )? RSQUARE
                    {
                    DOLLAR759=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_arithmetic_part6441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR759);

                    LSQUARE760=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_arithmetic_part6443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE760);

                    // java_libbash.g:916:19: ( BLANK )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==BLANK) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // java_libbash.g:916:19: BLANK
                            {
                            BLANK761=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_part6445); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK761);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_arithmetics_in_arithmetic_part6448);
                    arithmetics762=arithmetics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arithmetics.add(arithmetics762.getTree());
                    // java_libbash.g:916:38: ( BLANK )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==BLANK) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // java_libbash.g:916:38: BLANK
                            {
                            BLANK763=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_part6450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK763);


                            }
                            break;

                    }

                    RSQUARE764=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_arithmetic_part6453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE764);



                    // AST REWRITE
                    // elements: arithmetics
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 916:53: -> arithmetics
                    {
                        adaptor.addChild(root_0, stream_arithmetics.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic_part"

    public static class arithmetics_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetics"
    // java_libbash.g:918:1: arithmetics : arithmetic ( COMMA ( BLANK )? arithmetic )* -> ( ^( ARITHMETIC arithmetic ) )+ ;
    public final java_libbashParser.arithmetics_return arithmetics() throws RecognitionException {
        java_libbashParser.arithmetics_return retval = new java_libbashParser.arithmetics_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA766=null;
        Token BLANK767=null;
        java_libbashParser.arithmetic_return arithmetic765 = null;

        java_libbashParser.arithmetic_return arithmetic768 = null;


        CommonTree COMMA766_tree=null;
        CommonTree BLANK767_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule arithmetic");
        try {
            // java_libbash.g:919:2: ( arithmetic ( COMMA ( BLANK )? arithmetic )* -> ( ^( ARITHMETIC arithmetic ) )+ )
            // java_libbash.g:919:4: arithmetic ( COMMA ( BLANK )? arithmetic )*
            {
            pushFollow(FOLLOW_arithmetic_in_arithmetics6466);
            arithmetic765=arithmetic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arithmetic.add(arithmetic765.getTree());
            // java_libbash.g:919:15: ( COMMA ( BLANK )? arithmetic )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // java_libbash.g:919:16: COMMA ( BLANK )? arithmetic
            	    {
            	    COMMA766=(Token)match(input,COMMA,FOLLOW_COMMA_in_arithmetics6469); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA766);

            	    // java_libbash.g:919:22: ( BLANK )?
            	    int alt228=2;
            	    int LA228_0 = input.LA(1);

            	    if ( (LA228_0==BLANK) ) {
            	        alt228=1;
            	    }
            	    switch (alt228) {
            	        case 1 :
            	            // java_libbash.g:919:22: BLANK
            	            {
            	            BLANK767=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetics6471); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BLANK.add(BLANK767);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_arithmetic_in_arithmetics6474);
            	    arithmetic768=arithmetic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_arithmetic.add(arithmetic768.getTree());

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);



            // AST REWRITE
            // elements: arithmetic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 919:42: -> ( ^( ARITHMETIC arithmetic ) )+
            {
                if ( !(stream_arithmetic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_arithmetic.hasNext() ) {
                    // java_libbash.g:919:45: ^( ARITHMETIC arithmetic )
                    {
                    CommonTree root_1 = (CommonTree)adaptor.nil();
                    root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARITHMETIC, "ARITHMETIC"), root_1);

                    adaptor.addChild(root_1, stream_arithmetic.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_arithmetic.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetics"

    public static class arithmetics_test_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetics_test"
    // java_libbash.g:921:1: arithmetics_test : arithmetics EOF ;
    public final java_libbashParser.arithmetics_test_return arithmetics_test() throws RecognitionException {
        java_libbashParser.arithmetics_test_return retval = new java_libbashParser.arithmetics_test_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF770=null;
        java_libbashParser.arithmetics_return arithmetics769 = null;


        CommonTree EOF770_tree=null;

        try {
            // java_libbash.g:922:2: ( arithmetics EOF )
            // java_libbash.g:922:4: arithmetics EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_arithmetics_in_arithmetics_test6494);
            arithmetics769=arithmetics();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetics769.getTree());
            EOF770=(Token)match(input,EOF,FOLLOW_EOF_in_arithmetics_test6496); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetics_test"

    public static class arithmetic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic"
    // java_libbash.g:924:1: arithmetic : ( ( variable_name_no_digit ( BLANK )? arithmetic_assignment_operator )=> variable_name_no_digit ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | ( arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator )=> arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | cnd= logicor ( QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) | -> $cnd) );
    public final java_libbashParser.arithmetic_return arithmetic() throws RecognitionException {
        java_libbashParser.arithmetic_return retval = new java_libbashParser.arithmetic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK772=null;
        Token BLANK774=null;
        Token BLANK777=null;
        Token BLANK779=null;
        Token QMARK781=null;
        Token COLON782=null;
        java_libbashParser.logicor_return cnd = null;

        java_libbashParser.logicor_return t = null;

        java_libbashParser.logicor_return f = null;

        java_libbashParser.variable_name_no_digit_return variable_name_no_digit771 = null;

        java_libbashParser.arithmetic_assignment_operator_return arithmetic_assignment_operator773 = null;

        java_libbashParser.logicor_return logicor775 = null;

        java_libbashParser.arithmetic_variable_reference_return arithmetic_variable_reference776 = null;

        java_libbashParser.arithmetic_assignment_operator_return arithmetic_assignment_operator778 = null;

        java_libbashParser.logicor_return logicor780 = null;


        CommonTree BLANK772_tree=null;
        CommonTree BLANK774_tree=null;
        CommonTree BLANK777_tree=null;
        CommonTree BLANK779_tree=null;
        CommonTree QMARK781_tree=null;
        CommonTree COLON782_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
        RewriteRuleSubtreeStream stream_logicor=new RewriteRuleSubtreeStream(adaptor,"rule logicor");
        try {
            // java_libbash.g:925:2: ( ( variable_name_no_digit ( BLANK )? arithmetic_assignment_operator )=> variable_name_no_digit ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | ( arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator )=> arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | cnd= logicor ( QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) | -> $cnd) )
            int alt235=3;
            alt235 = dfa235.predict(input);
            switch (alt235) {
                case 1 :
                    // java_libbash.g:925:3: ( variable_name_no_digit ( BLANK )? arithmetic_assignment_operator )=> variable_name_no_digit ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_name_no_digit_in_arithmetic6518);
                    variable_name_no_digit771=variable_name_no_digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name_no_digit771.getTree());
                    // java_libbash.g:926:34: ( BLANK )?
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==BLANK) ) {
                        alt230=1;
                    }
                    switch (alt230) {
                        case 1 :
                            // java_libbash.g:926:34: BLANK
                            {
                            BLANK772=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic6520); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arithmetic_assignment_operator_in_arithmetic6524);
                    arithmetic_assignment_operator773=arithmetic_assignment_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(arithmetic_assignment_operator773.getTree(), root_0);
                    // java_libbash.g:926:74: ( BLANK )?
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==BLANK) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            // java_libbash.g:926:74: BLANK
                            {
                            BLANK774=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic6527); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_logicor_in_arithmetic6531);
                    logicor775=logicor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicor775.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:927:4: ( arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator )=> arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_variable_reference_in_arithmetic6550);
                    arithmetic_variable_reference776=arithmetic_variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_variable_reference776.getTree());
                    // java_libbash.g:928:42: ( BLANK )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==BLANK) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // java_libbash.g:928:42: BLANK
                            {
                            BLANK777=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic6552); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_arithmetic_assignment_operator_in_arithmetic6556);
                    arithmetic_assignment_operator778=arithmetic_assignment_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(arithmetic_assignment_operator778.getTree(), root_0);
                    // java_libbash.g:928:82: ( BLANK )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==BLANK) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // java_libbash.g:928:82: BLANK
                            {
                            BLANK779=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic6559); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_logicor_in_arithmetic6563);
                    logicor780=logicor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicor780.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:929:4: cnd= logicor ( QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) | -> $cnd)
                    {
                    pushFollow(FOLLOW_logicor_in_arithmetic6570);
                    cnd=logicor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicor.add(cnd.getTree());
                    // java_libbash.g:930:3: ( QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) | -> $cnd)
                    int alt234=2;
                    int LA234_0 = input.LA(1);

                    if ( (LA234_0==QMARK) ) {
                        alt234=1;
                    }
                    else if ( (LA234_0==EOF||(LA234_0>=EOL && LA234_0<=SEMIC)||LA234_0==RPAREN||LA234_0==RSQUARE||LA234_0==RBRACE||LA234_0==DOUBLE_SEMIC||LA234_0==COLON||LA234_0==COMMA) ) {
                        alt234=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 234, 0, input);

                        throw nvae;
                    }
                    switch (alt234) {
                        case 1 :
                            // java_libbash.g:931:4: QMARK t= logicor COLON f= logicor
                            {
                            QMARK781=(Token)match(input,QMARK,FOLLOW_QMARK_in_arithmetic6579); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QMARK.add(QMARK781);

                            pushFollow(FOLLOW_logicor_in_arithmetic6583);
                            t=logicor();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_logicor.add(t.getTree());
                            COLON782=(Token)match(input,COLON,FOLLOW_COLON_in_arithmetic6585); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(COLON782);

                            pushFollow(FOLLOW_logicor_in_arithmetic6589);
                            f=logicor();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_logicor.add(f.getTree());


                            // AST REWRITE
                            // elements: t, cnd, f
                            // token labels: 
                            // rule labels: f, retval, t, cnd
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.tree:null);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.tree:null);
                            RewriteRuleSubtreeStream stream_cnd=new RewriteRuleSubtreeStream(adaptor,"rule cnd",cnd!=null?cnd.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 931:36: -> ^( ARITHMETIC_CONDITION $cnd $t $f)
                            {
                                // java_libbash.g:931:39: ^( ARITHMETIC_CONDITION $cnd $t $f)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARITHMETIC_CONDITION, "ARITHMETIC_CONDITION"), root_1);

                                adaptor.addChild(root_1, stream_cnd.nextTree());
                                adaptor.addChild(root_1, stream_t.nextTree());
                                adaptor.addChild(root_1, stream_f.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // java_libbash.g:932:6: 
                            {

                            // AST REWRITE
                            // elements: cnd
                            // token labels: 
                            // rule labels: retval, cnd
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_cnd=new RewriteRuleSubtreeStream(adaptor,"rule cnd",cnd!=null?cnd.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 932:6: -> $cnd
                            {
                                adaptor.addChild(root_0, stream_cnd.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic"

    public static class arithmetic_assignment_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic_assignment_operator"
    // java_libbash.g:935:1: arithmetic_assignment_operator : ({...}? => EQUALS | TIMES EQUALS -> MUL_ASSIGN | SLASH EQUALS -> DIVIDE_ASSIGN | PCT EQUALS -> MOD_ASSIGN | PLUS EQUALS -> PLUS_ASSIGN | MINUS EQUALS -> MINUS_ASSIGN | LSHIFT EQUALS -> LSHIFT_ASSIGN | RSHIFT EQUALS -> RSHIFT_ASSIGN | AMP EQUALS -> AND_ASSIGN | CARET EQUALS -> XOR_ASSIGN | PIPE EQUALS -> OR_ASSIGN );
    public final java_libbashParser.arithmetic_assignment_operator_return arithmetic_assignment_operator() throws RecognitionException {
        java_libbashParser.arithmetic_assignment_operator_return retval = new java_libbashParser.arithmetic_assignment_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS783=null;
        Token TIMES784=null;
        Token EQUALS785=null;
        Token SLASH786=null;
        Token EQUALS787=null;
        Token PCT788=null;
        Token EQUALS789=null;
        Token PLUS790=null;
        Token EQUALS791=null;
        Token MINUS792=null;
        Token EQUALS793=null;
        Token LSHIFT794=null;
        Token EQUALS795=null;
        Token RSHIFT796=null;
        Token EQUALS797=null;
        Token AMP798=null;
        Token EQUALS799=null;
        Token CARET800=null;
        Token EQUALS801=null;
        Token PIPE802=null;
        Token EQUALS803=null;

        CommonTree EQUALS783_tree=null;
        CommonTree TIMES784_tree=null;
        CommonTree EQUALS785_tree=null;
        CommonTree SLASH786_tree=null;
        CommonTree EQUALS787_tree=null;
        CommonTree PCT788_tree=null;
        CommonTree EQUALS789_tree=null;
        CommonTree PLUS790_tree=null;
        CommonTree EQUALS791_tree=null;
        CommonTree MINUS792_tree=null;
        CommonTree EQUALS793_tree=null;
        CommonTree LSHIFT794_tree=null;
        CommonTree EQUALS795_tree=null;
        CommonTree RSHIFT796_tree=null;
        CommonTree EQUALS797_tree=null;
        CommonTree AMP798_tree=null;
        CommonTree EQUALS799_tree=null;
        CommonTree CARET800_tree=null;
        CommonTree EQUALS801_tree=null;
        CommonTree PIPE802_tree=null;
        CommonTree EQUALS803_tree=null;
        RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_SLASH=new RewriteRuleTokenStream(adaptor,"token SLASH");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_PCT=new RewriteRuleTokenStream(adaptor,"token PCT");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
        RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");
        RewriteRuleTokenStream stream_RSHIFT=new RewriteRuleTokenStream(adaptor,"token RSHIFT");
        RewriteRuleTokenStream stream_LSHIFT=new RewriteRuleTokenStream(adaptor,"token LSHIFT");
        RewriteRuleTokenStream stream_CARET=new RewriteRuleTokenStream(adaptor,"token CARET");

        try {
            // java_libbash.g:936:2: ({...}? => EQUALS | TIMES EQUALS -> MUL_ASSIGN | SLASH EQUALS -> DIVIDE_ASSIGN | PCT EQUALS -> MOD_ASSIGN | PLUS EQUALS -> PLUS_ASSIGN | MINUS EQUALS -> MINUS_ASSIGN | LSHIFT EQUALS -> LSHIFT_ASSIGN | RSHIFT EQUALS -> RSHIFT_ASSIGN | AMP EQUALS -> AND_ASSIGN | CARET EQUALS -> XOR_ASSIGN | PIPE EQUALS -> OR_ASSIGN )
            int alt236=11;
            alt236 = dfa236.predict(input);
            switch (alt236) {
                case 1 :
                    // java_libbash.g:936:4: {...}? => EQUALS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((LA(1) == EQUALS && LA(2) != EQUALS)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "arithmetic_assignment_operator", "LA(1) == EQUALS && LA(2) != EQUALS");
                    }
                    EQUALS783=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS783_tree = (CommonTree)adaptor.create(EQUALS783);
                    adaptor.addChild(root_0, EQUALS783_tree);
                    }

                    }
                    break;
                case 2 :
                    // java_libbash.g:937:4: TIMES EQUALS
                    {
                    TIMES784=(Token)match(input,TIMES,FOLLOW_TIMES_in_arithmetic_assignment_operator6636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMES.add(TIMES784);

                    EQUALS785=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS785);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:17: -> MUL_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MUL_ASSIGN, "MUL_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:938:4: SLASH EQUALS
                    {
                    SLASH786=(Token)match(input,SLASH,FOLLOW_SLASH_in_arithmetic_assignment_operator6647); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SLASH.add(SLASH786);

                    EQUALS787=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS787);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 938:17: -> DIVIDE_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DIVIDE_ASSIGN, "DIVIDE_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:939:4: PCT EQUALS
                    {
                    PCT788=(Token)match(input,PCT,FOLLOW_PCT_in_arithmetic_assignment_operator6658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PCT.add(PCT788);

                    EQUALS789=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS789);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 939:15: -> MOD_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MOD_ASSIGN, "MOD_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // java_libbash.g:940:4: PLUS EQUALS
                    {
                    PLUS790=(Token)match(input,PLUS,FOLLOW_PLUS_in_arithmetic_assignment_operator6669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS790);

                    EQUALS791=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6671); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS791);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 940:16: -> PLUS_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PLUS_ASSIGN, "PLUS_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:941:4: MINUS EQUALS
                    {
                    MINUS792=(Token)match(input,MINUS,FOLLOW_MINUS_in_arithmetic_assignment_operator6680); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS792);

                    EQUALS793=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6682); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS793);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 941:17: -> MINUS_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(MINUS_ASSIGN, "MINUS_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // java_libbash.g:942:4: LSHIFT EQUALS
                    {
                    LSHIFT794=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_arithmetic_assignment_operator6691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LSHIFT.add(LSHIFT794);

                    EQUALS795=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS795);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 942:18: -> LSHIFT_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LSHIFT_ASSIGN, "LSHIFT_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // java_libbash.g:943:4: RSHIFT EQUALS
                    {
                    RSHIFT796=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_arithmetic_assignment_operator6702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSHIFT.add(RSHIFT796);

                    EQUALS797=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS797);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 943:18: -> RSHIFT_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(RSHIFT_ASSIGN, "RSHIFT_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // java_libbash.g:944:4: AMP EQUALS
                    {
                    AMP798=(Token)match(input,AMP,FOLLOW_AMP_in_arithmetic_assignment_operator6713); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMP.add(AMP798);

                    EQUALS799=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS799);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 944:15: -> AND_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(AND_ASSIGN, "AND_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // java_libbash.g:945:4: CARET EQUALS
                    {
                    CARET800=(Token)match(input,CARET,FOLLOW_CARET_in_arithmetic_assignment_operator6724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CARET.add(CARET800);

                    EQUALS801=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS801);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 945:17: -> XOR_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(XOR_ASSIGN, "XOR_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // java_libbash.g:946:4: PIPE EQUALS
                    {
                    PIPE802=(Token)match(input,PIPE,FOLLOW_PIPE_in_arithmetic_assignment_operator6735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PIPE.add(PIPE802);

                    EQUALS803=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment_operator6737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS803);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 946:16: -> OR_ASSIGN
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(OR_ASSIGN, "OR_ASSIGN"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic_assignment_operator"

    public static class arithmetic_variable_reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmetic_variable_reference"
    // java_libbash.g:948:1: arithmetic_variable_reference : variable_reference -> ^( VAR_REF variable_reference ) ;
    public final java_libbashParser.arithmetic_variable_reference_return arithmetic_variable_reference() throws RecognitionException {
        java_libbashParser.arithmetic_variable_reference_return retval = new java_libbashParser.arithmetic_variable_reference_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.variable_reference_return variable_reference804 = null;


        RewriteRuleSubtreeStream stream_variable_reference=new RewriteRuleSubtreeStream(adaptor,"rule variable_reference");
        try {
            // java_libbash.g:949:2: ( variable_reference -> ^( VAR_REF variable_reference ) )
            // java_libbash.g:949:4: variable_reference
            {
            pushFollow(FOLLOW_variable_reference_in_arithmetic_variable_reference6750);
            variable_reference804=variable_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_reference.add(variable_reference804.getTree());


            // AST REWRITE
            // elements: variable_reference
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 949:23: -> ^( VAR_REF variable_reference )
            {
                // java_libbash.g:949:26: ^( VAR_REF variable_reference )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                adaptor.addChild(root_1, stream_variable_reference.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmetic_variable_reference"

    public static class primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // java_libbash.g:950:1: primary : ( num | command_substitution | variable_name_no_digit -> ^( VAR_REF variable_name_no_digit ) | variable_reference | arithmetic_expansion | LPAREN ( arithmetics ) RPAREN );
    public final java_libbashParser.primary_return primary() throws RecognitionException {
        java_libbashParser.primary_return retval = new java_libbashParser.primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN810=null;
        Token RPAREN812=null;
        java_libbashParser.num_return num805 = null;

        java_libbashParser.command_substitution_return command_substitution806 = null;

        java_libbashParser.variable_name_no_digit_return variable_name_no_digit807 = null;

        java_libbashParser.variable_reference_return variable_reference808 = null;

        java_libbashParser.arithmetic_expansion_return arithmetic_expansion809 = null;

        java_libbashParser.arithmetics_return arithmetics811 = null;


        CommonTree LPAREN810_tree=null;
        CommonTree RPAREN812_tree=null;
        RewriteRuleSubtreeStream stream_variable_name_no_digit=new RewriteRuleSubtreeStream(adaptor,"rule variable_name_no_digit");
        try {
            // java_libbash.g:951:2: ( num | command_substitution | variable_name_no_digit -> ^( VAR_REF variable_name_no_digit ) | variable_reference | arithmetic_expansion | LPAREN ( arithmetics ) RPAREN )
            int alt237=6;
            switch ( input.LA(1) ) {
            case DIGIT:
            case NUMBER:
                {
                alt237=1;
                }
                break;
            case COMMAND_SUBSTITUTION_PAREN:
            case COMMAND_SUBSTITUTION_TICK:
                {
                alt237=2;
                }
                break;
            case LETTER:
            case NAME:
            case UNDERSCORE:
                {
                alt237=3;
                }
                break;
            case DOLLAR:
                {
                int LA237_4 = input.LA(2);

                if ( (LA237_4==POUND||LA237_4==BANG||(LA237_4>=MINUS && LA237_4<=LETTER)||LA237_4==DIGIT||LA237_4==NAME||LA237_4==LBRACE||(LA237_4>=UNDERSCORE && LA237_4<=DOLLAR)||LA237_4==AT||(LA237_4>=TIMES && LA237_4<=QMARK)) ) {
                    alt237=4;
                }
                else if ( (LA237_4==LSQUARE||LA237_4==LLPAREN) ) {
                    alt237=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                alt237=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }

            switch (alt237) {
                case 1 :
                    // java_libbash.g:951:4: num
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_num_in_primary6766);
                    num805=num();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, num805.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:952:4: command_substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_command_substitution_in_primary6771);
                    command_substitution806=command_substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, command_substitution806.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:953:4: variable_name_no_digit
                    {
                    pushFollow(FOLLOW_variable_name_no_digit_in_primary6776);
                    variable_name_no_digit807=variable_name_no_digit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name_no_digit.add(variable_name_no_digit807.getTree());


                    // AST REWRITE
                    // elements: variable_name_no_digit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 953:27: -> ^( VAR_REF variable_name_no_digit )
                    {
                        // java_libbash.g:953:30: ^( VAR_REF variable_name_no_digit )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);

                        adaptor.addChild(root_1, stream_variable_name_no_digit.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:954:4: variable_reference
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_variable_reference_in_primary6789);
                    variable_reference808=variable_reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_reference808.getTree());

                    }
                    break;
                case 5 :
                    // java_libbash.g:955:4: arithmetic_expansion
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arithmetic_expansion_in_primary6794);
                    arithmetic_expansion809=arithmetic_expansion();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion809.getTree());

                    }
                    break;
                case 6 :
                    // java_libbash.g:956:4: LPAREN ( arithmetics ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN810=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primary6799); if (state.failed) return retval;
                    // java_libbash.g:956:12: ( arithmetics )
                    // java_libbash.g:956:13: arithmetics
                    {
                    pushFollow(FOLLOW_arithmetics_in_primary6803);
                    arithmetics811=arithmetics();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetics811.getTree());

                    }

                    RPAREN812=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primary6806); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class pre_post_primary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pre_post_primary"
    // java_libbash.g:957:1: pre_post_primary : ( DQUOTE )? primary ( DQUOTE )? ;
    public final java_libbashParser.pre_post_primary_return pre_post_primary() throws RecognitionException {
        java_libbashParser.pre_post_primary_return retval = new java_libbashParser.pre_post_primary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DQUOTE813=null;
        Token DQUOTE815=null;
        java_libbashParser.primary_return primary814 = null;


        CommonTree DQUOTE813_tree=null;
        CommonTree DQUOTE815_tree=null;

        try {
            // java_libbash.g:958:2: ( ( DQUOTE )? primary ( DQUOTE )? )
            // java_libbash.g:958:4: ( DQUOTE )? primary ( DQUOTE )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // java_libbash.g:958:10: ( DQUOTE )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==DQUOTE) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // java_libbash.g:958:10: DQUOTE
                    {
                    DQUOTE813=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_pre_post_primary6815); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_primary_in_pre_post_primary6819);
            primary814=primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, primary814.getTree());
            // java_libbash.g:958:27: ( DQUOTE )?
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==DQUOTE) ) {
                alt239=1;
            }
            switch (alt239) {
                case 1 :
                    // java_libbash.g:958:27: DQUOTE
                    {
                    DQUOTE815=(Token)match(input,DQUOTE,FOLLOW_DQUOTE_in_pre_post_primary6821); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pre_post_primary"

    public static class post_inc_dec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "post_inc_dec"
    // java_libbash.g:959:1: post_inc_dec : pre_post_primary ( ( BLANK )=> BLANK )? ( ( PLUS PLUS )=> ( BLANK )? PLUS PLUS -> ^( POST_INCR pre_post_primary ) | ( MINUS MINUS )=> ( BLANK )? MINUS MINUS -> ^( POST_DECR pre_post_primary ) | -> pre_post_primary ) ;
    public final java_libbashParser.post_inc_dec_return post_inc_dec() throws RecognitionException {
        java_libbashParser.post_inc_dec_return retval = new java_libbashParser.post_inc_dec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK817=null;
        Token BLANK818=null;
        Token PLUS819=null;
        Token PLUS820=null;
        Token BLANK821=null;
        Token MINUS822=null;
        Token MINUS823=null;
        java_libbashParser.pre_post_primary_return pre_post_primary816 = null;


        CommonTree BLANK817_tree=null;
        CommonTree BLANK818_tree=null;
        CommonTree PLUS819_tree=null;
        CommonTree PLUS820_tree=null;
        CommonTree BLANK821_tree=null;
        CommonTree MINUS822_tree=null;
        CommonTree MINUS823_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_pre_post_primary=new RewriteRuleSubtreeStream(adaptor,"rule pre_post_primary");
        try {
            // java_libbash.g:960:2: ( pre_post_primary ( ( BLANK )=> BLANK )? ( ( PLUS PLUS )=> ( BLANK )? PLUS PLUS -> ^( POST_INCR pre_post_primary ) | ( MINUS MINUS )=> ( BLANK )? MINUS MINUS -> ^( POST_DECR pre_post_primary ) | -> pre_post_primary ) )
            // java_libbash.g:960:4: pre_post_primary ( ( BLANK )=> BLANK )? ( ( PLUS PLUS )=> ( BLANK )? PLUS PLUS -> ^( POST_INCR pre_post_primary ) | ( MINUS MINUS )=> ( BLANK )? MINUS MINUS -> ^( POST_DECR pre_post_primary ) | -> pre_post_primary )
            {
            pushFollow(FOLLOW_pre_post_primary_in_post_inc_dec6831);
            pre_post_primary816=pre_post_primary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pre_post_primary.add(pre_post_primary816.getTree());
            // java_libbash.g:960:21: ( ( BLANK )=> BLANK )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==BLANK) ) {
                int LA240_1 = input.LA(2);

                if ( (synpred75_java_libbash()) ) {
                    alt240=1;
                }
            }
            switch (alt240) {
                case 1 :
                    // java_libbash.g:960:22: ( BLANK )=> BLANK
                    {
                    BLANK817=(Token)match(input,BLANK,FOLLOW_BLANK_in_post_inc_dec6840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BLANK.add(BLANK817);


                    }
                    break;

            }

            // java_libbash.g:961:3: ( ( PLUS PLUS )=> ( BLANK )? PLUS PLUS -> ^( POST_INCR pre_post_primary ) | ( MINUS MINUS )=> ( BLANK )? MINUS MINUS -> ^( POST_DECR pre_post_primary ) | -> pre_post_primary )
            int alt243=3;
            alt243 = dfa243.predict(input);
            switch (alt243) {
                case 1 :
                    // java_libbash.g:962:4: ( PLUS PLUS )=> ( BLANK )? PLUS PLUS
                    {
                    // java_libbash.g:962:19: ( BLANK )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==BLANK) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // java_libbash.g:962:19: BLANK
                            {
                            BLANK818=(Token)match(input,BLANK,FOLLOW_BLANK_in_post_inc_dec6859); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK818);


                            }
                            break;

                    }

                    PLUS819=(Token)match(input,PLUS,FOLLOW_PLUS_in_post_inc_dec6862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS819);

                    PLUS820=(Token)match(input,PLUS,FOLLOW_PLUS_in_post_inc_dec6864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS820);



                    // AST REWRITE
                    // elements: pre_post_primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 962:36: -> ^( POST_INCR pre_post_primary )
                    {
                        // java_libbash.g:962:39: ^( POST_INCR pre_post_primary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INCR, "POST_INCR"), root_1);

                        adaptor.addChild(root_1, stream_pre_post_primary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:963:6: ( MINUS MINUS )=> ( BLANK )? MINUS MINUS
                    {
                    // java_libbash.g:963:23: ( BLANK )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==BLANK) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // java_libbash.g:963:23: BLANK
                            {
                            BLANK821=(Token)match(input,BLANK,FOLLOW_BLANK_in_post_inc_dec6887); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK821);


                            }
                            break;

                    }

                    MINUS822=(Token)match(input,MINUS,FOLLOW_MINUS_in_post_inc_dec6890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS822);

                    MINUS823=(Token)match(input,MINUS,FOLLOW_MINUS_in_post_inc_dec6892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS823);



                    // AST REWRITE
                    // elements: pre_post_primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 963:42: -> ^( POST_DECR pre_post_primary )
                    {
                        // java_libbash.g:963:45: ^( POST_DECR pre_post_primary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DECR, "POST_DECR"), root_1);

                        adaptor.addChild(root_1, stream_pre_post_primary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:964:6: 
                    {

                    // AST REWRITE
                    // elements: pre_post_primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:6: -> pre_post_primary
                    {
                        adaptor.addChild(root_0, stream_pre_post_primary.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "post_inc_dec"

    public static class pre_inc_dec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pre_inc_dec"
    // java_libbash.g:966:1: pre_inc_dec : ( PLUS PLUS ( BLANK )? pre_post_primary -> ^( PRE_INCR pre_post_primary ) | MINUS MINUS ( BLANK )? pre_post_primary -> ^( PRE_DECR pre_post_primary ) );
    public final java_libbashParser.pre_inc_dec_return pre_inc_dec() throws RecognitionException {
        java_libbashParser.pre_inc_dec_return retval = new java_libbashParser.pre_inc_dec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS824=null;
        Token PLUS825=null;
        Token BLANK826=null;
        Token MINUS828=null;
        Token MINUS829=null;
        Token BLANK830=null;
        java_libbashParser.pre_post_primary_return pre_post_primary827 = null;

        java_libbashParser.pre_post_primary_return pre_post_primary831 = null;


        CommonTree PLUS824_tree=null;
        CommonTree PLUS825_tree=null;
        CommonTree BLANK826_tree=null;
        CommonTree MINUS828_tree=null;
        CommonTree MINUS829_tree=null;
        CommonTree BLANK830_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleSubtreeStream stream_pre_post_primary=new RewriteRuleSubtreeStream(adaptor,"rule pre_post_primary");
        try {
            // java_libbash.g:967:2: ( PLUS PLUS ( BLANK )? pre_post_primary -> ^( PRE_INCR pre_post_primary ) | MINUS MINUS ( BLANK )? pre_post_primary -> ^( PRE_DECR pre_post_primary ) )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==PLUS) ) {
                alt246=1;
            }
            else if ( (LA246_0==MINUS) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // java_libbash.g:967:4: PLUS PLUS ( BLANK )? pre_post_primary
                    {
                    PLUS824=(Token)match(input,PLUS,FOLLOW_PLUS_in_pre_inc_dec6921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS824);

                    PLUS825=(Token)match(input,PLUS,FOLLOW_PLUS_in_pre_inc_dec6923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS825);

                    // java_libbash.g:967:14: ( BLANK )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==BLANK) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // java_libbash.g:967:14: BLANK
                            {
                            BLANK826=(Token)match(input,BLANK,FOLLOW_BLANK_in_pre_inc_dec6925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK826);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pre_post_primary_in_pre_inc_dec6928);
                    pre_post_primary827=pre_post_primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pre_post_primary.add(pre_post_primary827.getTree());


                    // AST REWRITE
                    // elements: pre_post_primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 967:38: -> ^( PRE_INCR pre_post_primary )
                    {
                        // java_libbash.g:967:41: ^( PRE_INCR pre_post_primary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INCR, "PRE_INCR"), root_1);

                        adaptor.addChild(root_1, stream_pre_post_primary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:968:4: MINUS MINUS ( BLANK )? pre_post_primary
                    {
                    MINUS828=(Token)match(input,MINUS,FOLLOW_MINUS_in_pre_inc_dec6941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS828);

                    MINUS829=(Token)match(input,MINUS,FOLLOW_MINUS_in_pre_inc_dec6943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS829);

                    // java_libbash.g:968:16: ( BLANK )?
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==BLANK) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            // java_libbash.g:968:16: BLANK
                            {
                            BLANK830=(Token)match(input,BLANK,FOLLOW_BLANK_in_pre_inc_dec6945); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK830);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_pre_post_primary_in_pre_inc_dec6948);
                    pre_post_primary831=pre_post_primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pre_post_primary.add(pre_post_primary831.getTree());


                    // AST REWRITE
                    // elements: pre_post_primary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 968:40: -> ^( PRE_DECR pre_post_primary )
                    {
                        // java_libbash.g:968:43: ^( PRE_DECR pre_post_primary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DECR, "PRE_DECR"), root_1);

                        adaptor.addChild(root_1, stream_pre_post_primary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pre_inc_dec"

    public static class unary_with_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary_with_operator"
    // java_libbash.g:969:1: unary_with_operator : ( PLUS ( BLANK )? unary -> ^( PLUS_SIGN unary ) | MINUS ( BLANK )? unary -> ^( MINUS_SIGN unary ) | TILDE ( BLANK )? unary -> ^( TILDE unary ) | BANG ( BLANK )? unary -> ^( BANG unary ) );
    public final java_libbashParser.unary_with_operator_return unary_with_operator() throws RecognitionException {
        java_libbashParser.unary_with_operator_return retval = new java_libbashParser.unary_with_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS832=null;
        Token BLANK833=null;
        Token MINUS835=null;
        Token BLANK836=null;
        Token TILDE838=null;
        Token BLANK839=null;
        Token BANG841=null;
        Token BLANK842=null;
        java_libbashParser.unary_return unary834 = null;

        java_libbashParser.unary_return unary837 = null;

        java_libbashParser.unary_return unary840 = null;

        java_libbashParser.unary_return unary843 = null;


        CommonTree PLUS832_tree=null;
        CommonTree BLANK833_tree=null;
        CommonTree MINUS835_tree=null;
        CommonTree BLANK836_tree=null;
        CommonTree TILDE838_tree=null;
        CommonTree BLANK839_tree=null;
        CommonTree BANG841_tree=null;
        CommonTree BLANK842_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
        RewriteRuleTokenStream stream_TILDE=new RewriteRuleTokenStream(adaptor,"token TILDE");
        RewriteRuleSubtreeStream stream_unary=new RewriteRuleSubtreeStream(adaptor,"rule unary");
        try {
            // java_libbash.g:970:2: ( PLUS ( BLANK )? unary -> ^( PLUS_SIGN unary ) | MINUS ( BLANK )? unary -> ^( MINUS_SIGN unary ) | TILDE ( BLANK )? unary -> ^( TILDE unary ) | BANG ( BLANK )? unary -> ^( BANG unary ) )
            int alt251=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt251=1;
                }
                break;
            case MINUS:
                {
                alt251=2;
                }
                break;
            case TILDE:
                {
                alt251=3;
                }
                break;
            case BANG:
                {
                alt251=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // java_libbash.g:970:4: PLUS ( BLANK )? unary
                    {
                    PLUS832=(Token)match(input,PLUS,FOLLOW_PLUS_in_unary_with_operator6964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(PLUS832);

                    // java_libbash.g:970:9: ( BLANK )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==BLANK) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // java_libbash.g:970:9: BLANK
                            {
                            BLANK833=(Token)match(input,BLANK,FOLLOW_BLANK_in_unary_with_operator6966); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK833);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_unary_in_unary_with_operator6969);
                    unary834=unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary.add(unary834.getTree());


                    // AST REWRITE
                    // elements: unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 970:22: -> ^( PLUS_SIGN unary )
                    {
                        // java_libbash.g:970:25: ^( PLUS_SIGN unary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PLUS_SIGN, "PLUS_SIGN"), root_1);

                        adaptor.addChild(root_1, stream_unary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:971:4: MINUS ( BLANK )? unary
                    {
                    MINUS835=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary_with_operator6982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS835);

                    // java_libbash.g:971:10: ( BLANK )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==BLANK) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // java_libbash.g:971:10: BLANK
                            {
                            BLANK836=(Token)match(input,BLANK,FOLLOW_BLANK_in_unary_with_operator6984); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK836);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_unary_in_unary_with_operator6987);
                    unary837=unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary.add(unary837.getTree());


                    // AST REWRITE
                    // elements: unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 971:23: -> ^( MINUS_SIGN unary )
                    {
                        // java_libbash.g:971:26: ^( MINUS_SIGN unary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUS_SIGN, "MINUS_SIGN"), root_1);

                        adaptor.addChild(root_1, stream_unary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:972:4: TILDE ( BLANK )? unary
                    {
                    TILDE838=(Token)match(input,TILDE,FOLLOW_TILDE_in_unary_with_operator7000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TILDE.add(TILDE838);

                    // java_libbash.g:972:10: ( BLANK )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==BLANK) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // java_libbash.g:972:10: BLANK
                            {
                            BLANK839=(Token)match(input,BLANK,FOLLOW_BLANK_in_unary_with_operator7002); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK839);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_unary_in_unary_with_operator7005);
                    unary840=unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary.add(unary840.getTree());


                    // AST REWRITE
                    // elements: TILDE, unary
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 972:23: -> ^( TILDE unary )
                    {
                        // java_libbash.g:972:26: ^( TILDE unary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_TILDE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // java_libbash.g:973:4: BANG ( BLANK )? unary
                    {
                    BANG841=(Token)match(input,BANG,FOLLOW_BANG_in_unary_with_operator7018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG841);

                    // java_libbash.g:973:9: ( BLANK )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==BLANK) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // java_libbash.g:973:9: BLANK
                            {
                            BLANK842=(Token)match(input,BLANK,FOLLOW_BLANK_in_unary_with_operator7020); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BLANK.add(BLANK842);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_unary_in_unary_with_operator7023);
                    unary843=unary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary.add(unary843.getTree());


                    // AST REWRITE
                    // elements: unary, BANG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 973:22: -> ^( BANG unary )
                    {
                        // java_libbash.g:973:25: ^( BANG unary )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_BANG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_unary.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary_with_operator"

    public static class unary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary"
    // java_libbash.g:974:1: unary : ( post_inc_dec | ( PLUS PLUS | MINUS MINUS )=> pre_inc_dec | ( PLUS | MINUS | TILDE | BANG )=> unary_with_operator );
    public final java_libbashParser.unary_return unary() throws RecognitionException {
        java_libbashParser.unary_return retval = new java_libbashParser.unary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        java_libbashParser.post_inc_dec_return post_inc_dec844 = null;

        java_libbashParser.pre_inc_dec_return pre_inc_dec845 = null;

        java_libbashParser.unary_with_operator_return unary_with_operator846 = null;



        try {
            // java_libbash.g:975:2: ( post_inc_dec | ( PLUS PLUS | MINUS MINUS )=> pre_inc_dec | ( PLUS | MINUS | TILDE | BANG )=> unary_with_operator )
            int alt252=3;
            alt252 = dfa252.predict(input);
            switch (alt252) {
                case 1 :
                    // java_libbash.g:975:4: post_inc_dec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_post_inc_dec_in_unary7039);
                    post_inc_dec844=post_inc_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, post_inc_dec844.getTree());

                    }
                    break;
                case 2 :
                    // java_libbash.g:976:4: ( PLUS PLUS | MINUS MINUS )=> pre_inc_dec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pre_inc_dec_in_unary7056);
                    pre_inc_dec845=pre_inc_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_inc_dec845.getTree());

                    }
                    break;
                case 3 :
                    // java_libbash.g:977:4: ( PLUS | MINUS | TILDE | BANG )=> unary_with_operator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unary_with_operator_in_unary7073);
                    unary_with_operator846=unary_with_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_with_operator846.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary"

    public static class exponential_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exponential"
    // java_libbash.g:978:1: exponential : unary ( EXP ( BLANK )? unary )* ;
    public final java_libbashParser.exponential_return exponential() throws RecognitionException {
        java_libbashParser.exponential_return retval = new java_libbashParser.exponential_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXP848=null;
        Token BLANK849=null;
        java_libbashParser.unary_return unary847 = null;

        java_libbashParser.unary_return unary850 = null;


        CommonTree EXP848_tree=null;
        CommonTree BLANK849_tree=null;

        try {
            // java_libbash.g:979:2: ( unary ( EXP ( BLANK )? unary )* )
            // java_libbash.g:979:4: unary ( EXP ( BLANK )? unary )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_in_exponential7081);
            unary847=unary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary847.getTree());
            // java_libbash.g:979:10: ( EXP ( BLANK )? unary )*
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==EXP) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // java_libbash.g:979:11: EXP ( BLANK )? unary
            	    {
            	    EXP848=(Token)match(input,EXP,FOLLOW_EXP_in_exponential7084); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EXP848_tree = (CommonTree)adaptor.create(EXP848);
            	    root_0 = (CommonTree)adaptor.becomeRoot(EXP848_tree, root_0);
            	    }
            	    // java_libbash.g:979:21: ( BLANK )?
            	    int alt253=2;
            	    int LA253_0 = input.LA(1);

            	    if ( (LA253_0==BLANK) ) {
            	        alt253=1;
            	    }
            	    switch (alt253) {
            	        case 1 :
            	            // java_libbash.g:979:21: BLANK
            	            {
            	            BLANK849=(Token)match(input,BLANK,FOLLOW_BLANK_in_exponential7087); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unary_in_exponential7091);
            	    unary850=unary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary850.getTree());

            	    }
            	    break;

            	default :
            	    break loop254;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exponential"

    public static class times_division_modulus_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "times_division_modulus"
    // java_libbash.g:980:1: times_division_modulus : exponential ( ( TIMES | SLASH | PCT ) ( BLANK )? exponential )* ;
    public final java_libbashParser.times_division_modulus_return times_division_modulus() throws RecognitionException {
        java_libbashParser.times_division_modulus_return retval = new java_libbashParser.times_division_modulus_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TIMES852=null;
        Token SLASH853=null;
        Token PCT854=null;
        Token BLANK855=null;
        java_libbashParser.exponential_return exponential851 = null;

        java_libbashParser.exponential_return exponential856 = null;


        CommonTree TIMES852_tree=null;
        CommonTree SLASH853_tree=null;
        CommonTree PCT854_tree=null;
        CommonTree BLANK855_tree=null;

        try {
            // java_libbash.g:981:2: ( exponential ( ( TIMES | SLASH | PCT ) ( BLANK )? exponential )* )
            // java_libbash.g:981:4: exponential ( ( TIMES | SLASH | PCT ) ( BLANK )? exponential )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_exponential_in_times_division_modulus7102);
            exponential851=exponential();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential851.getTree());
            // java_libbash.g:981:16: ( ( TIMES | SLASH | PCT ) ( BLANK )? exponential )*
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==SLASH||LA257_0==PCT||LA257_0==TIMES) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // java_libbash.g:981:17: ( TIMES | SLASH | PCT ) ( BLANK )? exponential
            	    {
            	    // java_libbash.g:981:17: ( TIMES | SLASH | PCT )
            	    int alt255=3;
            	    switch ( input.LA(1) ) {
            	    case TIMES:
            	        {
            	        alt255=1;
            	        }
            	        break;
            	    case SLASH:
            	        {
            	        alt255=2;
            	        }
            	        break;
            	    case PCT:
            	        {
            	        alt255=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 255, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt255) {
            	        case 1 :
            	            // java_libbash.g:981:18: TIMES
            	            {
            	            TIMES852=(Token)match(input,TIMES,FOLLOW_TIMES_in_times_division_modulus7106); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            TIMES852_tree = (CommonTree)adaptor.create(TIMES852);
            	            root_0 = (CommonTree)adaptor.becomeRoot(TIMES852_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // java_libbash.g:981:25: SLASH
            	            {
            	            SLASH853=(Token)match(input,SLASH,FOLLOW_SLASH_in_times_division_modulus7109); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SLASH853_tree = (CommonTree)adaptor.create(SLASH853);
            	            root_0 = (CommonTree)adaptor.becomeRoot(SLASH853_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // java_libbash.g:981:32: PCT
            	            {
            	            PCT854=(Token)match(input,PCT,FOLLOW_PCT_in_times_division_modulus7112); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PCT854_tree = (CommonTree)adaptor.create(PCT854);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PCT854_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // java_libbash.g:981:43: ( BLANK )?
            	    int alt256=2;
            	    int LA256_0 = input.LA(1);

            	    if ( (LA256_0==BLANK) ) {
            	        alt256=1;
            	    }
            	    switch (alt256) {
            	        case 1 :
            	            // java_libbash.g:981:43: BLANK
            	            {
            	            BLANK855=(Token)match(input,BLANK,FOLLOW_BLANK_in_times_division_modulus7116); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_exponential_in_times_division_modulus7120);
            	    exponential856=exponential();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential856.getTree());

            	    }
            	    break;

            	default :
            	    break loop257;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "times_division_modulus"

    public static class addsub_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "addsub"
    // java_libbash.g:982:1: addsub : times_division_modulus ( ( PLUS | MINUS ) ( BLANK )? times_division_modulus )* ;
    public final java_libbashParser.addsub_return addsub() throws RecognitionException {
        java_libbashParser.addsub_return retval = new java_libbashParser.addsub_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS858=null;
        Token MINUS859=null;
        Token BLANK860=null;
        java_libbashParser.times_division_modulus_return times_division_modulus857 = null;

        java_libbashParser.times_division_modulus_return times_division_modulus861 = null;


        CommonTree PLUS858_tree=null;
        CommonTree MINUS859_tree=null;
        CommonTree BLANK860_tree=null;

        try {
            // java_libbash.g:983:2: ( times_division_modulus ( ( PLUS | MINUS ) ( BLANK )? times_division_modulus )* )
            // java_libbash.g:983:4: times_division_modulus ( ( PLUS | MINUS ) ( BLANK )? times_division_modulus )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_times_division_modulus_in_addsub7130);
            times_division_modulus857=times_division_modulus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, times_division_modulus857.getTree());
            // java_libbash.g:983:27: ( ( PLUS | MINUS ) ( BLANK )? times_division_modulus )*
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==MINUS||LA260_0==PLUS) ) {
                    alt260=1;
                }


                switch (alt260) {
            	case 1 :
            	    // java_libbash.g:983:28: ( PLUS | MINUS ) ( BLANK )? times_division_modulus
            	    {
            	    // java_libbash.g:983:28: ( PLUS | MINUS )
            	    int alt258=2;
            	    int LA258_0 = input.LA(1);

            	    if ( (LA258_0==PLUS) ) {
            	        alt258=1;
            	    }
            	    else if ( (LA258_0==MINUS) ) {
            	        alt258=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 258, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt258) {
            	        case 1 :
            	            // java_libbash.g:983:29: PLUS
            	            {
            	            PLUS858=(Token)match(input,PLUS,FOLLOW_PLUS_in_addsub7134); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS858_tree = (CommonTree)adaptor.create(PLUS858);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS858_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // java_libbash.g:983:35: MINUS
            	            {
            	            MINUS859=(Token)match(input,MINUS,FOLLOW_MINUS_in_addsub7137); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS859_tree = (CommonTree)adaptor.create(MINUS859);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS859_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // java_libbash.g:983:48: ( BLANK )?
            	    int alt259=2;
            	    int LA259_0 = input.LA(1);

            	    if ( (LA259_0==BLANK) ) {
            	        alt259=1;
            	    }
            	    switch (alt259) {
            	        case 1 :
            	            // java_libbash.g:983:48: BLANK
            	            {
            	            BLANK860=(Token)match(input,BLANK,FOLLOW_BLANK_in_addsub7141); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_times_division_modulus_in_addsub7145);
            	    times_division_modulus861=times_division_modulus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, times_division_modulus861.getTree());

            	    }
            	    break;

            	default :
            	    break loop260;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "addsub"

    public static class shifts_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shifts"
    // java_libbash.g:984:1: shifts : addsub ( ( LSHIFT | RSHIFT ) ( BLANK )? addsub )* ;
    public final java_libbashParser.shifts_return shifts() throws RecognitionException {
        java_libbashParser.shifts_return retval = new java_libbashParser.shifts_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSHIFT863=null;
        Token RSHIFT864=null;
        Token BLANK865=null;
        java_libbashParser.addsub_return addsub862 = null;

        java_libbashParser.addsub_return addsub866 = null;


        CommonTree LSHIFT863_tree=null;
        CommonTree RSHIFT864_tree=null;
        CommonTree BLANK865_tree=null;

        try {
            // java_libbash.g:985:2: ( addsub ( ( LSHIFT | RSHIFT ) ( BLANK )? addsub )* )
            // java_libbash.g:985:4: addsub ( ( LSHIFT | RSHIFT ) ( BLANK )? addsub )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_addsub_in_shifts7155);
            addsub862=addsub();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, addsub862.getTree());
            // java_libbash.g:985:11: ( ( LSHIFT | RSHIFT ) ( BLANK )? addsub )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( ((LA263_0>=LSHIFT && LA263_0<=RSHIFT)) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // java_libbash.g:985:12: ( LSHIFT | RSHIFT ) ( BLANK )? addsub
            	    {
            	    // java_libbash.g:985:12: ( LSHIFT | RSHIFT )
            	    int alt261=2;
            	    int LA261_0 = input.LA(1);

            	    if ( (LA261_0==LSHIFT) ) {
            	        alt261=1;
            	    }
            	    else if ( (LA261_0==RSHIFT) ) {
            	        alt261=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 261, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt261) {
            	        case 1 :
            	            // java_libbash.g:985:13: LSHIFT
            	            {
            	            LSHIFT863=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_shifts7159); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LSHIFT863_tree = (CommonTree)adaptor.create(LSHIFT863);
            	            root_0 = (CommonTree)adaptor.becomeRoot(LSHIFT863_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // java_libbash.g:985:21: RSHIFT
            	            {
            	            RSHIFT864=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_shifts7162); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            RSHIFT864_tree = (CommonTree)adaptor.create(RSHIFT864);
            	            root_0 = (CommonTree)adaptor.becomeRoot(RSHIFT864_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    // java_libbash.g:985:35: ( BLANK )?
            	    int alt262=2;
            	    int LA262_0 = input.LA(1);

            	    if ( (LA262_0==BLANK) ) {
            	        alt262=1;
            	    }
            	    switch (alt262) {
            	        case 1 :
            	            // java_libbash.g:985:35: BLANK
            	            {
            	            BLANK865=(Token)match(input,BLANK,FOLLOW_BLANK_in_shifts7166); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_addsub_in_shifts7170);
            	    addsub866=addsub();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, addsub866.getTree());

            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shifts"

    public static class compare_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compare"
    // java_libbash.g:986:1: compare : shifts ( compare_operator ( BLANK )? shifts )? ;
    public final java_libbashParser.compare_return compare() throws RecognitionException {
        java_libbashParser.compare_return retval = new java_libbashParser.compare_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BLANK869=null;
        java_libbashParser.shifts_return shifts867 = null;

        java_libbashParser.compare_operator_return compare_operator868 = null;

        java_libbashParser.shifts_return shifts870 = null;


        CommonTree BLANK869_tree=null;

        try {
            // java_libbash.g:987:2: ( shifts ( compare_operator ( BLANK )? shifts )? )
            // java_libbash.g:987:4: shifts ( compare_operator ( BLANK )? shifts )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shifts_in_compare7180);
            shifts867=shifts();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, shifts867.getTree());
            // java_libbash.g:987:11: ( compare_operator ( BLANK )? shifts )?
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==BANG||(LA265_0>=LESS_THAN && LA265_0<=GREATER_THAN)||LA265_0==EQUALS) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    // java_libbash.g:987:12: compare_operator ( BLANK )? shifts
                    {
                    pushFollow(FOLLOW_compare_operator_in_compare7183);
                    compare_operator868=compare_operator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(compare_operator868.getTree(), root_0);
                    // java_libbash.g:987:35: ( BLANK )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==BLANK) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // java_libbash.g:987:35: BLANK
                            {
                            BLANK869=(Token)match(input,BLANK,FOLLOW_BLANK_in_compare7186); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_shifts_in_compare7190);
                    shifts870=shifts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, shifts870.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compare"

    public static class compare_operator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compare_operator"
    // java_libbash.g:988:1: compare_operator : ( LESS_THAN EQUALS -> LEQ | GREATER_THAN EQUALS -> GEQ | LESS_THAN | GREATER_THAN | EQUALS EQUALS -> EQUALS_TO | BANG EQUALS -> NOT_EQUALS );
    public final java_libbashParser.compare_operator_return compare_operator() throws RecognitionException {
        java_libbashParser.compare_operator_return retval = new java_libbashParser.compare_operator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LESS_THAN871=null;
        Token EQUALS872=null;
        Token GREATER_THAN873=null;
        Token EQUALS874=null;
        Token LESS_THAN875=null;
        Token GREATER_THAN876=null;
        Token EQUALS877=null;
        Token EQUALS878=null;
        Token BANG879=null;
        Token EQUALS880=null;

        CommonTree LESS_THAN871_tree=null;
        CommonTree EQUALS872_tree=null;
        CommonTree GREATER_THAN873_tree=null;
        CommonTree EQUALS874_tree=null;
        CommonTree LESS_THAN875_tree=null;
        CommonTree GREATER_THAN876_tree=null;
        CommonTree EQUALS877_tree=null;
        CommonTree EQUALS878_tree=null;
        CommonTree BANG879_tree=null;
        CommonTree EQUALS880_tree=null;
        RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_GREATER_THAN=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN");
        RewriteRuleTokenStream stream_LESS_THAN=new RewriteRuleTokenStream(adaptor,"token LESS_THAN");

        try {
            // java_libbash.g:989:2: ( LESS_THAN EQUALS -> LEQ | GREATER_THAN EQUALS -> GEQ | LESS_THAN | GREATER_THAN | EQUALS EQUALS -> EQUALS_TO | BANG EQUALS -> NOT_EQUALS )
            int alt266=6;
            switch ( input.LA(1) ) {
            case LESS_THAN:
                {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==EQUALS) ) {
                    alt266=1;
                }
                else if ( (LA266_1==BLANK||LA266_1==BANG||(LA266_1>=MINUS && LA266_1<=LETTER)||LA266_1==LPAREN||LA266_1==DIGIT||LA266_1==NAME||(LA266_1>=PLUS && LA266_1<=DQUOTE)||LA266_1==TILDE||(LA266_1>=UNDERSCORE && LA266_1<=DOLLAR)||(LA266_1>=COMMAND_SUBSTITUTION_PAREN && LA266_1<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt266=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;
                }
                }
                break;
            case GREATER_THAN:
                {
                int LA266_2 = input.LA(2);

                if ( (LA266_2==EQUALS) ) {
                    alt266=2;
                }
                else if ( (LA266_2==BLANK||LA266_2==BANG||(LA266_2>=MINUS && LA266_2<=LETTER)||LA266_2==LPAREN||LA266_2==DIGIT||LA266_2==NAME||(LA266_2>=PLUS && LA266_2<=DQUOTE)||LA266_2==TILDE||(LA266_2>=UNDERSCORE && LA266_2<=DOLLAR)||(LA266_2>=COMMAND_SUBSTITUTION_PAREN && LA266_2<=COMMAND_SUBSTITUTION_TICK)) ) {
                    alt266=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 2, input);

                    throw nvae;
                }
                }
                break;
            case EQUALS:
                {
                alt266=5;
                }
                break;
            case BANG:
                {
                alt266=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // java_libbash.g:989:4: LESS_THAN EQUALS
                    {
                    LESS_THAN871=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_compare_operator7200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LESS_THAN.add(LESS_THAN871);

                    EQUALS872=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_compare_operator7202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS872);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 989:21: -> LEQ
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LEQ, "LEQ"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // java_libbash.g:990:4: GREATER_THAN EQUALS
                    {
                    GREATER_THAN873=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_compare_operator7211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER_THAN.add(GREATER_THAN873);

                    EQUALS874=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_compare_operator7213); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS874);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 990:24: -> GEQ
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(GEQ, "GEQ"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // java_libbash.g:991:4: LESS_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESS_THAN875=(Token)match(input,LESS_THAN,FOLLOW_LESS_THAN_in_compare_operator7222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS_THAN875_tree = (CommonTree)adaptor.create(LESS_THAN875);
                    adaptor.addChild(root_0, LESS_THAN875_tree);
                    }

                    }
                    break;
                case 4 :
                    // java_libbash.g:992:4: GREATER_THAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATER_THAN876=(Token)match(input,GREATER_THAN,FOLLOW_GREATER_THAN_in_compare_operator7227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_THAN876_tree = (CommonTree)adaptor.create(GREATER_THAN876);
                    adaptor.addChild(root_0, GREATER_THAN876_tree);
                    }

                    }
                    break;
                case 5 :
                    // java_libbash.g:993:4: EQUALS EQUALS
                    {
                    EQUALS877=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_compare_operator7232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS877);

                    EQUALS878=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_compare_operator7234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS878);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 993:18: -> EQUALS_TO
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(EQUALS_TO, "EQUALS_TO"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // java_libbash.g:994:4: BANG EQUALS
                    {
                    BANG879=(Token)match(input,BANG,FOLLOW_BANG_in_compare_operator7243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BANG.add(BANG879);

                    EQUALS880=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_compare_operator7245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS880);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 994:16: -> NOT_EQUALS
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(NOT_EQUALS, "NOT_EQUALS"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compare_operator"

    public static class bitwiseand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseand"
    // java_libbash.g:995:1: bitwiseand : compare ( AMP ( BLANK )? compare )* ;
    public final java_libbashParser.bitwiseand_return bitwiseand() throws RecognitionException {
        java_libbashParser.bitwiseand_return retval = new java_libbashParser.bitwiseand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AMP882=null;
        Token BLANK883=null;
        java_libbashParser.compare_return compare881 = null;

        java_libbashParser.compare_return compare884 = null;


        CommonTree AMP882_tree=null;
        CommonTree BLANK883_tree=null;

        try {
            // java_libbash.g:996:2: ( compare ( AMP ( BLANK )? compare )* )
            // java_libbash.g:996:4: compare ( AMP ( BLANK )? compare )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_compare_in_bitwiseand7257);
            compare881=compare();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, compare881.getTree());
            // java_libbash.g:996:12: ( AMP ( BLANK )? compare )*
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);

                if ( (LA268_0==AMP) ) {
                    alt268=1;
                }


                switch (alt268) {
            	case 1 :
            	    // java_libbash.g:996:13: AMP ( BLANK )? compare
            	    {
            	    AMP882=(Token)match(input,AMP,FOLLOW_AMP_in_bitwiseand7260); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMP882_tree = (CommonTree)adaptor.create(AMP882);
            	    root_0 = (CommonTree)adaptor.becomeRoot(AMP882_tree, root_0);
            	    }
            	    // java_libbash.g:996:23: ( BLANK )?
            	    int alt267=2;
            	    int LA267_0 = input.LA(1);

            	    if ( (LA267_0==BLANK) ) {
            	        alt267=1;
            	    }
            	    switch (alt267) {
            	        case 1 :
            	            // java_libbash.g:996:23: BLANK
            	            {
            	            BLANK883=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseand7263); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_compare_in_bitwiseand7267);
            	    compare884=compare();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, compare884.getTree());

            	    }
            	    break;

            	default :
            	    break loop268;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitwiseand"

    public static class bitwisexor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwisexor"
    // java_libbash.g:997:1: bitwisexor : bitwiseand ( CARET ( BLANK )? bitwiseand )* ;
    public final java_libbashParser.bitwisexor_return bitwisexor() throws RecognitionException {
        java_libbashParser.bitwisexor_return retval = new java_libbashParser.bitwisexor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CARET886=null;
        Token BLANK887=null;
        java_libbashParser.bitwiseand_return bitwiseand885 = null;

        java_libbashParser.bitwiseand_return bitwiseand888 = null;


        CommonTree CARET886_tree=null;
        CommonTree BLANK887_tree=null;

        try {
            // java_libbash.g:998:2: ( bitwiseand ( CARET ( BLANK )? bitwiseand )* )
            // java_libbash.g:998:4: bitwiseand ( CARET ( BLANK )? bitwiseand )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bitwiseand_in_bitwisexor7277);
            bitwiseand885=bitwiseand();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseand885.getTree());
            // java_libbash.g:998:15: ( CARET ( BLANK )? bitwiseand )*
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);

                if ( (LA270_0==CARET) ) {
                    alt270=1;
                }


                switch (alt270) {
            	case 1 :
            	    // java_libbash.g:998:16: CARET ( BLANK )? bitwiseand
            	    {
            	    CARET886=(Token)match(input,CARET,FOLLOW_CARET_in_bitwisexor7280); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    CARET886_tree = (CommonTree)adaptor.create(CARET886);
            	    root_0 = (CommonTree)adaptor.becomeRoot(CARET886_tree, root_0);
            	    }
            	    // java_libbash.g:998:28: ( BLANK )?
            	    int alt269=2;
            	    int LA269_0 = input.LA(1);

            	    if ( (LA269_0==BLANK) ) {
            	        alt269=1;
            	    }
            	    switch (alt269) {
            	        case 1 :
            	            // java_libbash.g:998:28: BLANK
            	            {
            	            BLANK887=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwisexor7283); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bitwiseand_in_bitwisexor7287);
            	    bitwiseand888=bitwiseand();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseand888.getTree());

            	    }
            	    break;

            	default :
            	    break loop270;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitwisexor"

    public static class bitwiseor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitwiseor"
    // java_libbash.g:999:1: bitwiseor : bitwisexor ( PIPE ( BLANK )? bitwisexor )* ;
    public final java_libbashParser.bitwiseor_return bitwiseor() throws RecognitionException {
        java_libbashParser.bitwiseor_return retval = new java_libbashParser.bitwiseor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PIPE890=null;
        Token BLANK891=null;
        java_libbashParser.bitwisexor_return bitwisexor889 = null;

        java_libbashParser.bitwisexor_return bitwisexor892 = null;


        CommonTree PIPE890_tree=null;
        CommonTree BLANK891_tree=null;

        try {
            // java_libbash.g:1000:2: ( bitwisexor ( PIPE ( BLANK )? bitwisexor )* )
            // java_libbash.g:1000:4: bitwisexor ( PIPE ( BLANK )? bitwisexor )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bitwisexor_in_bitwiseor7297);
            bitwisexor889=bitwisexor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwisexor889.getTree());
            // java_libbash.g:1000:15: ( PIPE ( BLANK )? bitwisexor )*
            loop272:
            do {
                int alt272=2;
                int LA272_0 = input.LA(1);

                if ( (LA272_0==PIPE) ) {
                    alt272=1;
                }


                switch (alt272) {
            	case 1 :
            	    // java_libbash.g:1000:16: PIPE ( BLANK )? bitwisexor
            	    {
            	    PIPE890=(Token)match(input,PIPE,FOLLOW_PIPE_in_bitwiseor7300); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE890_tree = (CommonTree)adaptor.create(PIPE890);
            	    root_0 = (CommonTree)adaptor.becomeRoot(PIPE890_tree, root_0);
            	    }
            	    // java_libbash.g:1000:27: ( BLANK )?
            	    int alt271=2;
            	    int LA271_0 = input.LA(1);

            	    if ( (LA271_0==BLANK) ) {
            	        alt271=1;
            	    }
            	    switch (alt271) {
            	        case 1 :
            	            // java_libbash.g:1000:27: BLANK
            	            {
            	            BLANK891=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseor7303); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bitwisexor_in_bitwiseor7307);
            	    bitwisexor892=bitwisexor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwisexor892.getTree());

            	    }
            	    break;

            	default :
            	    break loop272;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitwiseor"

    public static class logicand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicand"
    // java_libbash.g:1001:1: logicand : bitwiseor ( LOGICAND ( BLANK )? bitwiseor )* ;
    public final java_libbashParser.logicand_return logicand() throws RecognitionException {
        java_libbashParser.logicand_return retval = new java_libbashParser.logicand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LOGICAND894=null;
        Token BLANK895=null;
        java_libbashParser.bitwiseor_return bitwiseor893 = null;

        java_libbashParser.bitwiseor_return bitwiseor896 = null;


        CommonTree LOGICAND894_tree=null;
        CommonTree BLANK895_tree=null;

        try {
            // java_libbash.g:1002:2: ( bitwiseor ( LOGICAND ( BLANK )? bitwiseor )* )
            // java_libbash.g:1002:4: bitwiseor ( LOGICAND ( BLANK )? bitwiseor )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_bitwiseor_in_logicand7317);
            bitwiseor893=bitwiseor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseor893.getTree());
            // java_libbash.g:1002:14: ( LOGICAND ( BLANK )? bitwiseor )*
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==LOGICAND) ) {
                    alt274=1;
                }


                switch (alt274) {
            	case 1 :
            	    // java_libbash.g:1002:15: LOGICAND ( BLANK )? bitwiseor
            	    {
            	    LOGICAND894=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_logicand7320); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAND894_tree = (CommonTree)adaptor.create(LOGICAND894);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND894_tree, root_0);
            	    }
            	    // java_libbash.g:1002:30: ( BLANK )?
            	    int alt273=2;
            	    int LA273_0 = input.LA(1);

            	    if ( (LA273_0==BLANK) ) {
            	        alt273=1;
            	    }
            	    switch (alt273) {
            	        case 1 :
            	            // java_libbash.g:1002:30: BLANK
            	            {
            	            BLANK895=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicand7323); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_bitwiseor_in_logicand7327);
            	    bitwiseor896=bitwiseor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseor896.getTree());

            	    }
            	    break;

            	default :
            	    break loop274;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "logicand"

    public static class logicor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logicor"
    // java_libbash.g:1003:1: logicor : logicand ( LOGICOR ( BLANK )? logicand )* ;
    public final java_libbashParser.logicor_return logicor() throws RecognitionException {
        java_libbashParser.logicor_return retval = new java_libbashParser.logicor_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LOGICOR898=null;
        Token BLANK899=null;
        java_libbashParser.logicand_return logicand897 = null;

        java_libbashParser.logicand_return logicand900 = null;


        CommonTree LOGICOR898_tree=null;
        CommonTree BLANK899_tree=null;

        try {
            // java_libbash.g:1004:2: ( logicand ( LOGICOR ( BLANK )? logicand )* )
            // java_libbash.g:1004:4: logicand ( LOGICOR ( BLANK )? logicand )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_logicand_in_logicor7337);
            logicand897=logicand();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicand897.getTree());
            // java_libbash.g:1004:13: ( LOGICOR ( BLANK )? logicand )*
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==LOGICOR) ) {
                    alt276=1;
                }


                switch (alt276) {
            	case 1 :
            	    // java_libbash.g:1004:14: LOGICOR ( BLANK )? logicand
            	    {
            	    LOGICOR898=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_logicor7340); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICOR898_tree = (CommonTree)adaptor.create(LOGICOR898);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR898_tree, root_0);
            	    }
            	    // java_libbash.g:1004:28: ( BLANK )?
            	    int alt275=2;
            	    int LA275_0 = input.LA(1);

            	    if ( (LA275_0==BLANK) ) {
            	        alt275=1;
            	    }
            	    switch (alt275) {
            	        case 1 :
            	            // java_libbash.g:1004:28: BLANK
            	            {
            	            BLANK899=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicor7343); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_logicand_in_logicor7347);
            	    logicand900=logicand();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicand900.getTree());

            	    }
            	    break;

            	default :
            	    break loop276;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "logicor"

    // $ANTLR start synpred1_java_libbash
    public final void synpred1_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:197:5: ( POUND )
        // java_libbash.g:197:6: POUND
        {
        match(input,POUND,FOLLOW_POUND_in_synpred1_java_libbash457); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_java_libbash

    // $ANTLR start synpred2_java_libbash
    public final void synpred2_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:213:11: ( BANG )
        // java_libbash.g:213:12: BANG
        {
        match(input,BANG,FOLLOW_BANG_in_synpred2_java_libbash622); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_java_libbash

    // $ANTLR start synpred3_java_libbash
    public final void synpred3_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:216:18: ( time_posix )
        // java_libbash.g:216:19: time_posix
        {
        pushFollow(FOLLOW_time_posix_in_synpred3_java_libbash670);
        time_posix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_java_libbash

    // $ANTLR start synpred4_java_libbash
    public final void synpred4_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:232:4: ( ( BLANK )? file_descriptor )
        // java_libbash.g:232:5: ( BLANK )? file_descriptor
        {
        // java_libbash.g:232:5: ( BLANK )?
        int alt277=2;
        int LA277_0 = input.LA(1);

        if ( (LA277_0==BLANK) ) {
            alt277=1;
        }
        switch (alt277) {
            case 1 :
                // java_libbash.g:232:5: BLANK
                {
                match(input,BLANK,FOLLOW_BLANK_in_synpred4_java_libbash786); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_file_descriptor_in_synpred4_java_libbash789);
        file_descriptor();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_java_libbash

    // $ANTLR start synpred5_java_libbash
    public final void synpred5_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:240:36: ( string_expr )
        // java_libbash.g:240:37: string_expr
        {
        pushFollow(FOLLOW_string_expr_in_synpred5_java_libbash867);
        string_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_java_libbash

    // $ANTLR start synpred6_java_libbash
    public final void synpred6_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:252:11: ( here_document_operator )
        // java_libbash.g:252:12: here_document_operator
        {
        pushFollow(FOLLOW_here_document_operator_in_synpred6_java_libbash895);
        here_document_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_java_libbash

    // $ANTLR start synpred7_java_libbash
    public final void synpred7_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:259:4: ( MINUS )
        // java_libbash.g:259:5: MINUS
        {
        match(input,MINUS,FOLLOW_MINUS_in_synpred7_java_libbash955); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_java_libbash

    // $ANTLR start synpred8_java_libbash
    public final void synpred8_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:318:4: ( name ( LSQUARE | EQUALS | PLUS EQUALS ) )
        // java_libbash.g:318:5: name ( LSQUARE | EQUALS | PLUS EQUALS )
        {
        pushFollow(FOLLOW_name_in_synpred8_java_libbash1332);
        name();

        state._fsp--;
        if (state.failed) return ;
        // java_libbash.g:318:10: ( LSQUARE | EQUALS | PLUS EQUALS )
        int alt278=3;
        switch ( input.LA(1) ) {
        case LSQUARE:
            {
            alt278=1;
            }
            break;
        case EQUALS:
            {
            alt278=2;
            }
            break;
        case PLUS:
            {
            alt278=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 278, 0, input);

            throw nvae;
        }

        switch (alt278) {
            case 1 :
                // java_libbash.g:318:11: LSQUARE
                {
                match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred8_java_libbash1335); if (state.failed) return ;

                }
                break;
            case 2 :
                // java_libbash.g:318:19: EQUALS
                {
                match(input,EQUALS,FOLLOW_EQUALS_in_synpred8_java_libbash1337); if (state.failed) return ;

                }
                break;
            case 3 :
                // java_libbash.g:318:26: PLUS EQUALS
                {
                match(input,PLUS,FOLLOW_PLUS_in_synpred8_java_libbash1339); if (state.failed) return ;
                match(input,EQUALS,FOLLOW_EQUALS_in_synpred8_java_libbash1341); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred8_java_libbash

    // $ANTLR start synpred9_java_libbash
    public final void synpred9_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:320:5: ( BLANK bash_command )
        // java_libbash.g:320:6: BLANK bash_command
        {
        match(input,BLANK,FOLLOW_BLANK_in_synpred9_java_libbash1359); if (state.failed) return ;
        pushFollow(FOLLOW_bash_command_in_synpred9_java_libbash1361);
        bash_command();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_java_libbash

    // $ANTLR start synpred10_java_libbash
    public final void synpred10_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:323:4: ( EXPORT )
        // java_libbash.g:323:5: EXPORT
        {
        match(input,EXPORT,FOLLOW_EXPORT_in_synpred10_java_libbash1399); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_java_libbash

    // $ANTLR start synpred11_java_libbash
    public final void synpred11_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:325:4: ( LOCAL )
        // java_libbash.g:325:5: LOCAL
        {
        match(input,LOCAL,FOLLOW_LOCAL_in_synpred11_java_libbash1431); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_java_libbash

    // $ANTLR start synpred12_java_libbash
    public final void synpred12_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:327:4: ( DECLARE )
        // java_libbash.g:327:5: DECLARE
        {
        match(input,DECLARE,FOLLOW_DECLARE_in_synpred12_java_libbash1463); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_java_libbash

    // $ANTLR start synpred13_java_libbash
    public final void synpred13_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:331:4: ( ( BLANK )? parens )
        // java_libbash.g:331:5: ( BLANK )? parens
        {
        // java_libbash.g:331:5: ( BLANK )?
        int alt279=2;
        int LA279_0 = input.LA(1);

        if ( (LA279_0==BLANK) ) {
            alt279=1;
        }
        switch (alt279) {
            case 1 :
                // java_libbash.g:331:5: BLANK
                {
                match(input,BLANK,FOLLOW_BLANK_in_synpred13_java_libbash1504); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_parens_in_synpred13_java_libbash1507);
        parens();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_java_libbash

    // $ANTLR start synpred14_java_libbash
    public final void synpred14_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:353:30: ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )
        // java_libbash.g:353:31: BLANK name ( LSQUARE | EQUALS | PLUS EQUALS )
        {
        match(input,BLANK,FOLLOW_BLANK_in_synpred14_java_libbash1613); if (state.failed) return ;
        pushFollow(FOLLOW_name_in_synpred14_java_libbash1615);
        name();

        state._fsp--;
        if (state.failed) return ;
        // java_libbash.g:353:42: ( LSQUARE | EQUALS | PLUS EQUALS )
        int alt280=3;
        switch ( input.LA(1) ) {
        case LSQUARE:
            {
            alt280=1;
            }
            break;
        case EQUALS:
            {
            alt280=2;
            }
            break;
        case PLUS:
            {
            alt280=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 280, 0, input);

            throw nvae;
        }

        switch (alt280) {
            case 1 :
                // java_libbash.g:353:43: LSQUARE
                {
                match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred14_java_libbash1618); if (state.failed) return ;

                }
                break;
            case 2 :
                // java_libbash.g:353:51: EQUALS
                {
                match(input,EQUALS,FOLLOW_EQUALS_in_synpred14_java_libbash1620); if (state.failed) return ;

                }
                break;
            case 3 :
                // java_libbash.g:353:58: PLUS EQUALS
                {
                match(input,PLUS,FOLLOW_PLUS_in_synpred14_java_libbash1622); if (state.failed) return ;
                match(input,EQUALS,FOLLOW_EQUALS_in_synpred14_java_libbash1624); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred14_java_libbash

    // $ANTLR start synpred15_java_libbash
    public final void synpred15_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:383:4: ( LSQUARE )
        // java_libbash.g:383:5: LSQUARE
        {
        match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred15_java_libbash1858); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_java_libbash

    // $ANTLR start synpred16_java_libbash
    public final void synpred16_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:387:4: ( wspace RPAREN )
        // java_libbash.g:387:5: wspace RPAREN
        {
        pushFollow(FOLLOW_wspace_in_synpred16_java_libbash1903);
        wspace();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred16_java_libbash1905); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_java_libbash

    // $ANTLR start synpred17_java_libbash
    public final void synpred17_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:388:6: ( RPAREN )
        // java_libbash.g:388:7: RPAREN
        {
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred17_java_libbash1924); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_java_libbash

    // $ANTLR start synpred18_java_libbash
    public final void synpred18_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:406:4: ( LPAREN )
        // java_libbash.g:406:5: LPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred18_java_libbash1965); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_java_libbash

    // $ANTLR start synpred19_java_libbash
    public final void synpred19_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:407:5: ( RPAREN )
        // java_libbash.g:407:6: RPAREN
        {
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred19_java_libbash1979); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_java_libbash

    // $ANTLR start synpred20_java_libbash
    public final void synpred20_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:408:5: ( DQUOTE )
        // java_libbash.g:408:6: DQUOTE
        {
        match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred20_java_libbash1993); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_java_libbash

    // $ANTLR start synpred21_java_libbash
    public final void synpred21_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:409:5: (~ ( EOL | SEMIC ) )
        // java_libbash.g:409:6: ~ ( EOL | SEMIC )
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=FUNCTION)||input.LA(1)==BLANK||(input.LA(1)>=AMP && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred21_java_libbash

    // $ANTLR start synpred22_java_libbash
    public final void synpred22_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:421:4: ( MINUS LETTER BLANK )
        // java_libbash.g:421:5: MINUS LETTER BLANK
        {
        match(input,MINUS,FOLLOW_MINUS_in_synpred22_java_libbash2098); if (state.failed) return ;
        match(input,LETTER,FOLLOW_LETTER_in_synpred22_java_libbash2100); if (state.failed) return ;
        match(input,BLANK,FOLLOW_BLANK_in_synpred22_java_libbash2102); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_java_libbash

    // $ANTLR start synpred23_java_libbash
    public final void synpred23_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:425:34: ( BLANK bash_command_arguments )
        // java_libbash.g:425:35: BLANK bash_command_arguments
        {
        match(input,BLANK,FOLLOW_BLANK_in_synpred23_java_libbash2147); if (state.failed) return ;
        pushFollow(FOLLOW_bash_command_arguments_in_synpred23_java_libbash2149);
        bash_command_arguments();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_java_libbash

    // $ANTLR start synpred24_java_libbash
    public final void synpred24_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:431:4: ( LBRACE )
        // java_libbash.g:431:5: LBRACE
        {
        match(input,LBRACE,FOLLOW_LBRACE_in_synpred24_java_libbash2188); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_java_libbash

    // $ANTLR start synpred25_java_libbash
    public final void synpred25_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:433:4: ( brace_expansion )
        // java_libbash.g:433:5: brace_expansion
        {
        pushFollow(FOLLOW_brace_expansion_in_synpred25_java_libbash2201);
        brace_expansion();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_java_libbash

    // $ANTLR start synpred26_java_libbash
    public final void synpred26_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:510:4: ( wspace ESAC )
        // java_libbash.g:510:5: wspace ESAC
        {
        pushFollow(FOLLOW_wspace_in_synpred26_java_libbash2888);
        wspace();

        state._fsp--;
        if (state.failed) return ;
        match(input,ESAC,FOLLOW_ESAC_in_synpred26_java_libbash2890); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred26_java_libbash

    // $ANTLR start synpred27_java_libbash
    public final void synpred27_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:517:26: ( wspace ESAC )
        // java_libbash.g:517:27: wspace ESAC
        {
        pushFollow(FOLLOW_wspace_in_synpred27_java_libbash2989);
        wspace();

        state._fsp--;
        if (state.failed) return ;
        match(input,ESAC,FOLLOW_ESAC_in_synpred27_java_libbash2991); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_java_libbash

    // $ANTLR start synpred28_java_libbash
    public final void synpred28_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:550:4: ( BANG )
        // java_libbash.g:550:5: BANG
        {
        match(input,BANG,FOLLOW_BANG_in_synpred28_java_libbash3314); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred28_java_libbash

    // $ANTLR start synpred29_java_libbash
    public final void synpred29_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:551:4: ( unary_operator )
        // java_libbash.g:551:5: unary_operator
        {
        pushFollow(FOLLOW_unary_operator_in_synpred29_java_libbash3325);
        unary_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_java_libbash

    // $ANTLR start synpred30_java_libbash
    public final void synpred30_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:558:4: ( BLANK EQUALS TILDE )
        // java_libbash.g:558:5: BLANK EQUALS TILDE
        {
        match(input,BLANK,FOLLOW_BLANK_in_synpred30_java_libbash3367); if (state.failed) return ;
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred30_java_libbash3369); if (state.failed) return ;
        match(input,TILDE,FOLLOW_TILDE_in_synpred30_java_libbash3371); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_java_libbash

    // $ANTLR start synpred31_java_libbash
    public final void synpred31_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:584:5: ( ESC BLANK )
        // java_libbash.g:584:6: ESC BLANK
        {
        match(input,ESC,FOLLOW_ESC_in_synpred31_java_libbash3558); if (state.failed) return ;
        match(input,BLANK,FOLLOW_BLANK_in_synpred31_java_libbash3560); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_java_libbash

    // $ANTLR start synpred32_java_libbash
    public final void synpred32_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:612:4: ( BANG )
        // java_libbash.g:612:5: BANG
        {
        match(input,BANG,FOLLOW_BANG_in_synpred32_java_libbash3788); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_java_libbash

    // $ANTLR start synpred33_java_libbash
    public final void synpred33_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:613:4: ( unary_operator )
        // java_libbash.g:613:5: unary_operator
        {
        pushFollow(FOLLOW_unary_operator_in_synpred33_java_libbash3799);
        unary_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_java_libbash

    // $ANTLR start synpred34_java_libbash
    public final void synpred34_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:621:4: ( EQUALS EQUALS )
        // java_libbash.g:621:5: EQUALS EQUALS
        {
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred34_java_libbash3859); if (state.failed) return ;
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred34_java_libbash3861); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred34_java_libbash

    // $ANTLR start synpred37_java_libbash
    public final void synpred37_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:685:12: (~ DQUOTE )
        // java_libbash.g:685:13: ~ DQUOTE
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=PLUS)||(input.LA(1)>=LBRACE && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred37_java_libbash

    // $ANTLR start synpred38_java_libbash
    public final void synpred38_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:689:4: ( DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG ) )
        // java_libbash.g:689:5: DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG )
        {
        match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred38_java_libbash4275); if (state.failed) return ;
        // java_libbash.g:689:12: ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG )
        int alt281=10;
        switch ( input.LA(1) ) {
        case LBRACE:
            {
            alt281=1;
            }
            break;
        case LETTER:
        case NAME:
        case UNDERSCORE:
            {
            alt281=2;
            }
            break;
        case DIGIT:
        case NUMBER:
            {
            alt281=3;
            }
            break;
        case TIMES:
            {
            alt281=4;
            }
            break;
        case AT:
            {
            alt281=5;
            }
            break;
        case POUND:
            {
            alt281=6;
            }
            break;
        case QMARK:
            {
            alt281=7;
            }
            break;
        case MINUS:
            {
            alt281=8;
            }
            break;
        case DOLLAR:
            {
            alt281=9;
            }
            break;
        case BANG:
            {
            alt281=10;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 281, 0, input);

            throw nvae;
        }

        switch (alt281) {
            case 1 :
                // java_libbash.g:689:13: LBRACE
                {
                match(input,LBRACE,FOLLOW_LBRACE_in_synpred38_java_libbash4278); if (state.failed) return ;

                }
                break;
            case 2 :
                // java_libbash.g:689:20: name
                {
                pushFollow(FOLLOW_name_in_synpred38_java_libbash4280);
                name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // java_libbash.g:689:25: num
                {
                pushFollow(FOLLOW_num_in_synpred38_java_libbash4282);
                num();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // java_libbash.g:689:29: TIMES
                {
                match(input,TIMES,FOLLOW_TIMES_in_synpred38_java_libbash4284); if (state.failed) return ;

                }
                break;
            case 5 :
                // java_libbash.g:689:35: AT
                {
                match(input,AT,FOLLOW_AT_in_synpred38_java_libbash4286); if (state.failed) return ;

                }
                break;
            case 6 :
                // java_libbash.g:689:38: POUND
                {
                match(input,POUND,FOLLOW_POUND_in_synpred38_java_libbash4288); if (state.failed) return ;

                }
                break;
            case 7 :
                // java_libbash.g:689:44: QMARK
                {
                match(input,QMARK,FOLLOW_QMARK_in_synpred38_java_libbash4290); if (state.failed) return ;

                }
                break;
            case 8 :
                // java_libbash.g:689:50: MINUS
                {
                match(input,MINUS,FOLLOW_MINUS_in_synpred38_java_libbash4292); if (state.failed) return ;

                }
                break;
            case 9 :
                // java_libbash.g:689:56: DOLLAR
                {
                match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred38_java_libbash4294); if (state.failed) return ;

                }
                break;
            case 10 :
                // java_libbash.g:689:63: BANG
                {
                match(input,BANG,FOLLOW_BANG_in_synpred38_java_libbash4296); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred38_java_libbash

    // $ANTLR start synpred39_java_libbash
    public final void synpred39_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:690:4: ( command_substitution )
        // java_libbash.g:690:5: command_substitution
        {
        pushFollow(FOLLOW_command_substitution_in_synpred39_java_libbash4308);
        command_substitution();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_java_libbash

    // $ANTLR start synpred40_java_libbash
    public final void synpred40_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:691:4: ( DOLLAR ( LLPAREN | LSQUARE ) )
        // java_libbash.g:691:5: DOLLAR ( LLPAREN | LSQUARE )
        {
        match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred40_java_libbash4319); if (state.failed) return ;
        if ( input.LA(1)==LSQUARE||input.LA(1)==LLPAREN ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred40_java_libbash

    // $ANTLR start synpred41_java_libbash
    public final void synpred41_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:692:4: ( ESC DQUOTE )
        // java_libbash.g:692:5: ESC DQUOTE
        {
        match(input,ESC,FOLLOW_ESC_in_synpred41_java_libbash4336); if (state.failed) return ;
        match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred41_java_libbash4338); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_java_libbash

    // $ANTLR start synpred42_java_libbash
    public final void synpred42_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:693:4: ( ESC TICK )
        // java_libbash.g:693:5: ESC TICK
        {
        match(input,ESC,FOLLOW_ESC_in_synpred42_java_libbash4355); if (state.failed) return ;
        match(input,TICK,FOLLOW_TICK_in_synpred42_java_libbash4357); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_java_libbash

    // $ANTLR start synpred43_java_libbash
    public final void synpred43_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:694:4: ( ESC DOLLAR )
        // java_libbash.g:694:5: ESC DOLLAR
        {
        match(input,ESC,FOLLOW_ESC_in_synpred43_java_libbash4374); if (state.failed) return ;
        match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred43_java_libbash4376); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_java_libbash

    // $ANTLR start synpred44_java_libbash
    public final void synpred44_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:695:4: ( brace_expansion )
        // java_libbash.g:695:5: brace_expansion
        {
        pushFollow(FOLLOW_brace_expansion_in_synpred44_java_libbash4393);
        brace_expansion();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_java_libbash

    // $ANTLR start synpred45_java_libbash
    public final void synpred45_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:696:4: ( DOLLAR SINGLE_QUOTED_STRING_TOKEN )
        // java_libbash.g:696:5: DOLLAR SINGLE_QUOTED_STRING_TOKEN
        {
        match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred45_java_libbash4404); if (state.failed) return ;
        match(input,SINGLE_QUOTED_STRING_TOKEN,FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_synpred45_java_libbash4406); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_java_libbash

    // $ANTLR start synpred46_java_libbash
    public final void synpred46_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:703:4: ( DQUOTE )
        // java_libbash.g:703:5: DQUOTE
        {
        match(input,DQUOTE,FOLLOW_DQUOTE_in_synpred46_java_libbash4457); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_java_libbash

    // $ANTLR start synpred47_java_libbash
    public final void synpred47_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:722:4: ( DIGIT )
        // java_libbash.g:722:5: DIGIT
        {
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred47_java_libbash4585); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_java_libbash

    // $ANTLR start synpred48_java_libbash
    public final void synpred48_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:723:6: ( DIGIT DIGIT )
        // java_libbash.g:723:7: DIGIT DIGIT
        {
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred48_java_libbash4598); if (state.failed) return ;
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred48_java_libbash4600); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_java_libbash

    // $ANTLR start synpred49_java_libbash
    public final void synpred49_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:724:6: ( DIGIT DIGIT DIGIT )
        // java_libbash.g:724:7: DIGIT DIGIT DIGIT
        {
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred49_java_libbash4615); if (state.failed) return ;
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred49_java_libbash4617); if (state.failed) return ;
        match(input,DIGIT,FOLLOW_DIGIT_in_synpred49_java_libbash4619); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_java_libbash

    // $ANTLR start synpred50_java_libbash
    public final void synpred50_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:730:4: ( QMARK LPAREN )
        // java_libbash.g:730:5: QMARK LPAREN
        {
        match(input,QMARK,FOLLOW_QMARK_in_synpred50_java_libbash4661); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred50_java_libbash4663); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_java_libbash

    // $ANTLR start synpred51_java_libbash
    public final void synpred51_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:732:4: ( TIMES LPAREN )
        // java_libbash.g:732:5: TIMES LPAREN
        {
        match(input,TIMES,FOLLOW_TIMES_in_synpred51_java_libbash4699); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred51_java_libbash4701); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_java_libbash

    // $ANTLR start synpred52_java_libbash
    public final void synpred52_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:734:4: ( PLUS LPAREN )
        // java_libbash.g:734:5: PLUS LPAREN
        {
        match(input,PLUS,FOLLOW_PLUS_in_synpred52_java_libbash4737); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred52_java_libbash4739); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_java_libbash

    // $ANTLR start synpred53_java_libbash
    public final void synpred53_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:736:4: ( AT LPAREN )
        // java_libbash.g:736:5: AT LPAREN
        {
        match(input,AT,FOLLOW_AT_in_synpred53_java_libbash4775); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred53_java_libbash4777); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred53_java_libbash

    // $ANTLR start synpred54_java_libbash
    public final void synpred54_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:738:4: ( BANG LPAREN )
        // java_libbash.g:738:5: BANG LPAREN
        {
        match(input,BANG,FOLLOW_BANG_in_synpred54_java_libbash4813); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred54_java_libbash4815); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_java_libbash

    // $ANTLR start synpred55_java_libbash
    public final void synpred55_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:740:4: ( bracket_pattern_match )
        // java_libbash.g:740:5: bracket_pattern_match
        {
        pushFollow(FOLLOW_bracket_pattern_match_in_synpred55_java_libbash4851);
        bracket_pattern_match();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_java_libbash

    // $ANTLR start synpred56_java_libbash
    public final void synpred56_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:741:4: ( pattern_class_match )
        // java_libbash.g:741:5: pattern_class_match
        {
        pushFollow(FOLLOW_pattern_class_match_in_synpred56_java_libbash4862);
        pattern_class_match();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_java_libbash

    // $ANTLR start synpred57_java_libbash
    public final void synpred57_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:745:5: (~ ( RPAREN | PIPE ) )
        // java_libbash.g:745:6: ~ ( RPAREN | PIPE )
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=BANG)||(input.LA(1)>=TIME && input.LA(1)<=LPAREN)||(input.LA(1)>=DIGIT && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred57_java_libbash

    // $ANTLR start synpred58_java_libbash
    public final void synpred58_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:752:4: ( BANG )
        // java_libbash.g:752:5: BANG
        {
        match(input,BANG,FOLLOW_BANG_in_synpred58_java_libbash4949); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_java_libbash

    // $ANTLR start synpred59_java_libbash
    public final void synpred59_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:753:4: ( CARET )
        // java_libbash.g:753:5: CARET
        {
        match(input,CARET,FOLLOW_CARET_in_synpred59_java_libbash4964); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_java_libbash

    // $ANTLR start synpred60_java_libbash
    public final void synpred60_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:757:4: ( pattern_class_match )
        // java_libbash.g:757:5: pattern_class_match
        {
        pushFollow(FOLLOW_pattern_class_match_in_synpred60_java_libbash4990);
        pattern_class_match();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_java_libbash

    // $ANTLR start synpred61_java_libbash
    public final void synpred61_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:761:5: (~ RSQUARE )
        // java_libbash.g:761:6: ~ RSQUARE
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=LSQUARE)||(input.LA(1)>=EQUALS && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred61_java_libbash

    // $ANTLR start synpred62_java_libbash
    public final void synpred62_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:789:4: ( parameter_value_operator )
        // java_libbash.g:789:5: parameter_value_operator
        {
        pushFollow(FOLLOW_parameter_value_operator_in_synpred62_java_libbash5345);
        parameter_value_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_java_libbash

    // $ANTLR start synpred63_java_libbash
    public final void synpred63_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:815:4: ( POUND POUND )
        // java_libbash.g:815:5: POUND POUND
        {
        match(input,POUND,FOLLOW_POUND_in_synpred63_java_libbash5664); if (state.failed) return ;
        match(input,POUND,FOLLOW_POUND_in_synpred63_java_libbash5666); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_java_libbash

    // $ANTLR start synpred64_java_libbash
    public final void synpred64_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:829:4: ( SLASH )
        // java_libbash.g:829:5: SLASH
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred64_java_libbash5796); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_java_libbash

    // $ANTLR start synpred65_java_libbash
    public final void synpred65_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:830:5: (~ SLASH )
        // java_libbash.g:830:6: ~ SLASH
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=TICK)||(input.LA(1)>=OTHER && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred65_java_libbash

    // $ANTLR start synpred66_java_libbash
    public final void synpred66_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:844:4: (~ RBRACE )
        // java_libbash.g:844:5: ~ RBRACE
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=LBRACE)||(input.LA(1)>=FOR && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred66_java_libbash

    // $ANTLR start synpred67_java_libbash
    public final void synpred67_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:858:4: ( SLASH SLASH )
        // java_libbash.g:858:5: SLASH SLASH
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred67_java_libbash5948); if (state.failed) return ;
        match(input,SLASH,FOLLOW_SLASH_in_synpred67_java_libbash5950); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_java_libbash

    // $ANTLR start synpred68_java_libbash
    public final void synpred68_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:859:4: ( SLASH PCT )
        // java_libbash.g:859:5: SLASH PCT
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred68_java_libbash5967); if (state.failed) return ;
        match(input,PCT,FOLLOW_PCT_in_synpred68_java_libbash5969); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_java_libbash

    // $ANTLR start synpred69_java_libbash
    public final void synpred69_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:860:4: ( SLASH POUND )
        // java_libbash.g:860:5: SLASH POUND
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred69_java_libbash5986); if (state.failed) return ;
        match(input,POUND,FOLLOW_POUND_in_synpred69_java_libbash5988); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_java_libbash

    // $ANTLR start synpred70_java_libbash
    public final void synpred70_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:882:4: ( POUND name LSQUARE )
        // java_libbash.g:882:5: POUND name LSQUARE
        {
        match(input,POUND,FOLLOW_POUND_in_synpred70_java_libbash6160); if (state.failed) return ;
        pushFollow(FOLLOW_name_in_synpred70_java_libbash6162);
        name();

        state._fsp--;
        if (state.failed) return ;
        match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred70_java_libbash6164); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_java_libbash

    // $ANTLR start synpred71_java_libbash
    public final void synpred71_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:903:5: (~ COMMA )
        // java_libbash.g:903:6: ~ COMMA
        {
        if ( (input.LA(1)>=ANSI_C_QUOTING && input.LA(1)<=CARET)||(input.LA(1)>=AT && input.LA(1)<=CONTINUE_LINE) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred71_java_libbash

    // $ANTLR start synpred72_java_libbash
    public final void synpred72_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:908:4: ( DOLLAR ( LLPAREN | LSQUARE ) )
        // java_libbash.g:908:5: DOLLAR ( LLPAREN | LSQUARE )
        {
        match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred72_java_libbash6376); if (state.failed) return ;
        if ( input.LA(1)==LSQUARE||input.LA(1)==LLPAREN ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred72_java_libbash

    // $ANTLR start synpred73_java_libbash
    public final void synpred73_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:925:3: ( variable_name_no_digit ( BLANK )? arithmetic_assignment_operator )
        // java_libbash.g:925:4: variable_name_no_digit ( BLANK )? arithmetic_assignment_operator
        {
        pushFollow(FOLLOW_variable_name_no_digit_in_synpred73_java_libbash6506);
        variable_name_no_digit();

        state._fsp--;
        if (state.failed) return ;
        // java_libbash.g:925:27: ( BLANK )?
        int alt282=2;
        int LA282_0 = input.LA(1);

        if ( (LA282_0==BLANK) ) {
            alt282=1;
        }
        switch (alt282) {
            case 1 :
                // java_libbash.g:925:27: BLANK
                {
                match(input,BLANK,FOLLOW_BLANK_in_synpred73_java_libbash6508); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_arithmetic_assignment_operator_in_synpred73_java_libbash6511);
        arithmetic_assignment_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_java_libbash

    // $ANTLR start synpred74_java_libbash
    public final void synpred74_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:927:4: ( arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator )
        // java_libbash.g:927:5: arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator
        {
        pushFollow(FOLLOW_arithmetic_variable_reference_in_synpred74_java_libbash6537);
        arithmetic_variable_reference();

        state._fsp--;
        if (state.failed) return ;
        // java_libbash.g:927:35: ( BLANK )?
        int alt283=2;
        int LA283_0 = input.LA(1);

        if ( (LA283_0==BLANK) ) {
            alt283=1;
        }
        switch (alt283) {
            case 1 :
                // java_libbash.g:927:35: BLANK
                {
                match(input,BLANK,FOLLOW_BLANK_in_synpred74_java_libbash6539); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_arithmetic_assignment_operator_in_synpred74_java_libbash6542);
        arithmetic_assignment_operator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_java_libbash

    // $ANTLR start synpred75_java_libbash
    public final void synpred75_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:960:22: ( BLANK )
        // java_libbash.g:960:23: BLANK
        {
        match(input,BLANK,FOLLOW_BLANK_in_synpred75_java_libbash6835); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_java_libbash

    // $ANTLR start synpred76_java_libbash
    public final void synpred76_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:962:4: ( PLUS PLUS )
        // java_libbash.g:962:5: PLUS PLUS
        {
        match(input,PLUS,FOLLOW_PLUS_in_synpred76_java_libbash6852); if (state.failed) return ;
        match(input,PLUS,FOLLOW_PLUS_in_synpred76_java_libbash6854); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_java_libbash

    // $ANTLR start synpred77_java_libbash
    public final void synpred77_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:963:6: ( MINUS MINUS )
        // java_libbash.g:963:7: MINUS MINUS
        {
        match(input,MINUS,FOLLOW_MINUS_in_synpred77_java_libbash6880); if (state.failed) return ;
        match(input,MINUS,FOLLOW_MINUS_in_synpred77_java_libbash6882); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_java_libbash

    // $ANTLR start synpred78_java_libbash
    public final void synpred78_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:976:4: ( PLUS PLUS | MINUS MINUS )
        int alt284=2;
        int LA284_0 = input.LA(1);

        if ( (LA284_0==PLUS) ) {
            alt284=1;
        }
        else if ( (LA284_0==MINUS) ) {
            alt284=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 284, 0, input);

            throw nvae;
        }
        switch (alt284) {
            case 1 :
                // java_libbash.g:976:5: PLUS PLUS
                {
                match(input,PLUS,FOLLOW_PLUS_in_synpred78_java_libbash7045); if (state.failed) return ;
                match(input,PLUS,FOLLOW_PLUS_in_synpred78_java_libbash7047); if (state.failed) return ;

                }
                break;
            case 2 :
                // java_libbash.g:976:15: MINUS MINUS
                {
                match(input,MINUS,FOLLOW_MINUS_in_synpred78_java_libbash7049); if (state.failed) return ;
                match(input,MINUS,FOLLOW_MINUS_in_synpred78_java_libbash7051); if (state.failed) return ;

                }
                break;

        }}
    // $ANTLR end synpred78_java_libbash

    // $ANTLR start synpred79_java_libbash
    public final void synpred79_java_libbash_fragment() throws RecognitionException {   
        // java_libbash.g:977:4: ( PLUS | MINUS | TILDE | BANG )
        // java_libbash.g:
        {
        if ( input.LA(1)==BANG||input.LA(1)==MINUS||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred79_java_libbash

    // Delegated rules

    public final boolean synpred69_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_java_libbash() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_java_libbash_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA235 dfa235 = new DFA235(this);
    protected DFA236 dfa236 = new DFA236(this);
    protected DFA243 dfa243 = new DFA243(this);
    protected DFA252 dfa252 = new DFA252(this);
    static final String DFA1_eotS =
        "\77\uffff";
    static final String DFA1_eofS =
        "\77\uffff";
    static final String DFA1_minS =
        "\1\137\1\0\75\uffff";
    static final String DFA1_maxS =
        "\1\u00b1\1\0\75\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\3\uffff\1\2\6\uffff\3\2\47\uffff\1\2\6\uffff\1\1";
    static final String DFA1_specialS =
        "\1\0\1\1\75\uffff}>";
    static final String[] DFA1_transitionS = {
            "\2\2\2\uffff\1\1\2\uffff\1\2\1\uffff\1\2\2\17\2\67\1\6\1\uffff"+
            "\1\17\1\67\1\uffff\4\67\11\17\1\15\1\uffff\1\6\3\uffff\1\16"+
            "\1\uffff\2\6\4\uffff\3\6\1\uffff\10\17\1\uffff\24\17\2\uffff"+
            "\2\17",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "197:4: ( ( POUND )=> first_line_comment )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_0 = input.LA(1);

                         
                        int index1_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA1_0==POUND) ) {s = 1;}

                        else if ( ((LA1_0>=EOL && LA1_0<=BLANK)||LA1_0==BANG||LA1_0==TIME) ) {s = 2;}

                        else if ( (LA1_0==LPAREN||LA1_0==FOR||(LA1_0>=SELECT && LA1_0<=IF)||(LA1_0>=WHILE && LA1_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 6;}

                        else if ( (LA1_0==LBRACE) ) {s = 13;}

                        else if ( (LA1_0==LLPAREN) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 14;}

                        else if ( ((LA1_0>=MINUS && LA1_0<=LETTER)||LA1_0==DIGIT||(LA1_0>=NAME && LA1_0<=DQUOTE)||(LA1_0>=TILDE && LA1_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA1_0>=SLASH && LA1_0<=QMARK)||(LA1_0>=COMMAND_SUBSTITUTION_PAREN && LA1_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 15;}

                        else if ( ((LA1_0>=LESS_THAN && LA1_0<=GREATER_THAN)||LA1_0==HERE_STRING_OP||(LA1_0>=RSHIFT && LA1_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 55;}

                         
                        input.seek(index1_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA1_1 = input.LA(1);

                         
                        int index1_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_java_libbash()) ) {s = 62;}

                        else if ( (true) ) {s = 55;}

                         
                        input.seek(index1_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA9_eotS =
        "\12\uffff";
    static final String DFA9_eofS =
        "\12\uffff";
    static final String DFA9_minS =
        "\1\137\5\uffff\1\0\3\uffff";
    static final String DFA9_maxS =
        "\1\u00b1\5\uffff\1\0\3\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\5\3\1\uffff\1\3\1\2\1\1";
    static final String DFA9_specialS =
        "\1\1\5\uffff\1\0\3\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\10\1\6\2\uffff\1\5\2\uffff\1\1\1\uffff\1\1\2\5\2\7\1\2\1"+
            "\uffff\1\5\1\7\1\uffff\4\7\11\5\1\3\1\uffff\1\2\3\uffff\1\4"+
            "\1\uffff\2\2\4\uffff\3\2\1\uffff\10\5\1\uffff\24\5\2\uffff\2"+
            "\5",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 205:41: ( BLANK | EOL )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((LA(1) == GREATER_THAN)))) ) {s = 9;}

                        else if ( ((LA(1) == GREATER_THAN)) ) {s = 7;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_0 = input.LA(1);

                         
                        int index9_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA9_0==BANG||LA9_0==TIME) ) {s = 1;}

                        else if ( (LA9_0==LPAREN||LA9_0==FOR||(LA9_0>=SELECT && LA9_0<=IF)||(LA9_0>=WHILE && LA9_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 2;}

                        else if ( (LA9_0==LBRACE) ) {s = 3;}

                        else if ( (LA9_0==LLPAREN) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 4;}

                        else if ( (LA9_0==POUND||(LA9_0>=MINUS && LA9_0<=LETTER)||LA9_0==DIGIT||(LA9_0>=NAME && LA9_0<=DQUOTE)||(LA9_0>=TILDE && LA9_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA9_0>=SLASH && LA9_0<=QMARK)||(LA9_0>=COMMAND_SUBSTITUTION_PAREN && LA9_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 5;}

                        else if ( (LA9_0==BLANK) ) {s = 6;}

                        else if ( ((LA9_0>=LESS_THAN && LA9_0<=GREATER_THAN)||LA9_0==HERE_STRING_OP||(LA9_0>=RSHIFT && LA9_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 7;}

                        else if ( (LA9_0==EOL) ) {s = 8;}

                         
                        input.seek(index9_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\15\uffff";
    static final String DFA15_eofS =
        "\5\5\10\uffff";
    static final String DFA15_minS =
        "\5\137\1\uffff\2\137\1\uffff\4\137";
    static final String DFA15_maxS =
        "\1\u0086\1\u0090\3\u00b1\1\uffff\2\u00b1\1\uffff\2\u00b1\1\u008c"+
        "\1\u0090";
    static final String DFA15_acceptS =
        "\5\uffff\1\2\2\uffff\1\1\4\uffff";
    static final String DFA15_specialS =
        "\15\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\4\1\1\1\2\1\3\13\uffff\1\5\27\uffff\1\5",
            "\1\4\1\5\1\2\1\3\13\uffff\1\5\27\uffff\1\5\11\uffff\1\5",
            "\1\7\1\6\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10\1"+
            "\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\uffff\2\10\4\5\3\10"+
            "\1\uffff\10\10\1\uffff\24\10\2\uffff\2\10",
            "\2\10\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\uffff\2\10\1"+
            "\uffff\16\10\1\uffff\1\10\3\uffff\1\10\1\uffff\2\10\4\uffff"+
            "\3\10\1\uffff\10\10\1\uffff\24\10\2\uffff\2\10",
            "\1\12\1\11\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10"+
            "\1\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\5\2\10\4\5\3\10\1"+
            "\5\10\10\1\uffff\24\10\2\uffff\2\10",
            "",
            "\1\7\1\13\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10\1"+
            "\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\uffff\2\10\4\5\3\10"+
            "\1\uffff\10\10\1\uffff\24\10\2\uffff\2\10",
            "\1\7\1\6\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10\1"+
            "\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\uffff\2\10\4\5\3\10"+
            "\1\uffff\10\10\1\uffff\24\10\2\uffff\2\10",
            "",
            "\1\12\1\14\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10"+
            "\1\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\5\2\10\4\5\3\10\1"+
            "\5\10\10\1\uffff\24\10\2\uffff\2\10",
            "\1\12\1\11\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\5\2\10"+
            "\1\uffff\16\10\1\5\1\10\1\uffff\2\5\1\10\1\5\2\10\4\5\3\10\1"+
            "\5\10\10\1\uffff\24\10\2\uffff\2\10",
            "\2\5\12\uffff\2\10\1\uffff\1\5\2\10\1\uffff\4\10\12\uffff\1"+
            "\5\2\uffff\2\5\4\uffff\4\5",
            "\2\5\12\uffff\2\10\1\uffff\1\5\2\10\1\uffff\4\10\12\uffff\1"+
            "\5\2\uffff\2\5\1\uffff\1\5\2\uffff\4\5\3\uffff\1\5"
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:17: ( ( BLANK )? command_separator ( ( BLANK )? EOL )* ( BLANK )? list_level_1 )*";
        }
    }
    static final String DFA13_eotS =
        "\12\uffff";
    static final String DFA13_eofS =
        "\12\uffff";
    static final String DFA13_minS =
        "\2\137\10\uffff";
    static final String DFA13_maxS =
        "\2\u00b1\10\uffff";
    static final String DFA13_acceptS =
        "\2\uffff\6\2\1\1\1\2";
    static final String DFA13_specialS =
        "\1\0\11\uffff}>";
    static final String[] DFA13_transitionS = {
            "\1\10\1\1\2\uffff\1\6\2\uffff\1\2\1\uffff\1\2\2\6\2\7\1\3\1"+
            "\uffff\1\6\1\7\1\uffff\4\7\11\6\1\4\1\uffff\1\3\3\uffff\1\5"+
            "\1\uffff\2\3\4\uffff\3\3\1\uffff\10\6\1\uffff\24\6\2\uffff\2"+
            "\6",
            "\1\10\1\11\2\uffff\1\11\2\uffff\1\11\1\uffff\1\2\5\11\1\uffff"+
            "\2\11\1\uffff\16\11\1\uffff\1\11\3\uffff\1\11\1\uffff\2\11\4"+
            "\uffff\3\11\1\uffff\10\11\1\uffff\24\11\2\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 207:44: ( ( BLANK )? EOL )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_0 = input.LA(1);

                         
                        int index13_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA13_0==BLANK) ) {s = 1;}

                        else if ( (LA13_0==BANG||LA13_0==TIME) ) {s = 2;}

                        else if ( (LA13_0==LPAREN||LA13_0==FOR||(LA13_0>=SELECT && LA13_0<=IF)||(LA13_0>=WHILE && LA13_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 3;}

                        else if ( (LA13_0==LBRACE) ) {s = 4;}

                        else if ( (LA13_0==LLPAREN) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 5;}

                        else if ( (LA13_0==POUND||(LA13_0>=MINUS && LA13_0<=LETTER)||LA13_0==DIGIT||(LA13_0>=NAME && LA13_0<=DQUOTE)||(LA13_0>=TILDE && LA13_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA13_0>=SLASH && LA13_0<=QMARK)||(LA13_0>=COMMAND_SUBSTITUTION_PAREN && LA13_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 6;}

                        else if ( ((LA13_0>=LESS_THAN && LA13_0<=GREATER_THAN)||LA13_0==HERE_STRING_OP||(LA13_0>=RSHIFT && LA13_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 7;}

                        else if ( (LA13_0==EOL) ) {s = 8;}

                         
                        input.seek(index13_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\75\uffff";
    static final String DFA18_eofS =
        "\75\uffff";
    static final String DFA18_minS =
        "\1\140\1\0\73\uffff";
    static final String DFA18_maxS =
        "\1\u00b1\1\0\73\uffff";
    static final String DFA18_acceptS =
        "\2\uffff\1\2\6\uffff\3\2\50\uffff\1\2\7\uffff\1\1";
    static final String DFA18_specialS =
        "\1\0\1\1\73\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\64\2\uffff\1\13\2\uffff\1\1\2\uffff\2\13\2\64\1\2\1\uffff"+
            "\1\13\1\64\1\uffff\4\64\11\13\1\11\1\uffff\1\2\3\uffff\1\12"+
            "\1\uffff\2\2\4\uffff\3\2\1\uffff\10\13\1\uffff\24\13\2\uffff"+
            "\2\13",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "213:10: ( ( BANG )=> ( BANG BLANK ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA18_0==BANG) ) {s = 1;}

                        else if ( (LA18_0==LPAREN||LA18_0==FOR||(LA18_0>=SELECT && LA18_0<=IF)||(LA18_0>=WHILE && LA18_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 2;}

                        else if ( (LA18_0==LBRACE) ) {s = 9;}

                        else if ( (LA18_0==LLPAREN) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 10;}

                        else if ( (LA18_0==POUND||(LA18_0>=MINUS && LA18_0<=LETTER)||LA18_0==DIGIT||(LA18_0>=NAME && LA18_0<=DQUOTE)||(LA18_0>=TILDE && LA18_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA18_0>=SLASH && LA18_0<=QMARK)||(LA18_0>=COMMAND_SUBSTITUTION_PAREN && LA18_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 11;}

                        else if ( (LA18_0==BLANK||(LA18_0>=LESS_THAN && LA18_0<=GREATER_THAN)||LA18_0==HERE_STRING_OP||(LA18_0>=RSHIFT && LA18_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 52;}

                         
                        input.seek(index18_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_java_libbash()) ) {s = 60;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA22_eotS =
        "\75\uffff";
    static final String DFA22_eofS =
        "\75\uffff";
    static final String DFA22_minS =
        "\1\140\1\0\73\uffff";
    static final String DFA22_maxS =
        "\1\u00b1\1\0\73\uffff";
    static final String DFA22_acceptS =
        "\2\uffff\2\2\6\uffff\3\2\47\uffff\1\2\7\uffff\1\1";
    static final String DFA22_specialS =
        "\1\0\1\1\73\uffff}>";
    static final String[] DFA22_transitionS = {
            "\1\64\2\uffff\1\14\2\uffff\1\2\2\uffff\1\1\1\14\2\64\1\3\1\uffff"+
            "\1\14\1\64\1\uffff\4\64\11\14\1\12\1\uffff\1\3\3\uffff\1\13"+
            "\1\uffff\2\3\4\uffff\3\3\1\uffff\10\14\1\uffff\24\14\2\uffff"+
            "\2\14",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "216:17: ( ( time_posix )=> time_posix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA22_0==MINUS) ) {s = 1;}

                        else if ( (LA22_0==BANG) ) {s = 2;}

                        else if ( (LA22_0==LPAREN||LA22_0==FOR||(LA22_0>=SELECT && LA22_0<=IF)||(LA22_0>=WHILE && LA22_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 3;}

                        else if ( (LA22_0==LBRACE) ) {s = 10;}

                        else if ( (LA22_0==LLPAREN) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 11;}

                        else if ( (LA22_0==POUND||LA22_0==LETTER||LA22_0==DIGIT||(LA22_0>=NAME && LA22_0<=DQUOTE)||(LA22_0>=TILDE && LA22_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA22_0>=SLASH && LA22_0<=QMARK)||(LA22_0>=COMMAND_SUBSTITUTION_PAREN && LA22_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 12;}

                        else if ( (LA22_0==BLANK||(LA22_0>=LESS_THAN && LA22_0<=GREATER_THAN)||LA22_0==HERE_STRING_OP||(LA22_0>=RSHIFT && LA22_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 52;}

                         
                        input.seek(index22_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_java_libbash()) ) {s = 60;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index22_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA33_eotS =
        "\55\uffff";
    static final String DFA33_eofS =
        "\55\uffff";
    static final String DFA33_minS =
        "\1\140\54\uffff";
    static final String DFA33_maxS =
        "\1\u00b1\54\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\53\2";
    static final String DFA33_specialS =
        "\1\0\54\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\1\2\uffff\1\24\2\uffff\1\53\1\uffff\1\54\1\14\1\5\4\uffff"+
            "\1\4\6\uffff\1\5\1\26\1\27\1\30\1\21\1\22\1\10\1\13\1\2\1\52"+
            "\1\uffff\4\54\2\uffff\12\54\1\20\1\6\1\40\1\37\1\5\1\4\1\47"+
            "\1\3\1\uffff\1\46\1\7\1\11\1\12\1\15\1\16\1\17\1\23\1\25\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\41\1\42\1\43\1\44\1\45\2\uffff\1"+
            "\50\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "240:33: ( BLANK )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_0 = input.LA(1);

                         
                        int index33_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_0==BLANK) ) {s = 1;}

                        else if ( (LA33_0==DQUOTE) && (synpred5_java_libbash())) {s = 2;}

                        else if ( (LA33_0==SINGLE_QUOTED_STRING_TOKEN) && (synpred5_java_libbash())) {s = 3;}

                        else if ( (LA33_0==DIGIT||LA33_0==NUMBER) && (synpred5_java_libbash())) {s = 4;}

                        else if ( (LA33_0==LETTER||LA33_0==NAME||LA33_0==UNDERSCORE) && (synpred5_java_libbash())) {s = 5;}

                        else if ( (LA33_0==ESC) && (synpred5_java_libbash())) {s = 6;}

                        else if ( (LA33_0==OTHER) && (synpred5_java_libbash())) {s = 7;}

                        else if ( (LA33_0==EQUALS) && (synpred5_java_libbash())) {s = 8;}

                        else if ( (LA33_0==PCT) && (synpred5_java_libbash())) {s = 9;}

                        else if ( (LA33_0==PCTPCT) && (synpred5_java_libbash())) {s = 10;}

                        else if ( (LA33_0==PLUS) && (synpred5_java_libbash())) {s = 11;}

                        else if ( (LA33_0==MINUS) && (synpred5_java_libbash())) {s = 12;}

                        else if ( (LA33_0==DOT) && (synpred5_java_libbash())) {s = 13;}

                        else if ( (LA33_0==DOTDOT) && (synpred5_java_libbash())) {s = 14;}

                        else if ( (LA33_0==COLON) && (synpred5_java_libbash())) {s = 15;}

                        else if ( (LA33_0==TILDE) && (synpred5_java_libbash())) {s = 16;}

                        else if ( (LA33_0==LSQUARE) && (synpred5_java_libbash())) {s = 17;}

                        else if ( (LA33_0==RSQUARE) && (synpred5_java_libbash())) {s = 18;}

                        else if ( (LA33_0==CARET) && (synpred5_java_libbash())) {s = 19;}

                        else if ( (LA33_0==POUND) && (synpred5_java_libbash())) {s = 20;}

                        else if ( (LA33_0==COMMA) && (synpred5_java_libbash())) {s = 21;}

                        else if ( (LA33_0==EXPORT) && (synpred5_java_libbash())) {s = 22;}

                        else if ( (LA33_0==LOCAL) && (synpred5_java_libbash())) {s = 23;}

                        else if ( (LA33_0==DECLARE) && (synpred5_java_libbash())) {s = 24;}

                        else if ( (LA33_0==AT) && (synpred5_java_libbash())) {s = 25;}

                        else if ( (LA33_0==ESC_RPAREN) && (synpred5_java_libbash())) {s = 26;}

                        else if ( (LA33_0==ESC_LPAREN) && (synpred5_java_libbash())) {s = 27;}

                        else if ( (LA33_0==ESC_RSQUARE) && (synpred5_java_libbash())) {s = 28;}

                        else if ( (LA33_0==ESC_LSQUARE) && (synpred5_java_libbash())) {s = 29;}

                        else if ( (LA33_0==ESC_DOLLAR) && (synpred5_java_libbash())) {s = 30;}

                        else if ( (LA33_0==ESC_GT) && (synpred5_java_libbash())) {s = 31;}

                        else if ( (LA33_0==ESC_LT) && (synpred5_java_libbash())) {s = 32;}

                        else if ( (LA33_0==ESC_TICK) && (synpred5_java_libbash())) {s = 33;}

                        else if ( (LA33_0==ESC_DQUOTE) && (synpred5_java_libbash())) {s = 34;}

                        else if ( (LA33_0==ESC_SQUOTE) && (synpred5_java_libbash())) {s = 35;}

                        else if ( (LA33_0==TIMES) && (synpred5_java_libbash())) {s = 36;}

                        else if ( (LA33_0==QMARK) && (synpred5_java_libbash())) {s = 37;}

                        else if ( (LA33_0==SLASH) && (synpred5_java_libbash())) {s = 38;}

                        else if ( (LA33_0==DOLLAR) && (synpred5_java_libbash())) {s = 39;}

                        else if ( (LA33_0==COMMAND_SUBSTITUTION_PAREN) && (synpred5_java_libbash())) {s = 40;}

                        else if ( (LA33_0==COMMAND_SUBSTITUTION_TICK) && (synpred5_java_libbash())) {s = 41;}

                        else if ( (LA33_0==LBRACE) && (synpred5_java_libbash())) {s = 42;}

                        else if ( (LA33_0==BANG) && (synpred5_java_libbash())) {s = 43;}

                        else if ( (LA33_0==TIME||(LA33_0>=FOR && LA33_0<=DONE)||(LA33_0>=SELECT && LA33_0<=ESAC)) && (synpred5_java_libbash())) {s = 44;}

                         
                        input.seek(index33_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\14\uffff";
    static final String DFA40_eofS =
        "\1\10\13\uffff";
    static final String DFA40_minS =
        "\1\4\7\0\1\uffff\2\0\1\uffff";
    static final String DFA40_maxS =
        "\1\u00b4\7\0\1\uffff\2\0\1\uffff";
    static final String DFA40_acceptS =
        "\10\uffff\1\2\2\uffff\1\1";
    static final String DFA40_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\1\11\1\uffff}>";
    static final String[] DFA40_transitionS = {
            "\133\13\1\7\1\1\1\5\1\6\1\13\1\3\1\4\1\13\1\2\6\13\1\11\27\13"+
            "\1\12\56\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()+ loopback of 275:4: ({...}? => . )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_0 = input.LA(1);

                         
                        int index40_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA40_0==BLANK) ) {s = 1;}

                        else if ( (LA40_0==PIPE) ) {s = 2;}

                        else if ( (LA40_0==LOGICAND) ) {s = 3;}

                        else if ( (LA40_0==LOGICOR) ) {s = 4;}

                        else if ( (LA40_0==SEMIC) ) {s = 5;}

                        else if ( (LA40_0==AMP) ) {s = 6;}

                        else if ( (LA40_0==EOL) ) {s = 7;}

                        else if ( (LA40_0==EOF) ) {s = 8;}

                        else if ( (LA40_0==RPAREN) ) {s = 9;}

                        else if ( (LA40_0==DOUBLE_SEMIC) ) {s = 10;}

                        else if ( ((LA40_0>=ANSI_C_QUOTING && LA40_0<=FUNCTION)||LA40_0==POUND||LA40_0==BANG||(LA40_0>=TIME && LA40_0<=LPAREN)||(LA40_0>=DIGIT && LA40_0<=LLPAREN)||(LA40_0>=SELECT && LA40_0<=CONTINUE_LINE)) && (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 ))) {s = 11;}

                         
                        input.seek(index40_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA40_9 = input.LA(1);

                         
                        int index40_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA40_10 = input.LA(1);

                         
                        int index40_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (( ((here_document_scope)here_document_stack.peek()).number_of_tokens != 0 )) ) {s = 11;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index40_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\14\uffff";
    static final String DFA43_eofS =
        "\14\uffff";
    static final String DFA43_minS =
        "\1\153\1\uffff\2\140\10\uffff";
    static final String DFA43_maxS =
        "\1\165\1\uffff\2\u00b1\10\uffff";
    static final String DFA43_acceptS =
        "\1\uffff\1\1\2\uffff\1\5\1\6\1\7\1\2\1\11\1\3\1\4\1\10";
    static final String DFA43_specialS =
        "\14\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\3\1\2\5\uffff\1\4\1\1\1\5\1\6",
            "",
            "\1\10\1\uffff\1\7\1\10\2\uffff\1\10\1\uffff\3\10\4\uffff\1"+
            "\10\6\uffff\12\10\1\uffff\4\10\2\uffff\22\10\1\uffff\24\10\2"+
            "\uffff\2\10",
            "\1\13\1\uffff\1\11\1\13\2\uffff\1\13\1\uffff\3\13\1\uffff\1"+
            "\12\2\uffff\1\13\6\uffff\12\13\1\uffff\4\13\2\uffff\22\13\1"+
            "\uffff\24\13\2\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "286:3: ( AMP_LESS_THAN -> OP[\"&<\"] | GREATER_THAN AMP -> OP[\">&\"] | LESS_THAN AMP -> OP[\"<&\"] | LESS_THAN GREATER_THAN -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP_GREATER_THAN -> OP[\"&>\"] | AMP_RSHIFT -> OP[\"&>>\"] | LESS_THAN -> LESS_THAN | GREATER_THAN -> GREATER_THAN )";
        }
    }
    static final String DFA55_eotS =
        "\101\uffff";
    static final String DFA55_eofS =
        "\101\uffff";
    static final String DFA55_minS =
        "\1\140\7\uffff\1\0\1\uffff\6\0\61\uffff";
    static final String DFA55_maxS =
        "\1\u00b1\7\uffff\1\0\1\uffff\6\0\61\uffff";
    static final String DFA55_acceptS =
        "\1\uffff\1\1\16\uffff\1\7\43\uffff\1\7\7\uffff\1\2\1\3\1\4\1\5\1"+
        "\6";
    static final String DFA55_specialS =
        "\1\0\7\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\61\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\64\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\1\14\2\64\1\1\1"+
            "\uffff\1\20\1\64\1\uffff\4\64\1\13\1\15\1\16\1\17\1\12\4\20"+
            "\1\10\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\4\uffff\3\1\1\uffff"+
            "\4\20\1\14\3\20\1\uffff\24\20\2\uffff\2\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "306:1: command_atom : ({...}? => compound_command | {...}? => NAME BLANK string_expr_no_reserved_word ( ( ( BLANK )? parens ( wspace )? ) | wspace ) compound_command -> ^( FUNCTION string_expr_no_reserved_word compound_command ) | ( name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> variable_definitions ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) ) | ( EXPORT )=> EXPORT BLANK builtin_variable_definition_item -> ^( STRING EXPORT ) ^( STRING builtin_variable_definition_item ) | ( LOCAL )=> LOCAL BLANK builtin_variable_definition_item -> ^( STRING LOCAL ) ^( STRING builtin_variable_definition_item ) | ( DECLARE )=> DECLARE BLANK builtin_variable_definition_item -> ^( STRING DECLARE ) ^( STRING builtin_variable_definition_item ) | command_name ( ( ( BLANK )? parens )=> ( BLANK )? parens ( wspace )? compound_command -> ^( FUNCTION command_name compound_command ) | ({...}? => BLANK bash_command_arguments )* -> command_name ( bash_command_arguments )* ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA55_0 = input.LA(1);

                         
                        int index55_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA55_0==LPAREN||LA55_0==FOR||LA55_0==LLPAREN||(LA55_0>=SELECT && LA55_0<=IF)||(LA55_0>=WHILE && LA55_0<=CASE)) && ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1))))))) {s = 1;}

                        else if ( (LA55_0==LBRACE) ) {s = 8;}

                        else if ( (LA55_0==LSQUARE) ) {s = 10;}

                        else if ( (LA55_0==NAME) ) {s = 11;}

                        else if ( (LA55_0==LETTER||LA55_0==UNDERSCORE) ) {s = 12;}

                        else if ( (LA55_0==EXPORT) ) {s = 13;}

                        else if ( (LA55_0==LOCAL) ) {s = 14;}

                        else if ( (LA55_0==DECLARE) ) {s = 15;}

                        else if ( (LA55_0==POUND||LA55_0==BANG||LA55_0==MINUS||LA55_0==DIGIT||(LA55_0>=RSQUARE && LA55_0<=DQUOTE)||(LA55_0>=TILDE && LA55_0<=ESC_GT)||(LA55_0>=NUMBER && LA55_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA55_0>=SLASH && LA55_0<=QMARK)||(LA55_0>=COMMAND_SUBSTITUTION_PAREN && LA55_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 16;}

                        else if ( (LA55_0==BLANK||(LA55_0>=LESS_THAN && LA55_0<=GREATER_THAN)||LA55_0==HERE_STRING_OP||(LA55_0>=RSHIFT && LA55_0<=AMP_RSHIFT)) && ((LA(1) == GREATER_THAN))) {s = 52;}

                         
                        input.seek(index55_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA55_8 = input.LA(1);

                         
                        int index55_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) ) {s = 1;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA55_10 = input.LA(1);

                         
                        int index55_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) ) {s = 1;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA55_11 = input.LA(1);

                         
                        int index55_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((LA(1) == FOR|| LA(1) == SELECT|| LA(1) == IF|| LA(1) == WHILE|| LA(1) == UNTIL||
                           LA(1) == CASE|| LA(1) == LPAREN|| LA(1) == LBRACE|| LA(1) == LLPAREN|| LA(1) == LSQUARE||




                          (LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))&&(LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) ) {s = 1;}

                        else if ( ((LA(1) == NAME && LA(2) == BLANK && "function".equals(get_string(LT(1))))) ) {s = 60;}

                        else if ( (synpred8_java_libbash()) ) {s = 61;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA55_12 = input.LA(1);

                         
                        int index55_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_java_libbash()) ) {s = 61;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA55_13 = input.LA(1);

                         
                        int index55_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_java_libbash()) ) {s = 62;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA55_14 = input.LA(1);

                         
                        int index55_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_java_libbash()) ) {s = 63;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA55_15 = input.LA(1);

                         
                        int index55_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_java_libbash()) ) {s = 64;}

                        else if ( (true) ) {s = 52;}

                         
                        input.seek(index55_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA50_eotS =
        "\24\uffff";
    static final String DFA50_eofS =
        "\1\2\23\uffff";
    static final String DFA50_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA50_maxS =
        "\1\u0086\1\0\22\uffff";
    static final String DFA50_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA50_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2"+
            "\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "319:4: ( ( BLANK bash_command )=> BLANK bash_command -> bash_command variable_definitions | -> ^( VARIABLE_DEFINITIONS variable_definitions ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA50_1 = input.LA(1);

                         
                        int index50_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_java_libbash()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA53_eotS =
        "\24\uffff";
    static final String DFA53_eofS =
        "\1\2\23\uffff";
    static final String DFA53_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA53_maxS =
        "\1\u0086\1\0\22\uffff";
    static final String DFA53_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA53_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2"+
            "\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "()* loopback of 333:6: ({...}? => BLANK bash_command_arguments )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA(1) == BLANK &&
                             (
                              !is_special_token(LA(2))

                              &&(LA(2) != DIGIT || (LA(3) != AMP_LESS_THAN &&
                                     LA(3) != AMP_GREATER_THAN &&
                                     LA(3) != AMP_RSHIFT &&
                                     LA(3) != GREATER_THAN &&
                                     LA(3) != LESS_THAN &&
                                     LA(3) != RSHIFT))
                             ))) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA57_eotS =
        "\24\uffff";
    static final String DFA57_eofS =
        "\1\2\23\uffff";
    static final String DFA57_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA57_maxS =
        "\1\u0086\1\0\22\uffff";
    static final String DFA57_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA57_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2"+
            "\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 353:29: ( ( BLANK name ( LSQUARE | EQUALS | PLUS EQUALS ) )=> BLANK variable_definition_atom )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_1 = input.LA(1);

                         
                        int index57_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_java_libbash()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index57_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\24\uffff";
    static final String DFA66_eofS =
        "\1\2\23\uffff";
    static final String DFA66_minS =
        "\1\137\1\0\15\uffff\1\0\4\uffff";
    static final String DFA66_maxS =
        "\1\u0086\1\0\15\uffff\1\0\4\uffff";
    static final String DFA66_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA66_specialS =
        "\1\uffff\1\0\15\uffff\1\1\4\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\17\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1"+
            "\2\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "()* loopback of 378:5: ({...}? => wspace array_atom )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_1 = input.LA(1);

                         
                        int index66_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!((array_value_scope)array_value_stack.peek()).array_value_end)) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA66_15 = input.LA(1);

                         
                        int index66_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!((array_value_scope)array_value_stack.peek()).array_value_end)) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\55\uffff";
    static final String DFA70_eofS =
        "\55\uffff";
    static final String DFA70_minS =
        "\1\143\1\0\53\uffff";
    static final String DFA70_maxS =
        "\1\u00b1\1\0\53\uffff";
    static final String DFA70_acceptS =
        "\2\uffff\1\2\51\uffff\1\1";
    static final String DFA70_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\2\2\uffff\1\2\1\uffff\3\2\4\uffff\1\2\6\uffff\4\2\1\1\5\2"+
            "\1\uffff\4\2\2\uffff\22\2\1\uffff\24\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "382:4: ( ( LSQUARE )=> LSQUARE ( BLANK )? explicit_arithmetic ( BLANK )? RSQUARE EQUALS string_expr | string_expr )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_java_libbash()) ) {s = 44;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA71_eotS =
        "\31\uffff";
    static final String DFA71_eofS =
        "\2\4\1\uffff\1\10\25\uffff";
    static final String DFA71_minS =
        "\2\137\1\0\1\137\1\uffff\1\0\1\137\3\uffff\1\137\1\0\1\137\3\uffff"+
        "\2\137\2\uffff\1\137\4\uffff";
    static final String DFA71_maxS =
        "\1\u0086\1\u00b1\1\0\1\u00b1\1\uffff\1\0\1\u00b1\3\uffff\1\u00b1"+
        "\1\0\1\u00b1\3\uffff\2\u00b1\2\uffff\1\u00b1\4\uffff";
    static final String DFA71_acceptS =
        "\4\uffff\1\3\2\uffff\2\3\1\2\3\uffff\1\1\2\3\2\uffff\2\3\1\uffff"+
        "\4\3";
    static final String DFA71_specialS =
        "\1\uffff\1\1\1\5\1\7\1\uffff\1\4\1\11\3\uffff\1\3\1\0\1\10\3\uffff"+
        "\1\12\1\6\2\uffff\1\2\4\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\3\1\1\2\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\1\uffff\1\2"+
            "\1\uffff\6\4\20\uffff\1\4",
            "\1\3\1\6\6\4\1\10\1\7\4\4\1\uffff\1\5\2\4\2\10\1\4\2\10\12"+
            "\4\1\uffff\4\7\1\uffff\1\10\11\7\11\4\1\uffff\24\4\2\uffff\2"+
            "\4",
            "\1\uffff",
            "\1\14\1\12\2\uffff\1\10\2\uffff\1\10\1\uffff\6\10\1\13\2\10"+
            "\1\uffff\20\10\1\7\26\10\1\uffff\24\10\2\uffff\2\10",
            "",
            "\1\uffff",
            "\1\20\1\6\2\uffff\1\16\2\uffff\1\16\1\uffff\1\7\2\16\3\uffff"+
            "\1\5\1\16\6\uffff\12\16\1\uffff\4\7\1\uffff\1\17\11\7\1\17\10"+
            "\16\1\uffff\24\16\2\uffff\2\16",
            "",
            "",
            "",
            "\1\14\1\21\2\uffff\1\17\2\uffff\1\17\1\uffff\6\17\1\13\2\17"+
            "\1\uffff\20\17\1\7\26\17\1\uffff\24\17\2\uffff\2\17",
            "\1\uffff",
            "\1\14\1\12\2\uffff\1\17\2\uffff\1\17\1\uffff\6\17\1\13\2\17"+
            "\1\uffff\20\17\1\7\26\17\1\uffff\24\17\2\uffff\2\17",
            "",
            "",
            "",
            "\2\20\2\uffff\1\22\2\uffff\1\22\1\uffff\1\7\2\22\3\uffff\1"+
            "\13\1\22\6\uffff\4\22\1\16\5\22\1\uffff\4\7\1\uffff\1\23\11"+
            "\7\1\17\10\22\1\uffff\24\22\2\uffff\2\22",
            "\2\24\2\uffff\1\25\2\uffff\1\25\1\uffff\1\7\2\25\2\26\1\uffff"+
            "\1\13\1\23\1\26\1\uffff\4\26\4\25\1\16\3\25\1\22\1\25\1\26\2"+
            "\7\1\26\1\23\1\uffff\1\23\2\7\1\26\3\23\3\7\1\17\10\25\1\uffff"+
            "\24\25\2\uffff\2\25",
            "",
            "",
            "\2\24\2\uffff\1\27\2\uffff\1\27\1\uffff\1\7\2\27\3\uffff\1"+
            "\13\1\27\6\uffff\4\27\1\16\3\27\1\22\1\27\1\30\2\7\1\30\1\26"+
            "\1\uffff\1\23\2\7\4\26\3\7\1\17\7\27\1\25\1\uffff\24\27\2\uffff"+
            "\2\27",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "386:3: ( ( wspace RPAREN )=> wspace RPAREN | ( RPAREN )=> RPAREN | )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_11 = input.LA(1);

                         
                        int index71_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_java_libbash()) ) {s = 13;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index71_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_1==EOF||(LA71_1>=SEMIC && LA71_1<=BANG)||(LA71_1>=MINUS && LA71_1<=GREATER_THAN)||(LA71_1>=DIGIT && LA71_1<=HERE_STRING_OP)||LA71_1==AMP_LESS_THAN||(LA71_1>=NAME && LA71_1<=LBRACE)||(LA71_1>=ESAC && LA71_1<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_1>=SLASH && LA71_1<=QMARK)||(LA71_1>=COMMAND_SUBSTITUTION_PAREN && LA71_1<=COMMAND_SUBSTITUTION_TICK)) ) {s = 4;}

                        else if ( (LA71_1==EOL) ) {s = 3;}

                        else if ( (LA71_1==RPAREN) ) {s = 5;}

                        else if ( (LA71_1==BLANK) ) {s = 6;}

                        else if ( (LA71_1==TIME||(LA71_1>=FOR && LA71_1<=DONE)||(LA71_1>=SELECT && LA71_1<=CASE)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                        else if ( (LA71_1==PIPE||(LA71_1>=LSHIFT && LA71_1<=RSHIFT)||(LA71_1>=AMP_GREATER_THAN && LA71_1<=AMP_RSHIFT)||LA71_1==DOUBLE_SEMIC) ) {s = 8;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_20 = input.LA(1);

                         
                        int index71_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_20==DONE||(LA71_20>=THEN && LA71_20<=ELIF)) ) {s = 22;}

                        else if ( ((LA71_20>=EOL && LA71_20<=BLANK)) ) {s = 20;}

                        else if ( (LA71_20==LSQUARE) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 14;}

                        else if ( (LA71_20==DQUOTE) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 18;}

                        else if ( (LA71_20==SINGLE_QUOTED_STRING_TOKEN) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 21;}

                        else if ( (LA71_20==POUND||LA71_20==BANG||(LA71_20>=MINUS && LA71_20<=LETTER)||LA71_20==DIGIT||(LA71_20>=NAME && LA71_20<=DECLARE)||(LA71_20>=RSQUARE && LA71_20<=PLUS)||LA71_20==LBRACE||(LA71_20>=TILDE && LA71_20<=DOLLAR)||(LA71_20>=SLASH && LA71_20<=QMARK)||(LA71_20>=COMMAND_SUBSTITUTION_PAREN && LA71_20<=COMMAND_SUBSTITUTION_TICK)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 23;}

                        else if ( (LA71_20==RPAREN) ) {s = 11;}

                        else if ( (LA71_20==RBRACE||LA71_20==DO) ) {s = 24;}

                        else if ( (LA71_20==ESAC) ) {s = 15;}

                        else if ( (LA71_20==DOUBLE_SEMIC) ) {s = 19;}

                        else if ( (LA71_20==TIME||(LA71_20>=FOR && LA71_20<=IN)||(LA71_20>=SELECT && LA71_20<=IF)||(LA71_20>=WHILE && LA71_20<=CASE)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                         
                        input.seek(index71_20);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_10 = input.LA(1);

                         
                        int index71_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_10==POUND||LA71_10==BANG||(LA71_10>=TIME && LA71_10<=LPAREN)||(LA71_10>=DIGIT && LA71_10<=HERE_STRING_OP)||(LA71_10>=RSHIFT && LA71_10<=FOR)||(LA71_10>=DO && LA71_10<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_10>=SLASH && LA71_10<=QMARK)||(LA71_10>=COMMAND_SUBSTITUTION_PAREN && LA71_10<=COMMAND_SUBSTITUTION_TICK)) ) {s = 15;}

                        else if ( (LA71_10==EOL) ) {s = 12;}

                        else if ( (LA71_10==BLANK) ) {s = 17;}

                        else if ( (LA71_10==RPAREN) ) {s = 11;}

                        else if ( (LA71_10==IN) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                         
                        input.seek(index71_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_5 = input.LA(1);

                         
                        int index71_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_java_libbash()) ) {s = 13;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index71_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_2 = input.LA(1);

                         
                        int index71_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_java_libbash()) ) {s = 9;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index71_2);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_17 = input.LA(1);

                         
                        int index71_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_17==DIGIT||LA71_17==DONE||LA71_17==DOUBLE_SEMIC||(LA71_17>=ELSE && LA71_17<=ELIF)) ) {s = 19;}

                        else if ( ((LA71_17>=EOL && LA71_17<=BLANK)) ) {s = 20;}

                        else if ( (LA71_17==LSQUARE) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 14;}

                        else if ( (LA71_17==DQUOTE) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 18;}

                        else if ( (LA71_17==POUND||LA71_17==BANG||(LA71_17>=MINUS && LA71_17<=LETTER)||(LA71_17>=NAME && LA71_17<=DECLARE)||(LA71_17>=RSQUARE && LA71_17<=PLUS)||LA71_17==LBRACE||(LA71_17>=TILDE && LA71_17<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_17>=SLASH && LA71_17<=QMARK)||(LA71_17>=COMMAND_SUBSTITUTION_PAREN && LA71_17<=COMMAND_SUBSTITUTION_TICK)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 21;}

                        else if ( ((LA71_17>=LESS_THAN && LA71_17<=GREATER_THAN)||LA71_17==HERE_STRING_OP||(LA71_17>=RSHIFT && LA71_17<=AMP_RSHIFT)||LA71_17==RBRACE||LA71_17==DO||LA71_17==THEN) ) {s = 22;}

                        else if ( (LA71_17==RPAREN) ) {s = 11;}

                        else if ( (LA71_17==ESAC) ) {s = 15;}

                        else if ( (LA71_17==TIME||(LA71_17>=FOR && LA71_17<=IN)||(LA71_17>=SELECT && LA71_17<=IF)||(LA71_17>=WHILE && LA71_17<=CASE)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                         
                        input.seek(index71_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA71_3 = input.LA(1);

                         
                        int index71_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_3==EOF||LA71_3==POUND||LA71_3==BANG||(LA71_3>=TIME && LA71_3<=LPAREN)||(LA71_3>=DIGIT && LA71_3<=HERE_STRING_OP)||(LA71_3>=RSHIFT && LA71_3<=FOR)||(LA71_3>=DO && LA71_3<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_3>=SLASH && LA71_3<=QMARK)||(LA71_3>=COMMAND_SUBSTITUTION_PAREN && LA71_3<=COMMAND_SUBSTITUTION_TICK)) ) {s = 8;}

                        else if ( (LA71_3==BLANK) ) {s = 10;}

                        else if ( (LA71_3==RPAREN) ) {s = 11;}

                        else if ( (LA71_3==EOL) ) {s = 12;}

                        else if ( (LA71_3==IN) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                         
                        input.seek(index71_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA71_12 = input.LA(1);

                         
                        int index71_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_12==POUND||LA71_12==BANG||(LA71_12>=TIME && LA71_12<=LPAREN)||(LA71_12>=DIGIT && LA71_12<=HERE_STRING_OP)||(LA71_12>=RSHIFT && LA71_12<=FOR)||(LA71_12>=DO && LA71_12<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_12>=SLASH && LA71_12<=QMARK)||(LA71_12>=COMMAND_SUBSTITUTION_PAREN && LA71_12<=COMMAND_SUBSTITUTION_TICK)) ) {s = 15;}

                        else if ( (LA71_12==BLANK) ) {s = 10;}

                        else if ( (LA71_12==RPAREN) ) {s = 11;}

                        else if ( (LA71_12==EOL) ) {s = 12;}

                        else if ( (LA71_12==IN) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                         
                        input.seek(index71_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA71_6 = input.LA(1);

                         
                        int index71_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_6==POUND||LA71_6==BANG||(LA71_6>=MINUS && LA71_6<=LETTER)||LA71_6==DIGIT||(LA71_6>=NAME && LA71_6<=LBRACE)||(LA71_6>=TILDE && LA71_6<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_6>=SLASH && LA71_6<=QMARK)||(LA71_6>=COMMAND_SUBSTITUTION_PAREN && LA71_6<=COMMAND_SUBSTITUTION_TICK)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 14;}

                        else if ( (LA71_6==DOUBLE_SEMIC||LA71_6==ESAC) ) {s = 15;}

                        else if ( (LA71_6==BLANK) ) {s = 6;}

                        else if ( (LA71_6==TIME||(LA71_6>=FOR && LA71_6<=DONE)||(LA71_6>=SELECT && LA71_6<=CASE)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                        else if ( (LA71_6==RPAREN) ) {s = 5;}

                        else if ( (LA71_6==EOL) ) {s = 16;}

                         
                        input.seek(index71_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA71_16 = input.LA(1);

                         
                        int index71_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA71_16==LSQUARE) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 14;}

                        else if ( (LA71_16==POUND||LA71_16==BANG||(LA71_16>=MINUS && LA71_16<=LETTER)||LA71_16==DIGIT||(LA71_16>=NAME && LA71_16<=DECLARE)||(LA71_16>=RSQUARE && LA71_16<=LBRACE)||(LA71_16>=TILDE && LA71_16<=SINGLE_QUOTED_STRING_TOKEN)||(LA71_16>=SLASH && LA71_16<=QMARK)||(LA71_16>=COMMAND_SUBSTITUTION_PAREN && LA71_16<=COMMAND_SUBSTITUTION_TICK)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 18;}

                        else if ( (LA71_16==ESAC) ) {s = 15;}

                        else if ( ((LA71_16>=EOL && LA71_16<=BLANK)) ) {s = 16;}

                        else if ( (LA71_16==DOUBLE_SEMIC) ) {s = 19;}

                        else if ( (LA71_16==TIME||(LA71_16>=FOR && LA71_16<=DONE)||(LA71_16>=SELECT && LA71_16<=CASE)) && ((!((array_value_scope)array_value_stack.peek()).array_value_end))) {s = 7;}

                        else if ( (LA71_16==RPAREN) ) {s = 11;}

                         
                        input.seek(index71_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA72_eotS =
        "\40\uffff";
    static final String DFA72_eofS =
        "\1\20\37\uffff";
    static final String DFA72_minS =
        "\1\4\17\0\1\uffff\4\0\13\uffff";
    static final String DFA72_maxS =
        "\1\u00b4\17\0\1\uffff\4\0\13\uffff";
    static final String DFA72_acceptS =
        "\20\uffff\1\7\4\uffff\6\4\1\5\1\6\1\2\1\1\1\3";
    static final String DFA72_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"+
        "\16\1\17\1\uffff\1\20\1\21\1\22\1\23\13\uffff}>";
    static final String[] DFA72_transitionS = {
            "\133\32\1\17\1\1\1\15\1\16\1\32\1\13\1\14\1\32\1\12\3\32\1\4"+
            "\1\3\1\23\1\21\1\32\1\10\1\11\1\5\1\2\1\6\1\7\10\32\1\24\1\31"+
            "\6\32\1\22\13\32\1\30\4\32\1\25\30\32\1\26\1\27\3\32",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "()+ loopback of 405:4: ( ( LPAREN )=> LPAREN | ( RPAREN )=> RPAREN | ( DQUOTE )=> DQUOTE | (~ ( EOL | SEMIC ) )=> expansion_base | {...}? => SEMIC | {...}? => EOL )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_0 = input.LA(1);

                         
                        int index72_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA72_0==BLANK) ) {s = 1;}

                        else if ( (LA72_0==AMP_LESS_THAN) ) {s = 2;}

                        else if ( (LA72_0==GREATER_THAN) ) {s = 3;}

                        else if ( (LA72_0==LESS_THAN) ) {s = 4;}

                        else if ( (LA72_0==RSHIFT) ) {s = 5;}

                        else if ( (LA72_0==AMP_GREATER_THAN) ) {s = 6;}

                        else if ( (LA72_0==AMP_RSHIFT) ) {s = 7;}

                        else if ( (LA72_0==HERE_STRING_OP) ) {s = 8;}

                        else if ( (LA72_0==LSHIFT) ) {s = 9;}

                        else if ( (LA72_0==PIPE) ) {s = 10;}

                        else if ( (LA72_0==LOGICAND) ) {s = 11;}

                        else if ( (LA72_0==LOGICOR) ) {s = 12;}

                        else if ( (LA72_0==SEMIC) ) {s = 13;}

                        else if ( (LA72_0==AMP) ) {s = 14;}

                        else if ( (LA72_0==EOL) ) {s = 15;}

                        else if ( (LA72_0==EOF) ) {s = 16;}

                        else if ( (LA72_0==RPAREN) ) {s = 17;}

                        else if ( (LA72_0==DOUBLE_SEMIC) ) {s = 18;}

                        else if ( (LA72_0==LPAREN) ) {s = 19;}

                        else if ( (LA72_0==DQUOTE) ) {s = 20;}

                        else if ( (LA72_0==DOLLAR) && (synpred21_java_libbash())) {s = 21;}

                        else if ( (LA72_0==COMMAND_SUBSTITUTION_PAREN) && (synpred21_java_libbash())) {s = 22;}

                        else if ( (LA72_0==COMMAND_SUBSTITUTION_TICK) && (synpred21_java_libbash())) {s = 23;}

                        else if ( (LA72_0==ESC) && (synpred21_java_libbash())) {s = 24;}

                        else if ( (LA72_0==LBRACE) && (synpred21_java_libbash())) {s = 25;}

                        else if ( ((LA72_0>=ANSI_C_QUOTING && LA72_0<=FUNCTION)||LA72_0==POUND||LA72_0==BANG||(LA72_0>=TIME && LA72_0<=LETTER)||LA72_0==DIGIT||(LA72_0>=NAME && LA72_0<=PLUS)||(LA72_0>=RBRACE && LA72_0<=LLPAREN)||(LA72_0>=SELECT && LA72_0<=TILDE)||(LA72_0>=ESC_LT && LA72_0<=NUMBER)||(LA72_0>=SINGLE_QUOTED_STRING_TOKEN && LA72_0<=SQUOTE)||(LA72_0>=EXP && LA72_0<=CONTINUE_LINE)) && (synpred21_java_libbash())) {s = 26;}

                         
                        input.seek(index72_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA72_1 = input.LA(1);

                         
                        int index72_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA72_2 = input.LA(1);

                         
                        int index72_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA72_4 = input.LA(1);

                         
                        int index72_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA72_5 = input.LA(1);

                         
                        int index72_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA72_6 = input.LA(1);

                         
                        int index72_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA72_7 = input.LA(1);

                         
                        int index72_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA72_8 = input.LA(1);

                         
                        int index72_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA72_9 = input.LA(1);

                         
                        int index72_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA72_10 = input.LA(1);

                         
                        int index72_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA72_11 = input.LA(1);

                         
                        int index72_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA72_12 = input.LA(1);

                         
                        int index72_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA72_13 = input.LA(1);

                         
                        int index72_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( ((LA(1) == SEMIC && ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes)) ) {s = 27;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA72_14 = input.LA(1);

                         
                        int index72_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA72_15 = input.LA(1);

                         
                        int index72_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( ((LA(1) == EOL && ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).parens > 0 || ((builtin_variable_definition_item_scope)builtin_variable_definition_item_stack.peek()).dquotes)) ) {s = 28;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA72_17 = input.LA(1);

                         
                        int index72_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_java_libbash()) ) {s = 29;}

                        else if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA72_18 = input.LA(1);

                         
                        int index72_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_java_libbash()) ) {s = 26;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index72_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA72_19 = input.LA(1);

                         
                        int index72_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_java_libbash()) ) {s = 30;}

                        else if ( (synpred21_java_libbash()) ) {s = 26;}

                         
                        input.seek(index72_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA72_20 = input.LA(1);

                         
                        int index72_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred20_java_libbash()) ) {s = 31;}

                        else if ( (synpred21_java_libbash()) ) {s = 26;}

                         
                        input.seek(index72_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\24\uffff";
    static final String DFA75_eofS =
        "\1\2\23\uffff";
    static final String DFA75_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA75_maxS =
        "\1\u0086\1\0\22\uffff";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA75_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2"+
            "\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 425:33: ( ( BLANK bash_command_arguments )=> BLANK bash_command_arguments )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_1 = input.LA(1);

                         
                        int index75_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred23_java_libbash()) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA78_eotS =
        "\56\uffff";
    static final String DFA78_eofS =
        "\56\uffff";
    static final String DFA78_minS =
        "\1\143\1\0\54\uffff";
    static final String DFA78_maxS =
        "\1\u00b1\1\0\54\uffff";
    static final String DFA78_acceptS =
        "\2\uffff\1\2\1\3\51\uffff\1\1";
    static final String DFA78_specialS =
        "\1\uffff\1\0\54\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\3\2\uffff\1\3\1\uffff\3\3\4\uffff\1\3\6\uffff\11\3\1\1\1"+
            "\2\4\3\2\uffff\22\3\1\uffff\24\3\2\uffff\2\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "430:1: bash_command_argument_atom : ( ( LBRACE )=> ( ( brace_expansion )=> brace_expansion | LBRACE ) | RBRACE | string_expr_part );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_1 = input.LA(1);

                         
                        int index78_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred24_java_libbash()) ) {s = 45;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index78_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA80_eotS =
        "\14\uffff";
    static final String DFA80_eofS =
        "\14\uffff";
    static final String DFA80_minS =
        "\1\155\13\uffff";
    static final String DFA80_maxS =
        "\1\u008f\13\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\12";
    static final String DFA80_specialS =
        "\1\0\13\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\7\10\uffff\1\13\3\uffff\1\12\4\uffff\1\10\1\uffff\1\1\3\uffff"+
            "\1\11\1\uffff\1\2\1\3\4\uffff\1\4\1\5\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "442:1: compound_command : ( for_expr | select_expr | if_expr | while_expr | until_expr | case_expr | subshell | current_shell | arithmetic_expression | condition_comparison );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_0 = input.LA(1);

                         
                        int index80_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA80_0==FOR) ) {s = 1;}

                        else if ( (LA80_0==SELECT) ) {s = 2;}

                        else if ( (LA80_0==IF) ) {s = 3;}

                        else if ( (LA80_0==WHILE) ) {s = 4;}

                        else if ( (LA80_0==UNTIL) ) {s = 5;}

                        else if ( (LA80_0==CASE) ) {s = 6;}

                        else if ( (LA80_0==LPAREN) ) {s = 7;}

                        else if ( (LA80_0==LBRACE) ) {s = 8;}

                        else if ( (LA80_0==LLPAREN) ) {s = 9;}

                        else if ( (LA80_0==LSQUARE) ) {s = 10;}

                        else if ( (LA80_0==NAME) && ((LA(1) == NAME && LA(2) == BLANK && "test".equals(get_string(LT(1)))))) {s = 11;}

                         
                        input.seek(index80_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA93_eotS =
        "\5\uffff";
    static final String DFA93_eofS =
        "\5\uffff";
    static final String DFA93_minS =
        "\2\137\3\uffff";
    static final String DFA93_maxS =
        "\1\141\1\u0083\3\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\1\3\1\1";
    static final String DFA93_specialS =
        "\5\uffff}>";
    static final String[] DFA93_transitionS = {
            "\2\1\1\2",
            "\2\1\1\2\40\uffff\1\4\1\3",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "462:4: ( wspace IN ( for_each_value )* ( BLANK )? ( SEMIC | EOL ) ( wspace )? | ( wspace )? SEMIC ( wspace )? | wspace )";
        }
    }
    static final String DFA106_eotS =
        "\6\uffff";
    static final String DFA106_eofS =
        "\6\uffff";
    static final String DFA106_minS =
        "\3\137\2\uffff\1\137";
    static final String DFA106_maxS =
        "\1\141\1\u0082\1\u0083\2\uffff\1\u0083";
    static final String DFA106_acceptS =
        "\3\uffff\1\2\1\1\1\uffff";
    static final String DFA106_specialS =
        "\6\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\2\1\1\1\3",
            "\1\2\1\4\1\3\40\uffff\1\4",
            "\2\5\41\uffff\1\4\1\3",
            "",
            "",
            "\2\5\41\uffff\1\4\1\3"
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "481:22: ( wspace IN BLANK string_expr )?";
        }
    }
    static final String DFA112_eotS =
        "\57\uffff";
    static final String DFA112_eofS =
        "\57\uffff";
    static final String DFA112_minS =
        "\1\137\1\0\55\uffff";
    static final String DFA112_maxS =
        "\1\u00b1\1\0\55\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\53\uffff\1\1";
    static final String DFA112_specialS =
        "\1\0\1\1\55\uffff}>";
    static final String[] DFA112_transitionS = {
            "\2\1\2\uffff\1\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff"+
            "\1\2\6\uffff\12\2\1\uffff\4\2\2\uffff\22\2\1\uffff\24\2\2\uffff"+
            "\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "509:3: ( ( wspace ESAC )=> ( wspace ESAC ) -> ^( CASE_PATTERN ) | ({...}? => case_statement )+ -> ( case_statement )+ )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_0 = input.LA(1);

                         
                        int index112_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA112_0>=EOL && LA112_0<=BLANK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 1;}

                        else if ( (LA112_0==POUND||LA112_0==BANG||(LA112_0>=TIME && LA112_0<=LETTER)||LA112_0==LPAREN||LA112_0==DIGIT||(LA112_0>=NAME && LA112_0<=LBRACE)||(LA112_0>=FOR && LA112_0<=DONE)||(LA112_0>=SELECT && LA112_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA112_0>=SLASH && LA112_0<=QMARK)||(LA112_0>=COMMAND_SUBSTITUTION_PAREN && LA112_0<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 2;}

                         
                        input.seek(index112_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_java_libbash()) ) {s = 46;}

                        else if ( ((!((case_body_scope)case_body_stack.peek()).case_end)) ) {s = 2;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\77\uffff";
    static final String DFA111_eofS =
        "\1\2\76\uffff";
    static final String DFA111_minS =
        "\1\137\1\0\15\uffff\1\0\57\uffff";
    static final String DFA111_maxS =
        "\1\u00b1\1\0\15\uffff\1\0\57\uffff";
    static final String DFA111_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\53\uffff";
    static final String DFA111_specialS =
        "\1\0\1\1\15\uffff\1\2\57\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\17\1\1\2\2\1\23\2\2\1\23\1\2\3\23\2\2\1\23\1\2\1\23\6\2\12"+
            "\23\1\uffff\4\23\1\uffff\1\2\22\23\1\uffff\24\23\2\uffff\2\23",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "()+ loopback of 511:5: ({...}? => case_statement )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_0 = input.LA(1);

                         
                        int index111_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA111_0==BLANK) ) {s = 1;}

                        else if ( (LA111_0==EOF||(LA111_0>=SEMIC && LA111_0<=AMP)||(LA111_0>=LOGICAND && LA111_0<=LOGICOR)||LA111_0==PIPE||(LA111_0>=LESS_THAN && LA111_0<=GREATER_THAN)||LA111_0==RPAREN||(LA111_0>=HERE_STRING_OP && LA111_0<=AMP_RSHIFT)||LA111_0==DOUBLE_SEMIC) ) {s = 2;}

                        else if ( (LA111_0==EOL) ) {s = 15;}

                        else if ( (LA111_0==POUND||LA111_0==BANG||(LA111_0>=TIME && LA111_0<=LETTER)||LA111_0==LPAREN||LA111_0==DIGIT||(LA111_0>=NAME && LA111_0<=LBRACE)||(LA111_0>=FOR && LA111_0<=DONE)||(LA111_0>=SELECT && LA111_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA111_0>=SLASH && LA111_0<=QMARK)||(LA111_0>=COMMAND_SUBSTITUTION_PAREN && LA111_0<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 19;}

                         
                        input.seek(index111_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!((case_body_scope)case_body_stack.peek()).case_end)) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((!((case_body_scope)case_body_stack.peek()).case_end)) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\5\uffff";
    static final String DFA120_eofS =
        "\5\uffff";
    static final String DFA120_minS =
        "\2\137\1\uffff\1\137\1\uffff";
    static final String DFA120_maxS =
        "\1\u0086\1\u00b1\1\uffff\1\u00b1\1\uffff";
    static final String DFA120_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA120_specialS =
        "\5\uffff}>";
    static final String[] DFA120_transitionS = {
            "\2\1\45\uffff\1\2",
            "\1\1\1\3\2\uffff\1\4\2\uffff\1\4\1\uffff\6\4\1\uffff\2\4\1"+
            "\uffff\16\4\1\uffff\1\4\3\uffff\1\4\1\2\2\4\4\uffff\3\4\1\2"+
            "\10\4\1\uffff\24\4\2\uffff\2\4",
            "",
            "\1\1\1\3\2\uffff\1\4\2\uffff\1\4\1\uffff\6\4\1\uffff\2\4\1"+
            "\uffff\16\4\1\uffff\1\4\3\uffff\1\4\1\2\2\4\4\uffff\3\4\1\2"+
            "\10\4\1\uffff\24\4\2\uffff\2\4",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "515:3: ( wspace command_list )?";
        }
    }
    static final String DFA123_eotS =
        "\4\uffff";
    static final String DFA123_eofS =
        "\4\uffff";
    static final String DFA123_minS =
        "\2\137\2\uffff";
    static final String DFA123_maxS =
        "\1\u0086\1\u0090\2\uffff";
    static final String DFA123_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA123_specialS =
        "\4\uffff}>";
    static final String[] DFA123_transitionS = {
            "\2\1\45\uffff\1\2",
            "\2\1\45\uffff\1\2\11\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "516:3: ( ( wspace )? DOUBLE_SEMIC ( ( wspace ESAC )=> wspace ESAC )? | wspace ESAC )";
        }
    }
    static final String DFA122_eotS =
        "\40\uffff";
    static final String DFA122_eofS =
        "\1\3\1\5\1\12\35\uffff";
    static final String DFA122_minS =
        "\3\137\3\uffff\1\137\1\0\1\uffff\1\137\1\uffff\1\0\1\137\2\uffff"+
        "\1\0\1\137\3\uffff\1\137\3\0\2\uffff\1\137\1\0\2\uffff\1\0\1\uffff";
    static final String DFA122_maxS =
        "\3\u00b1\3\uffff\1\u00b1\1\0\1\uffff\1\u00b1\1\uffff\1\0\1\u00b1"+
        "\2\uffff\1\0\1\u00b1\3\uffff\1\u00b1\3\0\2\uffff\1\u00b1\1\0\2\uffff"+
        "\1\0\1\uffff";
    static final String DFA122_acceptS =
        "\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1"+
        "\1\2\4\uffff\2\2\2\uffff\2\2\1\uffff\1\2";
    static final String DFA122_specialS =
        "\1\11\1\10\1\20\3\uffff\1\13\1\3\1\uffff\1\15\1\uffff\1\2\1\12\2"+
        "\uffff\1\4\1\17\3\uffff\1\16\1\5\1\6\1\7\2\uffff\1\14\1\1\2\uffff"+
        "\1\0\1\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\1\1\2\3\1\4\2\3\1\4\1\3\3\4\2\3\1\4\1\3\1\4\6\3\12\4\1"+
            "\uffff\4\4\1\uffff\1\3\22\4\1\uffff\24\4\2\uffff\2\4",
            "\1\2\1\6\2\5\1\10\2\5\1\10\1\5\3\10\2\5\1\4\5\5\1\3\2\5\12"+
            "\10\1\uffff\4\10\1\uffff\1\5\11\10\1\7\10\10\1\uffff\24\10\2"+
            "\uffff\2\10",
            "\1\14\1\11\2\uffff\1\12\2\uffff\1\12\1\uffff\11\12\1\uffff"+
            "\20\12\1\15\15\12\1\13\10\12\1\uffff\24\12\2\uffff\2\12",
            "",
            "",
            "",
            "\1\20\1\6\2\uffff\1\21\2\uffff\1\21\1\uffff\1\15\2\21\2\uffff"+
            "\1\4\1\16\1\21\6\uffff\12\21\1\uffff\4\15\1\uffff\1\16\11\15"+
            "\1\17\10\21\1\uffff\23\21\1\10\2\uffff\2\21",
            "\1\uffff",
            "",
            "\1\14\1\24\2\uffff\1\23\2\uffff\1\23\1\uffff\11\23\1\uffff"+
            "\20\23\1\15\1\23\1\12\1\23\1\16\11\23\1\25\10\23\1\uffff\24"+
            "\23\2\uffff\2\23",
            "",
            "\1\uffff",
            "\1\14\1\11\2\uffff\1\23\2\uffff\1\23\1\uffff\11\23\1\uffff"+
            "\20\23\1\15\1\23\1\12\1\23\1\16\11\23\1\26\10\23\1\uffff\24"+
            "\23\2\uffff\2\23",
            "",
            "",
            "\1\uffff",
            "\2\20\2\uffff\1\30\2\uffff\1\30\1\uffff\1\15\2\30\2\uffff\1"+
            "\4\1\23\1\30\6\uffff\12\30\1\uffff\4\15\1\uffff\1\16\11\15\1"+
            "\27\10\30\1\uffff\22\30\1\21\1\10\2\uffff\2\30",
            "",
            "",
            "",
            "\2\32\2\uffff\1\34\2\uffff\1\34\1\uffff\1\15\2\34\2\31\1\4"+
            "\3\31\1\uffff\4\31\7\34\1\30\2\34\1\31\2\15\1\31\1\12\1\uffff"+
            "\1\16\2\15\4\31\3\15\1\33\10\34\1\uffff\22\34\1\21\1\10\2\uffff"+
            "\2\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\2\32\2\uffff\1\37\2\uffff\1\37\1\uffff\1\15\2\37\2\uffff\1"+
            "\4\1\35\1\37\6\uffff\7\37\1\30\2\37\1\35\2\15\1\35\1\12\1\uffff"+
            "\1\16\2\15\4\35\3\15\1\36\10\37\1\uffff\11\37\1\34\10\37\1\21"+
            "\1\10\2\uffff\2\37",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "517:25: ( ( wspace ESAC )=> wspace ESAC )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_30 = input.LA(1);

                         
                        int index122_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index122_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA122_27 = input.LA(1);

                         
                        int index122_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index122_27);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA122_11 = input.LA(1);

                         
                        int index122_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index122_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA122_7 = input.LA(1);

                         
                        int index122_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index122_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA122_15 = input.LA(1);

                         
                        int index122_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index122_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA122_21 = input.LA(1);

                         
                        int index122_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index122_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA122_22 = input.LA(1);

                         
                        int index122_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index122_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA122_23 = input.LA(1);

                         
                        int index122_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_java_libbash()) ) {s = 18;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index122_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA122_1 = input.LA(1);

                         
                        int index122_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_1==EOF||(LA122_1>=SEMIC && LA122_1<=AMP)||(LA122_1>=LOGICAND && LA122_1<=LOGICOR)||LA122_1==PIPE||(LA122_1>=LESS_THAN && LA122_1<=GREATER_THAN)||(LA122_1>=RPAREN && LA122_1<=RSHIFT)||(LA122_1>=AMP_GREATER_THAN && LA122_1<=AMP_RSHIFT)||LA122_1==DOUBLE_SEMIC) ) {s = 5;}

                        else if ( (LA122_1==EOL) ) {s = 2;}

                        else if ( (LA122_1==BLANK) ) {s = 6;}

                        else if ( (LA122_1==ESAC) ) {s = 7;}

                        else if ( (LA122_1==AMP_LESS_THAN) ) {s = 3;}

                        else if ( (LA122_1==LPAREN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                        else if ( (LA122_1==POUND||LA122_1==BANG||(LA122_1>=TIME && LA122_1<=LETTER)||(LA122_1>=NAME && LA122_1<=LBRACE)||(LA122_1>=FOR && LA122_1<=DONE)||(LA122_1>=SELECT && LA122_1<=CASE)||(LA122_1>=TILDE && LA122_1<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_1>=SLASH && LA122_1<=QMARK)||(LA122_1>=COMMAND_SUBSTITUTION_PAREN && LA122_1<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 8;}

                         
                        input.seek(index122_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA122_0 = input.LA(1);

                         
                        int index122_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_0==BLANK) ) {s = 1;}

                        else if ( (LA122_0==EOL) ) {s = 2;}

                        else if ( (LA122_0==EOF||(LA122_0>=SEMIC && LA122_0<=AMP)||(LA122_0>=LOGICAND && LA122_0<=LOGICOR)||LA122_0==PIPE||(LA122_0>=LESS_THAN && LA122_0<=GREATER_THAN)||LA122_0==RPAREN||(LA122_0>=HERE_STRING_OP && LA122_0<=AMP_RSHIFT)||LA122_0==DOUBLE_SEMIC) ) {s = 3;}

                        else if ( (LA122_0==POUND||LA122_0==BANG||(LA122_0>=TIME && LA122_0<=LETTER)||LA122_0==LPAREN||LA122_0==DIGIT||(LA122_0>=NAME && LA122_0<=LBRACE)||(LA122_0>=FOR && LA122_0<=DONE)||(LA122_0>=SELECT && LA122_0<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_0>=SLASH && LA122_0<=QMARK)||(LA122_0>=COMMAND_SUBSTITUTION_PAREN && LA122_0<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                         
                        input.seek(index122_0);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA122_12 = input.LA(1);

                         
                        int index122_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_12==POUND||LA122_12==BANG||(LA122_12>=TIME && LA122_12<=HERE_STRING_OP)||(LA122_12>=RSHIFT && LA122_12<=FOR)||LA122_12==DO||LA122_12==LLPAREN||(LA122_12>=SELECT && LA122_12<=CASE)||(LA122_12>=TILDE && LA122_12<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_12>=SLASH && LA122_12<=QMARK)||(LA122_12>=COMMAND_SUBSTITUTION_PAREN && LA122_12<=COMMAND_SUBSTITUTION_TICK)) ) {s = 19;}

                        else if ( (LA122_12==BLANK) ) {s = 9;}

                        else if ( (LA122_12==ESAC) ) {s = 22;}

                        else if ( (LA122_12==DONE) ) {s = 10;}

                        else if ( (LA122_12==EOL) ) {s = 12;}

                        else if ( (LA122_12==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( (LA122_12==IN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA122_6 = input.LA(1);

                         
                        int index122_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_6==RPAREN||LA122_6==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( (LA122_6==BLANK) ) {s = 6;}

                        else if ( (LA122_6==ESAC) ) {s = 15;}

                        else if ( (LA122_6==EOL) ) {s = 16;}

                        else if ( (LA122_6==LPAREN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                        else if ( (LA122_6==QMARK) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 8;}

                        else if ( (LA122_6==POUND||LA122_6==BANG||(LA122_6>=MINUS && LA122_6<=LETTER)||LA122_6==DIGIT||(LA122_6>=NAME && LA122_6<=LBRACE)||(LA122_6>=TILDE && LA122_6<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_6>=SLASH && LA122_6<=TIMES)||(LA122_6>=COMMAND_SUBSTITUTION_PAREN && LA122_6<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 17;}

                        else if ( (LA122_6==TIME||(LA122_6>=FOR && LA122_6<=DONE)||(LA122_6>=SELECT && LA122_6<=CASE)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_6);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA122_26 = input.LA(1);

                         
                        int index122_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_26==RPAREN||LA122_26==RBRACE||LA122_26==DO||(LA122_26>=THEN && LA122_26<=ELIF)) ) {s = 29;}

                        else if ( ((LA122_26>=EOL && LA122_26<=BLANK)) ) {s = 26;}

                        else if ( (LA122_26==ESAC) ) {s = 30;}

                        else if ( (LA122_26==DONE) ) {s = 10;}

                        else if ( (LA122_26==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( (LA122_26==LPAREN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                        else if ( (LA122_26==QMARK) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 8;}

                        else if ( (LA122_26==TIMES) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 17;}

                        else if ( (LA122_26==PLUS) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 24;}

                        else if ( (LA122_26==AT) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 28;}

                        else if ( (LA122_26==POUND||LA122_26==BANG||(LA122_26>=MINUS && LA122_26<=LETTER)||LA122_26==DIGIT||(LA122_26>=NAME && LA122_26<=EQUALS)||(LA122_26>=DQUOTE && LA122_26<=LBRACE)||(LA122_26>=TILDE && LA122_26<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_26>=SLASH && LA122_26<=COMMA)||(LA122_26>=ESC_RPAREN && LA122_26<=ESC_SQUOTE)||(LA122_26>=COMMAND_SUBSTITUTION_PAREN && LA122_26<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 31;}

                        else if ( (LA122_26==TIME||(LA122_26>=FOR && LA122_26<=IN)||(LA122_26>=SELECT && LA122_26<=IF)||(LA122_26>=WHILE && LA122_26<=CASE)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_26);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA122_9 = input.LA(1);

                         
                        int index122_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_9==POUND||LA122_9==BANG||(LA122_9>=TIME && LA122_9<=HERE_STRING_OP)||(LA122_9>=RSHIFT && LA122_9<=FOR)||LA122_9==DO||LA122_9==LLPAREN||(LA122_9>=SELECT && LA122_9<=CASE)||(LA122_9>=TILDE && LA122_9<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_9>=SLASH && LA122_9<=QMARK)||(LA122_9>=COMMAND_SUBSTITUTION_PAREN && LA122_9<=COMMAND_SUBSTITUTION_TICK)) ) {s = 19;}

                        else if ( (LA122_9==EOL) ) {s = 12;}

                        else if ( (LA122_9==BLANK) ) {s = 20;}

                        else if ( (LA122_9==ESAC) ) {s = 21;}

                        else if ( (LA122_9==DONE) ) {s = 10;}

                        else if ( (LA122_9==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( (LA122_9==IN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_9);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA122_20 = input.LA(1);

                         
                        int index122_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA122_20>=LESS_THAN && LA122_20<=GREATER_THAN)||(LA122_20>=RPAREN && LA122_20<=HERE_STRING_OP)||(LA122_20>=RSHIFT && LA122_20<=AMP_RSHIFT)||LA122_20==RBRACE||LA122_20==DO||(LA122_20>=THEN && LA122_20<=ELIF)) ) {s = 25;}

                        else if ( ((LA122_20>=EOL && LA122_20<=BLANK)) ) {s = 26;}

                        else if ( (LA122_20==ESAC) ) {s = 27;}

                        else if ( (LA122_20==DONE) ) {s = 10;}

                        else if ( (LA122_20==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( (LA122_20==LPAREN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                        else if ( (LA122_20==QMARK) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 8;}

                        else if ( (LA122_20==TIMES) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 17;}

                        else if ( (LA122_20==PLUS) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 24;}

                        else if ( (LA122_20==POUND||LA122_20==BANG||(LA122_20>=MINUS && LA122_20<=LETTER)||(LA122_20>=NAME && LA122_20<=EQUALS)||(LA122_20>=DQUOTE && LA122_20<=LBRACE)||(LA122_20>=TILDE && LA122_20<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_20>=SLASH && LA122_20<=ESC_SQUOTE)||(LA122_20>=COMMAND_SUBSTITUTION_PAREN && LA122_20<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 28;}

                        else if ( (LA122_20==TIME||(LA122_20>=FOR && LA122_20<=IN)||(LA122_20>=SELECT && LA122_20<=IF)||(LA122_20>=WHILE && LA122_20<=CASE)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA122_16 = input.LA(1);

                         
                        int index122_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_16==DOUBLE_SEMIC) ) {s = 14;}

                        else if ( ((LA122_16>=EOL && LA122_16<=BLANK)) ) {s = 16;}

                        else if ( (LA122_16==ESAC) ) {s = 23;}

                        else if ( (LA122_16==RPAREN) ) {s = 19;}

                        else if ( (LA122_16==LPAREN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 4;}

                        else if ( (LA122_16==QMARK) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 8;}

                        else if ( (LA122_16==TIMES) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 17;}

                        else if ( (LA122_16==POUND||LA122_16==BANG||(LA122_16>=MINUS && LA122_16<=LETTER)||LA122_16==DIGIT||(LA122_16>=NAME && LA122_16<=LBRACE)||(LA122_16>=TILDE && LA122_16<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_16>=SLASH && LA122_16<=ESC_SQUOTE)||(LA122_16>=COMMAND_SUBSTITUTION_PAREN && LA122_16<=COMMAND_SUBSTITUTION_TICK)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 24;}

                        else if ( (LA122_16==TIME||(LA122_16>=FOR && LA122_16<=DONE)||(LA122_16>=SELECT && LA122_16<=CASE)) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA122_2 = input.LA(1);

                         
                        int index122_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA122_2==BLANK) ) {s = 9;}

                        else if ( (LA122_2==EOF||LA122_2==POUND||LA122_2==BANG||(LA122_2>=TIME && LA122_2<=HERE_STRING_OP)||(LA122_2>=RSHIFT && LA122_2<=FOR)||(LA122_2>=DO && LA122_2<=CASE)||(LA122_2>=TILDE && LA122_2<=SINGLE_QUOTED_STRING_TOKEN)||(LA122_2>=SLASH && LA122_2<=QMARK)||(LA122_2>=COMMAND_SUBSTITUTION_PAREN && LA122_2<=COMMAND_SUBSTITUTION_TICK)) ) {s = 10;}

                        else if ( (LA122_2==ESAC) ) {s = 11;}

                        else if ( (LA122_2==EOL) ) {s = 12;}

                        else if ( (LA122_2==IN) && ((!((case_body_scope)case_body_stack.peek()).case_end))) {s = 13;}

                         
                        input.seek(index122_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\5\uffff";
    static final String DFA134_eofS =
        "\5\uffff";
    static final String DFA134_minS =
        "\2\137\1\uffff\1\137\1\uffff";
    static final String DFA134_maxS =
        "\1\156\1\173\1\uffff\1\173\1\uffff";
    static final String DFA134_acceptS =
        "\2\uffff\1\2\1\uffff\1\1";
    static final String DFA134_specialS =
        "\5\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\3\1\1\3\uffff\1\4\1\2\10\uffff\1\2",
            "\2\3\3\uffff\1\4\1\2\10\uffff\1\2\14\uffff\1\2",
            "",
            "\2\3\3\uffff\1\4\1\2\25\uffff\1\2",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:30: ( ( wspace )? LOGICAND ( wspace )? keyword_condition_primary )*";
        }
    }
    static final String DFA137_eotS =
        "\5\uffff";
    static final String DFA137_eofS =
        "\5\uffff";
    static final String DFA137_minS =
        "\3\137\2\uffff";
    static final String DFA137_maxS =
        "\1\156\2\173\2\uffff";
    static final String DFA137_acceptS =
        "\3\uffff\1\2\1\1";
    static final String DFA137_specialS =
        "\5\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\2\1\1\4\uffff\1\4\10\uffff\1\3",
            "\2\2\4\uffff\1\4\10\uffff\1\3\14\uffff\1\3",
            "\2\2\4\uffff\1\4\25\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 545:26: ( ( wspace )? LOGICOR ( wspace )? keyword_condition_and )*";
        }
    }
    static final String DFA140_eotS =
        "\57\uffff";
    static final String DFA140_eofS =
        "\57\uffff";
    static final String DFA140_minS =
        "\1\143\1\uffff\2\0\53\uffff";
    static final String DFA140_maxS =
        "\1\u00b1\1\uffff\2\0\53\uffff";
    static final String DFA140_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\50\uffff\1\2\1\3";
    static final String DFA140_specialS =
        "\2\uffff\1\0\1\1\53\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\4\2\uffff\1\2\1\uffff\1\4\1\3\1\4\2\uffff\1\1\1\uffff\1\4"+
            "\6\uffff\12\4\1\uffff\4\4\2\uffff\22\4\1\uffff\24\4\2\uffff"+
            "\2\4",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "548:1: keyword_condition_primary : ( LPAREN ( BLANK )? keyword_condition ( BLANK )? RPAREN | ( BANG )=> keyword_negation_primary | ( unary_operator )=> keyword_condition_unary | keyword_condition_binary );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_2 = input.LA(1);

                         
                        int index140_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_java_libbash()) ) {s = 45;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index140_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA140_3 = input.LA(1);

                         
                        int index140_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_java_libbash()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index140_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\22\uffff";
    static final String DFA144_eofS =
        "\22\uffff";
    static final String DFA144_minS =
        "\1\4\5\0\1\uffff\4\0\7\uffff";
    static final String DFA144_maxS =
        "\1\u00b4\5\0\1\uffff\4\0\7\uffff";
    static final String DFA144_acceptS =
        "\6\uffff\1\1\4\uffff\1\2\1\10\1\6\1\3\1\7\1\4\1\5";
    static final String DFA144_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\7\1\10\7\uffff}>";
    static final String[] DFA144_transitionS = {
            "\133\12\1\4\1\1\3\12\1\2\1\3\7\12\1\10\1\5\17\12\1\6\6\12\1"+
            "\11\14\12\1\7\42\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()+ loopback of 581:3: ( DQUOTE | {...}? => preserved_tokens | ( ESC BLANK )=> ESC BLANK | LPAREN | LLPAREN | {...}? => RPAREN | ~ ( BLANK | EOL | LOGICAND | LOGICOR | LPAREN | RPAREN | DQUOTE | LLPAREN ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_2 = input.LA(1);

                         
                        int index144_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index144_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA144_4 = input.LA(1);

                         
                        int index144_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index144_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA144_5 = input.LA(1);

                         
                        int index144_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).parens != 0)) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index144_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA144_7 = input.LA(1);

                         
                        int index144_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (synpred31_java_libbash()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((bash_pattern_part_scope)bash_pattern_part_stack.peek()).quoted)) ) {s = 11;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\24\uffff";
    static final String DFA150_eofS =
        "\1\2\23\uffff";
    static final String DFA150_minS =
        "\1\137\1\0\22\uffff";
    static final String DFA150_maxS =
        "\1\u0086\1\0\22\uffff";
    static final String DFA150_acceptS =
        "\2\uffff\1\2\20\uffff\1\1";
    static final String DFA150_specialS =
        "\1\uffff\1\0\22\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\2\1\1\2\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\1\uffff\1\2"+
            "\1\uffff\6\2\20\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 605:30: ( builtin_logic_and BLANK builtin_condition_primary )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_1 = input.LA(1);

                         
                        int index150_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA(1) == BLANK && LA(2) == MINUS && LA(3) == LETTER && "a".equals(get_string(LT(3))))) ) {s = 19;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index150_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\57\uffff";
    static final String DFA154_eofS =
        "\57\uffff";
    static final String DFA154_minS =
        "\1\143\1\uffff\2\0\53\uffff";
    static final String DFA154_maxS =
        "\1\u00b1\1\uffff\2\0\53\uffff";
    static final String DFA154_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\50\uffff\1\2\1\3";
    static final String DFA154_specialS =
        "\2\uffff\1\0\1\1\53\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\4\2\uffff\1\2\1\uffff\1\4\1\3\1\4\2\uffff\1\1\1\uffff\1\4"+
            "\6\uffff\12\4\1\uffff\4\4\2\uffff\22\4\1\uffff\24\4\2\uffff"+
            "\2\4",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "610:1: builtin_condition_primary : ( LPAREN ( BLANK )? builtin_condition ( BLANK )? RPAREN | ( BANG )=> builtin_negation_primary | ( unary_operator )=> builtin_condition_unary | builtin_condition_binary );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_2 = input.LA(1);

                         
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred32_java_libbash()) ) {s = 45;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_3 = input.LA(1);

                         
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_java_libbash()) ) {s = 46;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\17\uffff";
    static final String DFA165_eofS =
        "\17\uffff";
    static final String DFA165_minS =
        "\1\4\5\0\11\uffff";
    static final String DFA165_maxS =
        "\1\u00b4\5\0\11\uffff";
    static final String DFA165_acceptS =
        "\6\uffff\1\11\1\1\1\3\1\10\1\2\1\4\1\5\1\6\1\7";
    static final String DFA165_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA165_transitionS = {
            "\173\6\1\5\22\6\1\4\4\6\1\1\30\6\1\2\1\3\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "688:1: expansion_base : ( ( DOLLAR ( LBRACE | name | num | TIMES | AT | POUND | QMARK | MINUS | DOLLAR | BANG ) )=> variable_reference | ( command_substitution )=> command_substitution | ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_expansion | ( ESC DQUOTE )=> ESC DQUOTE -> DQUOTE | ( ESC TICK )=> ESC TICK -> TICK | ( ESC DOLLAR )=> ESC DOLLAR -> DOLLAR | ( brace_expansion )=> brace_expansion | ( DOLLAR SINGLE_QUOTED_STRING_TOKEN )=> DOLLAR SINGLE_QUOTED_STRING_TOKEN -> ^( ANSI_C_QUOTING SINGLE_QUOTED_STRING_TOKEN ) | . );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_1 = input.LA(1);

                         
                        int index165_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_java_libbash()) ) {s = 7;}

                        else if ( (synpred40_java_libbash()) ) {s = 8;}

                        else if ( (synpred45_java_libbash()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index165_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_2 = input.LA(1);

                         
                        int index165_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_java_libbash()) ) {s = 10;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index165_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA165_3 = input.LA(1);

                         
                        int index165_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_java_libbash()) ) {s = 10;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index165_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA165_4 = input.LA(1);

                         
                        int index165_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_java_libbash()) ) {s = 11;}

                        else if ( (synpred42_java_libbash()) ) {s = 12;}

                        else if ( (synpred43_java_libbash()) ) {s = 13;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index165_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA165_5 = input.LA(1);

                         
                        int index165_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_java_libbash()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index165_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA171_eotS =
        "\111\uffff";
    static final String DFA171_eofS =
        "\2\uffff\1\3\1\uffff\1\27\104\uffff";
    static final String DFA171_minS =
        "\1\4\1\157\1\4\1\uffff\1\4\2\uffff\1\0\101\uffff";
    static final String DFA171_maxS =
        "\1\u00b4\1\157\1\u00b4\1\uffff\1\u00b4\2\uffff\1\0\101\uffff";
    static final String DFA171_acceptS =
        "\3\uffff\1\5\1\uffff\1\1\1\4\1\uffff\100\2\1\3";
    static final String DFA171_specialS =
        "\1\uffff\1\2\2\uffff\1\1\2\uffff\1\0\101\uffff}>";
    static final String[] DFA171_transitionS = {
            "\146\3\1\2\4\3\1\1\105\3",
            "\1\4",
            "\u00aa\3\1\6\6\3",
            "",
            "\133\107\1\26\1\10\1\24\1\25\1\54\1\22\1\23\1\103\1\21\1\104"+
            "\1\44\1\35\1\13\1\12\1\106\1\30\1\7\1\17\1\20\1\14\1\11\1\15"+
            "\1\16\1\35\1\56\1\57\1\60\1\51\1\52\1\40\1\43\1\32\1\102\1\105"+
            "\4\104\1\107\1\31\12\104\1\50\1\36\1\70\1\67\1\35\1\34\1\77"+
            "\1\33\1\107\1\76\1\37\1\41\1\42\1\45\1\46\1\47\1\53\1\55\1\61"+
            "\1\62\1\63\1\64\1\65\1\66\1\71\1\72\1\73\1\74\1\75\2\107\1\100"+
            "\1\101\3\107",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "721:3: ( ( DIGIT )=> DIGIT | ( DIGIT DIGIT )=> DIGIT DIGIT | ( DIGIT DIGIT DIGIT )=> DIGIT DIGIT DIGIT | LETTER ALPHANUM ( ALPHANUM )? | . )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_7 = input.LA(1);

                         
                        int index171_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_java_libbash()) ) {s = 71;}

                        else if ( (synpred49_java_libbash()) ) {s = 72;}

                         
                        input.seek(index171_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA171_4 = input.LA(1);

                         
                        int index171_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA171_4==DIGIT) ) {s = 7;}

                        else if ( (LA171_4==BLANK) && (synpred48_java_libbash())) {s = 8;}

                        else if ( (LA171_4==AMP_LESS_THAN) && (synpred48_java_libbash())) {s = 9;}

                        else if ( (LA171_4==GREATER_THAN) && (synpred48_java_libbash())) {s = 10;}

                        else if ( (LA171_4==LESS_THAN) && (synpred48_java_libbash())) {s = 11;}

                        else if ( (LA171_4==RSHIFT) && (synpred48_java_libbash())) {s = 12;}

                        else if ( (LA171_4==AMP_GREATER_THAN) && (synpred48_java_libbash())) {s = 13;}

                        else if ( (LA171_4==AMP_RSHIFT) && (synpred48_java_libbash())) {s = 14;}

                        else if ( (LA171_4==HERE_STRING_OP) && (synpred48_java_libbash())) {s = 15;}

                        else if ( (LA171_4==LSHIFT) && (synpred48_java_libbash())) {s = 16;}

                        else if ( (LA171_4==PIPE) && (synpred48_java_libbash())) {s = 17;}

                        else if ( (LA171_4==LOGICAND) && (synpred48_java_libbash())) {s = 18;}

                        else if ( (LA171_4==LOGICOR) && (synpred48_java_libbash())) {s = 19;}

                        else if ( (LA171_4==SEMIC) && (synpred48_java_libbash())) {s = 20;}

                        else if ( (LA171_4==AMP) && (synpred48_java_libbash())) {s = 21;}

                        else if ( (LA171_4==EOL) && (synpred48_java_libbash())) {s = 22;}

                        else if ( (LA171_4==EOF) && (synpred48_java_libbash())) {s = 23;}

                        else if ( (LA171_4==RPAREN) && (synpred48_java_libbash())) {s = 24;}

                        else if ( (LA171_4==DOUBLE_SEMIC) && (synpred48_java_libbash())) {s = 25;}

                        else if ( (LA171_4==DQUOTE) && (synpred48_java_libbash())) {s = 26;}

                        else if ( (LA171_4==SINGLE_QUOTED_STRING_TOKEN) && (synpred48_java_libbash())) {s = 27;}

                        else if ( (LA171_4==NUMBER) && (synpred48_java_libbash())) {s = 28;}

                        else if ( (LA171_4==LETTER||LA171_4==NAME||LA171_4==UNDERSCORE) && (synpred48_java_libbash())) {s = 29;}

                        else if ( (LA171_4==ESC) && (synpred48_java_libbash())) {s = 30;}

                        else if ( (LA171_4==OTHER) && (synpred48_java_libbash())) {s = 31;}

                        else if ( (LA171_4==EQUALS) && (synpred48_java_libbash())) {s = 32;}

                        else if ( (LA171_4==PCT) && (synpred48_java_libbash())) {s = 33;}

                        else if ( (LA171_4==PCTPCT) && (synpred48_java_libbash())) {s = 34;}

                        else if ( (LA171_4==PLUS) && (synpred48_java_libbash())) {s = 35;}

                        else if ( (LA171_4==MINUS) && (synpred48_java_libbash())) {s = 36;}

                        else if ( (LA171_4==DOT) && (synpred48_java_libbash())) {s = 37;}

                        else if ( (LA171_4==DOTDOT) && (synpred48_java_libbash())) {s = 38;}

                        else if ( (LA171_4==COLON) && (synpred48_java_libbash())) {s = 39;}

                        else if ( (LA171_4==TILDE) && (synpred48_java_libbash())) {s = 40;}

                        else if ( (LA171_4==LSQUARE) && (synpred48_java_libbash())) {s = 41;}

                        else if ( (LA171_4==RSQUARE) && (synpred48_java_libbash())) {s = 42;}

                        else if ( (LA171_4==CARET) && (synpred48_java_libbash())) {s = 43;}

                        else if ( (LA171_4==POUND) && (synpred48_java_libbash())) {s = 44;}

                        else if ( (LA171_4==COMMA) && (synpred48_java_libbash())) {s = 45;}

                        else if ( (LA171_4==EXPORT) && (synpred48_java_libbash())) {s = 46;}

                        else if ( (LA171_4==LOCAL) && (synpred48_java_libbash())) {s = 47;}

                        else if ( (LA171_4==DECLARE) && (synpred48_java_libbash())) {s = 48;}

                        else if ( (LA171_4==AT) && (synpred48_java_libbash())) {s = 49;}

                        else if ( (LA171_4==ESC_RPAREN) && (synpred48_java_libbash())) {s = 50;}

                        else if ( (LA171_4==ESC_LPAREN) && (synpred48_java_libbash())) {s = 51;}

                        else if ( (LA171_4==ESC_RSQUARE) && (synpred48_java_libbash())) {s = 52;}

                        else if ( (LA171_4==ESC_LSQUARE) && (synpred48_java_libbash())) {s = 53;}

                        else if ( (LA171_4==ESC_DOLLAR) && (synpred48_java_libbash())) {s = 54;}

                        else if ( (LA171_4==ESC_GT) && (synpred48_java_libbash())) {s = 55;}

                        else if ( (LA171_4==ESC_LT) && (synpred48_java_libbash())) {s = 56;}

                        else if ( (LA171_4==ESC_TICK) && (synpred48_java_libbash())) {s = 57;}

                        else if ( (LA171_4==ESC_DQUOTE) && (synpred48_java_libbash())) {s = 58;}

                        else if ( (LA171_4==ESC_SQUOTE) && (synpred48_java_libbash())) {s = 59;}

                        else if ( (LA171_4==TIMES) && (synpred48_java_libbash())) {s = 60;}

                        else if ( (LA171_4==QMARK) && (synpred48_java_libbash())) {s = 61;}

                        else if ( (LA171_4==SLASH) && (synpred48_java_libbash())) {s = 62;}

                        else if ( (LA171_4==DOLLAR) && (synpred48_java_libbash())) {s = 63;}

                        else if ( (LA171_4==COMMAND_SUBSTITUTION_PAREN) && (synpred48_java_libbash())) {s = 64;}

                        else if ( (LA171_4==COMMAND_SUBSTITUTION_TICK) && (synpred48_java_libbash())) {s = 65;}

                        else if ( (LA171_4==LBRACE) && (synpred48_java_libbash())) {s = 66;}

                        else if ( (LA171_4==BANG) && (synpred48_java_libbash())) {s = 67;}

                        else if ( (LA171_4==TIME||(LA171_4>=FOR && LA171_4<=DONE)||(LA171_4>=SELECT && LA171_4<=ESAC)) && (synpred48_java_libbash())) {s = 68;}

                        else if ( (LA171_4==RBRACE) && (synpred48_java_libbash())) {s = 69;}

                        else if ( (LA171_4==LPAREN) && (synpred48_java_libbash())) {s = 70;}

                        else if ( ((LA171_4>=ANSI_C_QUOTING && LA171_4<=FUNCTION)||LA171_4==LLPAREN||LA171_4==TICK||(LA171_4>=ALPHANUM && LA171_4<=SQUOTE)||(LA171_4>=EXP && LA171_4<=CONTINUE_LINE)) && (synpred48_java_libbash())) {s = 71;}

                         
                        input.seek(index171_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA171_1 = input.LA(1);

                         
                        int index171_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA171_1==DIGIT) ) {s = 4;}

                        else if ( (synpred47_java_libbash()) ) {s = 5;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index171_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\63\uffff";
    static final String DFA177_eofS =
        "\63\uffff";
    static final String DFA177_minS =
        "\1\143\6\0\54\uffff";
    static final String DFA177_maxS =
        "\1\u00b1\6\0\54\uffff";
    static final String DFA177_acceptS =
        "\7\uffff\1\10\44\uffff\1\1\1\6\1\2\1\3\1\4\1\5\1\7";
    static final String DFA177_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\54\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\7\2\uffff\1\5\1\uffff\3\7\4\uffff\1\7\6\uffff\4\7\1\6\2\7"+
            "\1\3\2\7\1\uffff\4\7\2\uffff\22\7\1\uffff\11\7\1\4\10\7\1\2"+
            "\1\1\2\uffff\2\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "729:1: extended_pattern_match : ( ( QMARK LPAREN )=> QMARK LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_MOST_ONE ( extended_pattern )+ ) | ( TIMES LPAREN )=> TIMES LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_ANY ( extended_pattern )+ ) | ( PLUS LPAREN )=> PLUS LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_AT_LEAST_ONE ( extended_pattern )+ ) | ( AT LPAREN )=> AT LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_EXACTLY_ONE ( extended_pattern )+ ) | ( BANG LPAREN )=> BANG LPAREN extended_pattern ( PIPE extended_pattern )* RPAREN -> ^( EXTENDED_MATCH_NONE ( extended_pattern )+ ) | ( bracket_pattern_match )=> bracket_pattern_match | ( pattern_class_match )=> pattern_class_match | string_expr_part );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_1 = input.LA(1);

                         
                        int index177_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_java_libbash()) ) {s = 44;}

                        else if ( (synpred55_java_libbash()) ) {s = 45;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA177_2 = input.LA(1);

                         
                        int index177_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_java_libbash()) ) {s = 46;}

                        else if ( (synpred55_java_libbash()) ) {s = 45;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA177_3 = input.LA(1);

                         
                        int index177_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_java_libbash()) ) {s = 47;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA177_4 = input.LA(1);

                         
                        int index177_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_java_libbash()) ) {s = 48;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA177_5 = input.LA(1);

                         
                        int index177_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_java_libbash()) ) {s = 49;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA177_6 = input.LA(1);

                         
                        int index177_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_java_libbash()) ) {s = 45;}

                        else if ( (synpred56_java_libbash()) ) {s = 50;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index177_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA178_eotS =
        "\55\uffff";
    static final String DFA178_eofS =
        "\55\uffff";
    static final String DFA178_minS =
        "\1\140\54\uffff";
    static final String DFA178_maxS =
        "\1\u00b1\54\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\2\53\1";
    static final String DFA178_specialS =
        "\1\0\54\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\1\2\uffff\1\30\2\uffff\1\6\1\1\1\54\1\21\1\13\3\uffff\1\1"+
            "\1\12\6\uffff\1\13\1\32\1\33\1\34\1\7\1\26\1\16\1\4\1\10\1\53"+
            "\1\uffff\4\54\2\uffff\12\54\1\25\1\14\1\43\1\42\1\13\1\12\1"+
            "\50\1\11\1\uffff\1\47\1\15\1\17\1\20\1\22\1\23\1\24\1\27\1\31"+
            "\1\5\1\35\1\36\1\37\1\40\1\41\1\44\1\45\1\46\1\3\1\2\2\uffff"+
            "\1\51\1\52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "()+ loopback of 745:4: ( (~ ( RPAREN | PIPE ) )=> extended_pattern_match )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_0 = input.LA(1);

                         
                        int index178_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA178_0==BLANK||LA178_0==PIPE||LA178_0==RPAREN) ) {s = 1;}

                        else if ( (LA178_0==QMARK) && (synpred57_java_libbash())) {s = 2;}

                        else if ( (LA178_0==TIMES) && (synpred57_java_libbash())) {s = 3;}

                        else if ( (LA178_0==PLUS) && (synpred57_java_libbash())) {s = 4;}

                        else if ( (LA178_0==AT) && (synpred57_java_libbash())) {s = 5;}

                        else if ( (LA178_0==BANG) && (synpred57_java_libbash())) {s = 6;}

                        else if ( (LA178_0==LSQUARE) && (synpred57_java_libbash())) {s = 7;}

                        else if ( (LA178_0==DQUOTE) && (synpred57_java_libbash())) {s = 8;}

                        else if ( (LA178_0==SINGLE_QUOTED_STRING_TOKEN) && (synpred57_java_libbash())) {s = 9;}

                        else if ( (LA178_0==DIGIT||LA178_0==NUMBER) && (synpred57_java_libbash())) {s = 10;}

                        else if ( (LA178_0==LETTER||LA178_0==NAME||LA178_0==UNDERSCORE) && (synpred57_java_libbash())) {s = 11;}

                        else if ( (LA178_0==ESC) && (synpred57_java_libbash())) {s = 12;}

                        else if ( (LA178_0==OTHER) && (synpred57_java_libbash())) {s = 13;}

                        else if ( (LA178_0==EQUALS) && (synpred57_java_libbash())) {s = 14;}

                        else if ( (LA178_0==PCT) && (synpred57_java_libbash())) {s = 15;}

                        else if ( (LA178_0==PCTPCT) && (synpred57_java_libbash())) {s = 16;}

                        else if ( (LA178_0==MINUS) && (synpred57_java_libbash())) {s = 17;}

                        else if ( (LA178_0==DOT) && (synpred57_java_libbash())) {s = 18;}

                        else if ( (LA178_0==DOTDOT) && (synpred57_java_libbash())) {s = 19;}

                        else if ( (LA178_0==COLON) && (synpred57_java_libbash())) {s = 20;}

                        else if ( (LA178_0==TILDE) && (synpred57_java_libbash())) {s = 21;}

                        else if ( (LA178_0==RSQUARE) && (synpred57_java_libbash())) {s = 22;}

                        else if ( (LA178_0==CARET) && (synpred57_java_libbash())) {s = 23;}

                        else if ( (LA178_0==POUND) && (synpred57_java_libbash())) {s = 24;}

                        else if ( (LA178_0==COMMA) && (synpred57_java_libbash())) {s = 25;}

                        else if ( (LA178_0==EXPORT) && (synpred57_java_libbash())) {s = 26;}

                        else if ( (LA178_0==LOCAL) && (synpred57_java_libbash())) {s = 27;}

                        else if ( (LA178_0==DECLARE) && (synpred57_java_libbash())) {s = 28;}

                        else if ( (LA178_0==ESC_RPAREN) && (synpred57_java_libbash())) {s = 29;}

                        else if ( (LA178_0==ESC_LPAREN) && (synpred57_java_libbash())) {s = 30;}

                        else if ( (LA178_0==ESC_RSQUARE) && (synpred57_java_libbash())) {s = 31;}

                        else if ( (LA178_0==ESC_LSQUARE) && (synpred57_java_libbash())) {s = 32;}

                        else if ( (LA178_0==ESC_DOLLAR) && (synpred57_java_libbash())) {s = 33;}

                        else if ( (LA178_0==ESC_GT) && (synpred57_java_libbash())) {s = 34;}

                        else if ( (LA178_0==ESC_LT) && (synpred57_java_libbash())) {s = 35;}

                        else if ( (LA178_0==ESC_TICK) && (synpred57_java_libbash())) {s = 36;}

                        else if ( (LA178_0==ESC_DQUOTE) && (synpred57_java_libbash())) {s = 37;}

                        else if ( (LA178_0==ESC_SQUOTE) && (synpred57_java_libbash())) {s = 38;}

                        else if ( (LA178_0==SLASH) && (synpred57_java_libbash())) {s = 39;}

                        else if ( (LA178_0==DOLLAR) && (synpred57_java_libbash())) {s = 40;}

                        else if ( (LA178_0==COMMAND_SUBSTITUTION_PAREN) && (synpred57_java_libbash())) {s = 41;}

                        else if ( (LA178_0==COMMAND_SUBSTITUTION_TICK) && (synpred57_java_libbash())) {s = 42;}

                        else if ( (LA178_0==LBRACE) && (synpred57_java_libbash())) {s = 43;}

                        else if ( (LA178_0==TIME||(LA178_0>=FOR && LA178_0<=DONE)||(LA178_0>=SELECT && LA178_0<=ESAC)) && (synpred57_java_libbash())) {s = 44;}

                         
                        input.seek(index178_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\55\uffff";
    static final String DFA181_eofS =
        "\55\uffff";
    static final String DFA181_minS =
        "\1\143\1\0\53\uffff";
    static final String DFA181_maxS =
        "\1\u00b1\1\0\53\uffff";
    static final String DFA181_acceptS =
        "\2\uffff\1\2\51\uffff\1\1";
    static final String DFA181_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\2\2\uffff\1\2\1\uffff\3\2\4\uffff\1\2\6\uffff\4\2\1\1\5\2"+
            "\1\uffff\4\2\2\uffff\22\2\1\uffff\24\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "756:1: bracket_pattern_part : ( ( pattern_class_match )=> pattern_class_match | string_expr_part );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_java_libbash()) ) {s = 44;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA182_eotS =
        "\55\uffff";
    static final String DFA182_eofS =
        "\55\uffff";
    static final String DFA182_minS =
        "\1\143\1\0\53\uffff";
    static final String DFA182_maxS =
        "\1\u00b1\1\0\53\uffff";
    static final String DFA182_acceptS =
        "\2\uffff\52\1\1\2";
    static final String DFA182_specialS =
        "\1\0\1\1\53\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\23\2\uffff\1\52\1\uffff\1\53\1\15\1\6\4\uffff\1\5\6\uffff"+
            "\1\6\1\25\1\26\1\27\1\2\1\1\1\11\1\14\1\3\1\51\1\uffff\4\53"+
            "\2\uffff\12\53\1\21\1\7\1\37\1\36\1\6\1\5\1\46\1\4\1\uffff\1"+
            "\45\1\10\1\12\1\13\1\16\1\17\1\20\1\22\1\24\1\30\1\31\1\32\1"+
            "\33\1\34\1\35\1\40\1\41\1\42\1\43\1\44\2\uffff\1\47\1\50",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()+ loopback of 761:4: ( (~ RSQUARE )=> bracket_pattern_part )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_0 = input.LA(1);

                         
                        int index182_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_0==RSQUARE) ) {s = 1;}

                        else if ( (LA182_0==LSQUARE) && (synpred61_java_libbash())) {s = 2;}

                        else if ( (LA182_0==DQUOTE) && (synpred61_java_libbash())) {s = 3;}

                        else if ( (LA182_0==SINGLE_QUOTED_STRING_TOKEN) && (synpred61_java_libbash())) {s = 4;}

                        else if ( (LA182_0==DIGIT||LA182_0==NUMBER) && (synpred61_java_libbash())) {s = 5;}

                        else if ( (LA182_0==LETTER||LA182_0==NAME||LA182_0==UNDERSCORE) && (synpred61_java_libbash())) {s = 6;}

                        else if ( (LA182_0==ESC) && (synpred61_java_libbash())) {s = 7;}

                        else if ( (LA182_0==OTHER) && (synpred61_java_libbash())) {s = 8;}

                        else if ( (LA182_0==EQUALS) && (synpred61_java_libbash())) {s = 9;}

                        else if ( (LA182_0==PCT) && (synpred61_java_libbash())) {s = 10;}

                        else if ( (LA182_0==PCTPCT) && (synpred61_java_libbash())) {s = 11;}

                        else if ( (LA182_0==PLUS) && (synpred61_java_libbash())) {s = 12;}

                        else if ( (LA182_0==MINUS) && (synpred61_java_libbash())) {s = 13;}

                        else if ( (LA182_0==DOT) && (synpred61_java_libbash())) {s = 14;}

                        else if ( (LA182_0==DOTDOT) && (synpred61_java_libbash())) {s = 15;}

                        else if ( (LA182_0==COLON) && (synpred61_java_libbash())) {s = 16;}

                        else if ( (LA182_0==TILDE) && (synpred61_java_libbash())) {s = 17;}

                        else if ( (LA182_0==CARET) && (synpred61_java_libbash())) {s = 18;}

                        else if ( (LA182_0==POUND) && (synpred61_java_libbash())) {s = 19;}

                        else if ( (LA182_0==COMMA) && (synpred61_java_libbash())) {s = 20;}

                        else if ( (LA182_0==EXPORT) && (synpred61_java_libbash())) {s = 21;}

                        else if ( (LA182_0==LOCAL) && (synpred61_java_libbash())) {s = 22;}

                        else if ( (LA182_0==DECLARE) && (synpred61_java_libbash())) {s = 23;}

                        else if ( (LA182_0==AT) && (synpred61_java_libbash())) {s = 24;}

                        else if ( (LA182_0==ESC_RPAREN) && (synpred61_java_libbash())) {s = 25;}

                        else if ( (LA182_0==ESC_LPAREN) && (synpred61_java_libbash())) {s = 26;}

                        else if ( (LA182_0==ESC_RSQUARE) && (synpred61_java_libbash())) {s = 27;}

                        else if ( (LA182_0==ESC_LSQUARE) && (synpred61_java_libbash())) {s = 28;}

                        else if ( (LA182_0==ESC_DOLLAR) && (synpred61_java_libbash())) {s = 29;}

                        else if ( (LA182_0==ESC_GT) && (synpred61_java_libbash())) {s = 30;}

                        else if ( (LA182_0==ESC_LT) && (synpred61_java_libbash())) {s = 31;}

                        else if ( (LA182_0==ESC_TICK) && (synpred61_java_libbash())) {s = 32;}

                        else if ( (LA182_0==ESC_DQUOTE) && (synpred61_java_libbash())) {s = 33;}

                        else if ( (LA182_0==ESC_SQUOTE) && (synpred61_java_libbash())) {s = 34;}

                        else if ( (LA182_0==TIMES) && (synpred61_java_libbash())) {s = 35;}

                        else if ( (LA182_0==QMARK) && (synpred61_java_libbash())) {s = 36;}

                        else if ( (LA182_0==SLASH) && (synpred61_java_libbash())) {s = 37;}

                        else if ( (LA182_0==DOLLAR) && (synpred61_java_libbash())) {s = 38;}

                        else if ( (LA182_0==COMMAND_SUBSTITUTION_PAREN) && (synpred61_java_libbash())) {s = 39;}

                        else if ( (LA182_0==COMMAND_SUBSTITUTION_TICK) && (synpred61_java_libbash())) {s = 40;}

                        else if ( (LA182_0==LBRACE) && (synpred61_java_libbash())) {s = 41;}

                        else if ( (LA182_0==BANG) && (synpred61_java_libbash())) {s = 42;}

                        else if ( (LA182_0==TIME||(LA182_0>=FOR && LA182_0<=DONE)||(LA182_0>=SELECT && LA182_0<=ESAC)) && (synpred61_java_libbash())) {s = 43;}

                         
                        input.seek(index182_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA182_1 = input.LA(1);

                         
                        int index182_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_java_libbash()) ) {s = 43;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index182_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\14\uffff";
    static final String DFA184_eofS =
        "\14\uffff";
    static final String DFA184_minS =
        "\1\u0097\1\143\12\uffff";
    static final String DFA184_maxS =
        "\1\u0097\1\u00ad\12\uffff";
    static final String DFA184_acceptS =
        "\2\uffff\1\1\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\3\1\2";
    static final String DFA184_specialS =
        "\14\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\1",
            "\1\5\2\uffff\1\11\2\uffff\1\7\1\13\4\uffff\1\12\6\uffff\1\13"+
            "\10\uffff\1\2\25\uffff\1\13\1\12\1\10\13\uffff\1\4\10\uffff"+
            "\1\3\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "774:1: variable_reference : ( DOLLAR LBRACE parameter_expansion RBRACE -> ^( VAR_REF parameter_expansion ) | DOLLAR name -> ^( VAR_REF name ) | DOLLAR num -> ^( VAR_REF num ) | DOLLAR TIMES -> ^( VAR_REF TIMES ) | DOLLAR AT -> ^( VAR_REF AT ) | DOLLAR POUND -> ^( VAR_REF POUND ) | DOLLAR QMARK -> ^( VAR_REF QMARK ) | DOLLAR MINUS -> ^( VAR_REF MINUS ) | DOLLAR DOLLAR -> ^( VAR_REF DOLLAR ) | DOLLAR BANG -> ^( VAR_REF BANG ) );";
        }
    }
    static final String DFA195_eotS =
        "\14\uffff";
    static final String DFA195_eofS =
        "\14\uffff";
    static final String DFA195_minS =
        "\1\143\1\uffff\1\143\4\140\1\0\1\4\2\uffff\1\0";
    static final String DFA195_maxS =
        "\1\u00ad\1\uffff\1\u0096\4\u00ad\1\0\1\u00b4\2\uffff\1\0";
    static final String DFA195_acceptS =
        "\1\uffff\1\1\7\uffff\1\3\1\2\1\uffff";
    static final String DFA195_specialS =
        "\3\uffff\1\0\3\uffff\1\2\3\uffff\1\1}>";
    static final String[] DFA195_transitionS = {
            "\1\3\2\uffff\1\2\3\uffff\1\1\4\uffff\1\1\6\uffff\1\1\36\uffff"+
            "\3\1\13\uffff\1\1\10\uffff\2\1",
            "",
            "\1\6\6\uffff\1\5\4\uffff\1\4\6\uffff\1\5\36\uffff\1\5\1\4",
            "\1\1\2\uffff\1\10\2\uffff\1\11\2\uffff\1\1\1\11\4\uffff\1\11"+
            "\6\uffff\1\11\5\uffff\2\1\2\uffff\1\1\24\uffff\3\11\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\11\10\uffff\1\11\1\7",
            "\1\1\2\uffff\1\1\5\uffff\1\1\20\uffff\1\12\1\uffff\2\1\2\uffff"+
            "\1\1\31\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\12\10\uffff"+
            "\1\12\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\20\uffff\1\12\1\uffff\2\1\2\uffff"+
            "\1\1\31\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\12\10\uffff"+
            "\1\12\1\1",
            "\1\1\2\uffff\1\1\5\uffff\1\1\20\uffff\1\12\1\uffff\2\1\2\uffff"+
            "\1\1\31\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\12\10\uffff"+
            "\1\12\1\1",
            "\1\uffff",
            "\174\1\1\13\64\1",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "786:1: parameter_expansion : ( variable_name ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name ) | BANG variable_name_for_bang ( TIMES -> ^( BANG variable_name_for_bang TIMES ) | AT -> ^( BANG variable_name_for_bang AT ) | LSQUARE (op= TIMES | op= AT ) RSQUARE -> ^( LIST_EXPAND variable_name_for_bang $op) ) | {...}? => variable_size_ref );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_3 = input.LA(1);

                         
                        int index195_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA195_3==BLANK||LA195_3==MINUS||(LA195_3>=EQUALS && LA195_3<=PLUS)||LA195_3==RBRACE||LA195_3==SLASH||(LA195_3>=PCT && LA195_3<=PCTPCT)||LA195_3==COLON) ) {s = 1;}

                        else if ( (LA195_3==QMARK) ) {s = 7;}

                        else if ( (LA195_3==POUND) ) {s = 8;}

                        else if ( (LA195_3==BANG||LA195_3==LETTER||LA195_3==DIGIT||LA195_3==NAME||(LA195_3>=UNDERSCORE && LA195_3<=DOLLAR)||LA195_3==AT||LA195_3==TIMES) && ((LA(1) == POUND && LA(2) != RBRACE ))) {s = 9;}

                         
                        input.seek(index195_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA195_11 = input.LA(1);

                         
                        int index195_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((LA(1) == POUND && LA(2) != RBRACE )))) ) {s = 1;}

                        else if ( ((LA(1) == POUND && LA(2) != RBRACE )) ) {s = 9;}

                         
                        input.seek(index195_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA195_7 = input.LA(1);

                         
                        int index195_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((LA(1) == POUND && LA(2) != RBRACE )))) ) {s = 1;}

                        else if ( ((LA(1) == POUND && LA(2) != RBRACE )) ) {s = 9;}

                         
                        input.seek(index195_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA192_eotS =
        "\15\uffff";
    static final String DFA192_eofS =
        "\15\uffff";
    static final String DFA192_minS =
        "\1\140\1\0\13\uffff";
    static final String DFA192_maxS =
        "\1\u00ad\1\0\13\uffff";
    static final String DFA192_acceptS =
        "\2\uffff\4\1\1\3\2\uffff\1\4\1\5\1\uffff\1\2";
    static final String DFA192_specialS =
        "\1\0\1\1\13\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\12\2\uffff\1\6\5\uffff\1\2\22\uffff\1\3\1\5\2\uffff\1\12"+
            "\31\uffff\1\11\1\uffff\2\6\2\uffff\1\1\14\uffff\1\4",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "788:3: ( ( parameter_value_operator )=> parameter_value_operator parameter_expansion_value -> ^( parameter_value_operator variable_name parameter_expansion_value ) | COLON ( BLANK )? (os= explicit_arithmetic ( COLON ( BLANK )? len= explicit_arithmetic )? -> ^( OFFSET variable_name ^( OFFSET $os) ( ^( OFFSET ^( $len) ) )? ) | COLON ( BLANK )? len= explicit_arithmetic -> ^( OFFSET variable_name ^( OFFSET NUMBER[\"0\"] ) ( ^( OFFSET ^( $len) ) )? ) ) | parameter_delete_operator parameter_delete_pattern -> ^( parameter_delete_operator variable_name parameter_delete_pattern ) | parameter_replace_operator parameter_replace_pattern ( SLASH parameter_expansion_value )? -> ^( parameter_replace_operator variable_name parameter_replace_pattern ( parameter_expansion_value )? ) | ( BLANK )? -> variable_name )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_0 = input.LA(1);

                         
                        int index192_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_0==COLON) ) {s = 1;}

                        else if ( (LA192_0==MINUS) && (synpred62_java_libbash())) {s = 2;}

                        else if ( (LA192_0==EQUALS) && (synpred62_java_libbash())) {s = 3;}

                        else if ( (LA192_0==QMARK) && (synpred62_java_libbash())) {s = 4;}

                        else if ( (LA192_0==PLUS) && (synpred62_java_libbash())) {s = 5;}

                        else if ( (LA192_0==POUND||(LA192_0>=PCT && LA192_0<=PCTPCT)) ) {s = 6;}

                        else if ( (LA192_0==SLASH) ) {s = 9;}

                        else if ( (LA192_0==BLANK||LA192_0==RBRACE) ) {s = 10;}

                         
                        input.seek(index192_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA192_1 = input.LA(1);

                         
                        int index192_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_java_libbash()) ) {s = 5;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index192_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA197_eotS =
        "\12\uffff";
    static final String DFA197_eofS =
        "\12\uffff";
    static final String DFA197_minS =
        "\2\151\10\uffff";
    static final String DFA197_maxS =
        "\2\u00ad\10\uffff";
    static final String DFA197_acceptS =
        "\2\uffff\1\5\1\6\1\7\1\10\1\1\1\2\1\3\1\4";
    static final String DFA197_specialS =
        "\12\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\2\22\uffff\1\3\1\5\42\uffff\1\1\14\uffff\1\4",
            "\1\6\22\uffff\1\7\1\11\57\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;

    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "819:1: parameter_value_operator : ( COLON MINUS -> USE_DEFAULT_WHEN_UNSET_OR_NULL | COLON EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET_OR_NULL | COLON QMARK -> DISPLAY_ERROR_WHEN_UNSET_OR_NULL | COLON PLUS -> USE_ALTERNATE_WHEN_UNSET_OR_NULL | MINUS -> USE_DEFAULT_WHEN_UNSET | EQUALS -> ASSIGN_DEFAULT_WHEN_UNSET | QMARK -> DISPLAY_ERROR_WHEN_UNSET | PLUS -> USE_ALTERNATE_WHEN_UNSET );";
        }
    }
    static final String DFA198_eotS =
        "\57\uffff";
    static final String DFA198_eofS =
        "\57\uffff";
    static final String DFA198_minS =
        "\1\4\2\0\54\uffff";
    static final String DFA198_maxS =
        "\1\u00b4\2\0\54\uffff";
    static final String DFA198_acceptS =
        "\3\uffff\53\1\1\2";
    static final String DFA198_specialS =
        "\1\0\1\1\1\2\54\uffff}>";
    static final String[] DFA198_transitionS = {
            "\137\55\1\31\2\55\1\7\1\55\1\54\1\22\1\14\4\55\1\13\6\55\1\14"+
            "\1\33\1\34\1\35\1\10\1\27\1\17\1\5\1\11\1\53\1\2\4\54\2\55\12"+
            "\54\1\26\1\15\1\44\1\43\1\14\1\13\1\50\1\12\1\55\1\1\1\16\1"+
            "\20\1\21\1\23\1\24\1\25\1\30\1\32\1\6\1\36\1\37\1\40\1\41\1"+
            "\42\1\45\1\46\1\47\1\4\1\3\2\55\1\51\1\52\3\55",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "()+ loopback of 830:4: ( (~ SLASH )=> parameter_pattern_part )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_0 = input.LA(1);

                         
                        int index198_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_0==SLASH) ) {s = 1;}

                        else if ( (LA198_0==RBRACE) ) {s = 2;}

                        else if ( (LA198_0==QMARK) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 3;}

                        else if ( (LA198_0==TIMES) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 4;}

                        else if ( (LA198_0==PLUS) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 5;}

                        else if ( (LA198_0==AT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 6;}

                        else if ( (LA198_0==BANG) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 7;}

                        else if ( (LA198_0==LSQUARE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 8;}

                        else if ( (LA198_0==DQUOTE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 9;}

                        else if ( (LA198_0==SINGLE_QUOTED_STRING_TOKEN) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 10;}

                        else if ( (LA198_0==DIGIT||LA198_0==NUMBER) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 11;}

                        else if ( (LA198_0==LETTER||LA198_0==NAME||LA198_0==UNDERSCORE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 12;}

                        else if ( (LA198_0==ESC) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 13;}

                        else if ( (LA198_0==OTHER) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 14;}

                        else if ( (LA198_0==EQUALS) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 15;}

                        else if ( (LA198_0==PCT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 16;}

                        else if ( (LA198_0==PCTPCT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 17;}

                        else if ( (LA198_0==MINUS) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 18;}

                        else if ( (LA198_0==DOT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 19;}

                        else if ( (LA198_0==DOTDOT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 20;}

                        else if ( (LA198_0==COLON) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 21;}

                        else if ( (LA198_0==TILDE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 22;}

                        else if ( (LA198_0==RSQUARE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 23;}

                        else if ( (LA198_0==CARET) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 24;}

                        else if ( (LA198_0==POUND) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 25;}

                        else if ( (LA198_0==COMMA) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 26;}

                        else if ( (LA198_0==EXPORT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 27;}

                        else if ( (LA198_0==LOCAL) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 28;}

                        else if ( (LA198_0==DECLARE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 29;}

                        else if ( (LA198_0==ESC_RPAREN) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 30;}

                        else if ( (LA198_0==ESC_LPAREN) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 31;}

                        else if ( (LA198_0==ESC_RSQUARE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 32;}

                        else if ( (LA198_0==ESC_LSQUARE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 33;}

                        else if ( (LA198_0==ESC_DOLLAR) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 34;}

                        else if ( (LA198_0==ESC_GT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 35;}

                        else if ( (LA198_0==ESC_LT) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 36;}

                        else if ( (LA198_0==ESC_TICK) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 37;}

                        else if ( (LA198_0==ESC_DQUOTE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 38;}

                        else if ( (LA198_0==ESC_SQUOTE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 39;}

                        else if ( (LA198_0==DOLLAR) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 40;}

                        else if ( (LA198_0==COMMAND_SUBSTITUTION_PAREN) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 41;}

                        else if ( (LA198_0==COMMAND_SUBSTITUTION_TICK) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 42;}

                        else if ( (LA198_0==LBRACE) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 43;}

                        else if ( (LA198_0==TIME||(LA198_0>=FOR && LA198_0<=DONE)||(LA198_0>=SELECT && LA198_0<=ESAC)) && (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash()))) {s = 44;}

                        else if ( ((LA198_0>=ANSI_C_QUOTING && LA198_0<=AMP)||(LA198_0>=LOGICAND && LA198_0<=LOGICOR)||LA198_0==PIPE||(LA198_0>=LESS_THAN && LA198_0<=RPAREN)||(LA198_0>=HERE_STRING_OP && LA198_0<=AMP_RSHIFT)||(LA198_0>=LLPAREN && LA198_0<=DOUBLE_SEMIC)||LA198_0==TICK||(LA198_0>=ALPHANUM && LA198_0<=SQUOTE)||(LA198_0>=EXP && LA198_0<=CONTINUE_LINE)) && ((synpred65_java_libbash()&&(is_special_token(LA(1)))))) {s = 45;}

                         
                        input.seek(index198_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred65_java_libbash()&&(is_special_token(LA(1))))||synpred65_java_libbash())) ) {s = 45;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA198_2 = input.LA(1);

                         
                        int index198_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred65_java_libbash()&&(is_special_token(LA(1))))) ) {s = 45;}

                        else if ( (true) ) {s = 46;}

                         
                        input.seek(index198_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA201_eotS =
        "\56\uffff";
    static final String DFA201_eofS =
        "\56\uffff";
    static final String DFA201_minS =
        "\1\4\53\0\2\uffff";
    static final String DFA201_maxS =
        "\1\u00b4\53\0\2\uffff";
    static final String DFA201_acceptS =
        "\54\uffff\1\2\1\1";
    static final String DFA201_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1"+
        "\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\52\1\53\2\uffff}>";
    static final String[] DFA201_transitionS = {
            "\137\54\1\27\2\54\1\5\1\54\1\53\1\20\1\12\4\54\1\11\6\54\1\12"+
            "\1\31\1\32\1\33\1\6\1\25\1\15\1\3\1\7\1\52\1\54\4\53\2\54\12"+
            "\53\1\24\1\13\1\42\1\41\1\12\1\11\1\47\1\10\1\54\1\46\1\14\1"+
            "\16\1\17\1\21\1\22\1\23\1\26\1\30\1\4\1\34\1\35\1\36\1\37\1"+
            "\40\1\43\1\44\1\45\1\2\1\1\2\54\1\50\1\51\3\54",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "833:1: parameter_pattern_part : ( extended_pattern_match | {...}? => . );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_0 = input.LA(1);

                         
                        int index201_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_0==QMARK) ) {s = 1;}

                        else if ( (LA201_0==TIMES) ) {s = 2;}

                        else if ( (LA201_0==PLUS) ) {s = 3;}

                        else if ( (LA201_0==AT) ) {s = 4;}

                        else if ( (LA201_0==BANG) ) {s = 5;}

                        else if ( (LA201_0==LSQUARE) ) {s = 6;}

                        else if ( (LA201_0==DQUOTE) ) {s = 7;}

                        else if ( (LA201_0==SINGLE_QUOTED_STRING_TOKEN) ) {s = 8;}

                        else if ( (LA201_0==DIGIT||LA201_0==NUMBER) ) {s = 9;}

                        else if ( (LA201_0==LETTER||LA201_0==NAME||LA201_0==UNDERSCORE) ) {s = 10;}

                        else if ( (LA201_0==ESC) ) {s = 11;}

                        else if ( (LA201_0==OTHER) ) {s = 12;}

                        else if ( (LA201_0==EQUALS) ) {s = 13;}

                        else if ( (LA201_0==PCT) ) {s = 14;}

                        else if ( (LA201_0==PCTPCT) ) {s = 15;}

                        else if ( (LA201_0==MINUS) ) {s = 16;}

                        else if ( (LA201_0==DOT) ) {s = 17;}

                        else if ( (LA201_0==DOTDOT) ) {s = 18;}

                        else if ( (LA201_0==COLON) ) {s = 19;}

                        else if ( (LA201_0==TILDE) ) {s = 20;}

                        else if ( (LA201_0==RSQUARE) ) {s = 21;}

                        else if ( (LA201_0==CARET) ) {s = 22;}

                        else if ( (LA201_0==POUND) ) {s = 23;}

                        else if ( (LA201_0==COMMA) ) {s = 24;}

                        else if ( (LA201_0==EXPORT) ) {s = 25;}

                        else if ( (LA201_0==LOCAL) ) {s = 26;}

                        else if ( (LA201_0==DECLARE) ) {s = 27;}

                        else if ( (LA201_0==ESC_RPAREN) ) {s = 28;}

                        else if ( (LA201_0==ESC_LPAREN) ) {s = 29;}

                        else if ( (LA201_0==ESC_RSQUARE) ) {s = 30;}

                        else if ( (LA201_0==ESC_LSQUARE) ) {s = 31;}

                        else if ( (LA201_0==ESC_DOLLAR) ) {s = 32;}

                        else if ( (LA201_0==ESC_GT) ) {s = 33;}

                        else if ( (LA201_0==ESC_LT) ) {s = 34;}

                        else if ( (LA201_0==ESC_TICK) ) {s = 35;}

                        else if ( (LA201_0==ESC_DQUOTE) ) {s = 36;}

                        else if ( (LA201_0==ESC_SQUOTE) ) {s = 37;}

                        else if ( (LA201_0==SLASH) ) {s = 38;}

                        else if ( (LA201_0==DOLLAR) ) {s = 39;}

                        else if ( (LA201_0==COMMAND_SUBSTITUTION_PAREN) ) {s = 40;}

                        else if ( (LA201_0==COMMAND_SUBSTITUTION_TICK) ) {s = 41;}

                        else if ( (LA201_0==LBRACE) ) {s = 42;}

                        else if ( (LA201_0==TIME||(LA201_0>=FOR && LA201_0<=DONE)||(LA201_0>=SELECT && LA201_0<=ESAC)) ) {s = 43;}

                        else if ( ((LA201_0>=ANSI_C_QUOTING && LA201_0<=AMP)||(LA201_0>=LOGICAND && LA201_0<=LOGICOR)||LA201_0==PIPE||(LA201_0>=LESS_THAN && LA201_0<=RPAREN)||(LA201_0>=HERE_STRING_OP && LA201_0<=AMP_RSHIFT)||LA201_0==RBRACE||(LA201_0>=LLPAREN && LA201_0<=DOUBLE_SEMIC)||LA201_0==TICK||(LA201_0>=ALPHANUM && LA201_0<=SQUOTE)||(LA201_0>=EXP && LA201_0<=CONTINUE_LINE)) && ((is_special_token(LA(1))))) {s = 44;}

                         
                        input.seek(index201_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA201_2 = input.LA(1);

                         
                        int index201_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA201_3 = input.LA(1);

                         
                        int index201_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA201_4 = input.LA(1);

                         
                        int index201_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA201_5 = input.LA(1);

                         
                        int index201_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA201_6 = input.LA(1);

                         
                        int index201_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA201_7 = input.LA(1);

                         
                        int index201_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA201_8 = input.LA(1);

                         
                        int index201_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA201_9 = input.LA(1);

                         
                        int index201_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA201_10 = input.LA(1);

                         
                        int index201_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA201_11 = input.LA(1);

                         
                        int index201_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA201_12 = input.LA(1);

                         
                        int index201_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA201_13 = input.LA(1);

                         
                        int index201_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA201_14 = input.LA(1);

                         
                        int index201_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA201_15 = input.LA(1);

                         
                        int index201_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA201_16 = input.LA(1);

                         
                        int index201_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA201_17 = input.LA(1);

                         
                        int index201_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA201_18 = input.LA(1);

                         
                        int index201_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA201_19 = input.LA(1);

                         
                        int index201_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA201_20 = input.LA(1);

                         
                        int index201_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA201_21 = input.LA(1);

                         
                        int index201_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA201_22 = input.LA(1);

                         
                        int index201_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA201_23 = input.LA(1);

                         
                        int index201_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA201_24 = input.LA(1);

                         
                        int index201_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA201_25 = input.LA(1);

                         
                        int index201_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA201_26 = input.LA(1);

                         
                        int index201_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA201_27 = input.LA(1);

                         
                        int index201_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA201_28 = input.LA(1);

                         
                        int index201_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA201_29 = input.LA(1);

                         
                        int index201_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA201_30 = input.LA(1);

                         
                        int index201_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA201_31 = input.LA(1);

                         
                        int index201_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA201_32 = input.LA(1);

                         
                        int index201_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA201_33 = input.LA(1);

                         
                        int index201_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA201_34 = input.LA(1);

                         
                        int index201_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA201_35 = input.LA(1);

                         
                        int index201_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA201_36 = input.LA(1);

                         
                        int index201_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA201_37 = input.LA(1);

                         
                        int index201_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA201_38 = input.LA(1);

                         
                        int index201_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA201_39 = input.LA(1);

                         
                        int index201_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA201_40 = input.LA(1);

                         
                        int index201_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA201_41 = input.LA(1);

                         
                        int index201_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA201_42 = input.LA(1);

                         
                        int index201_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA201_43 = input.LA(1);

                         
                        int index201_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (!(((is_special_token(LA(1)))))) ) {s = 45;}

                        else if ( ((is_special_token(LA(1)))) ) {s = 44;}

                         
                        input.seek(index201_43);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA205_eotS =
        "\15\uffff";
    static final String DFA205_eofS =
        "\15\uffff";
    static final String DFA205_minS =
        "\1\143\1\uffff\1\140\6\uffff\1\140\3\uffff";
    static final String DFA205_maxS =
        "\1\u00ad\1\uffff\1\u00ad\6\uffff\1\u00b1\3\uffff";
    static final String DFA205_acceptS =
        "\1\uffff\1\1\1\uffff\1\4\1\6\1\7\1\10\1\11\1\12\1\uffff\1\5\1\3"+
        "\1\2";
    static final String DFA205_specialS =
        "\15\uffff}>";
    static final String[] DFA205_transitionS = {
            "\1\10\2\uffff\1\3\3\uffff\1\2\4\uffff\1\1\6\uffff\1\2\36\uffff"+
            "\1\2\1\1\1\4\13\uffff\1\6\10\uffff\1\5\1\7",
            "",
            "\1\12\2\uffff\1\12\5\uffff\1\12\20\uffff\1\11\1\uffff\2\12"+
            "\2\uffff\1\12\31\uffff\1\12\1\uffff\2\12\2\uffff\1\12\14\uffff"+
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\5\uffff\1\12\2\uffff\2\12\2\uffff\1\12\1\uffff\1\12\6"+
            "\uffff\1\12\6\uffff\2\12\22\uffff\1\12\3\uffff\3\12\13\uffff"+
            "\1\14\10\uffff\1\13\3\uffff\2\12",
            "",
            "",
            ""
    };

    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
    static final short[][] DFA205_transition;

    static {
        int numStates = DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }
        public String getDescription() {
            return "863:1: variable_name : ( num | name LSQUARE AT RSQUARE -> ^( ARRAY name AT ) | name LSQUARE TIMES RSQUARE -> ^( ARRAY name TIMES ) | BANG variable_name_for_bang -> ^( VAR_REF variable_name_for_bang ) | variable_name_no_digit | DOLLAR | TIMES | AT | QMARK | POUND );";
        }
    }
    static final String DFA210_eotS =
        "\14\uffff";
    static final String DFA210_eofS =
        "\14\uffff";
    static final String DFA210_minS =
        "\2\143\1\uffff\1\172\1\140\2\173\1\140\3\0\1\uffff";
    static final String DFA210_maxS =
        "\1\143\1\u00ad\1\uffff\1\u0080\1\u00b1\2\173\1\u00b2\3\0\1\uffff";
    static final String DFA210_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA210_specialS =
        "\7\uffff\1\2\1\3\1\0\1\1\1\uffff}>";
    static final String[] DFA210_transitionS = {
            "\1\1",
            "\1\2\2\uffff\1\2\3\uffff\1\3\4\uffff\1\2\6\uffff\1\3\36\uffff"+
            "\1\3\2\2\13\uffff\1\2\10\uffff\2\2",
            "",
            "\1\4\5\uffff\1\2",
            "\1\2\5\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\7\6\uffff"+
            "\1\2\6\uffff\2\2\22\uffff\1\2\3\uffff\3\2\13\uffff\1\5\10\uffff"+
            "\1\6\3\uffff\2\2",
            "\1\10",
            "\1\11",
            "\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\2\2\2\uffff"+
            "\1\13\1\uffff\2\2\10\uffff\1\12\3\2\33\uffff\1\2\1\uffff\1\2"+
            "\4\uffff\2\2\11\uffff\2\2\4\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA210_eot = DFA.unpackEncodedString(DFA210_eotS);
    static final short[] DFA210_eof = DFA.unpackEncodedString(DFA210_eofS);
    static final char[] DFA210_min = DFA.unpackEncodedStringToUnsignedChars(DFA210_minS);
    static final char[] DFA210_max = DFA.unpackEncodedStringToUnsignedChars(DFA210_maxS);
    static final short[] DFA210_accept = DFA.unpackEncodedString(DFA210_acceptS);
    static final short[] DFA210_special = DFA.unpackEncodedString(DFA210_specialS);
    static final short[][] DFA210_transition;

    static {
        int numStates = DFA210_transitionS.length;
        DFA210_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
        }
    }

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = DFA210_eot;
            this.eof = DFA210_eof;
            this.min = DFA210_min;
            this.max = DFA210_max;
            this.accept = DFA210_accept;
            this.special = DFA210_special;
            this.transition = DFA210_transition;
        }
        public String getDescription() {
            return "881:1: variable_size_ref : ( ( POUND name LSQUARE )=> POUND name LSQUARE array_size_index RSQUARE -> ^( POUND ^( name array_size_index ) ) | POUND variable_name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA210_9 = input.LA(1);

                         
                        int index210_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_java_libbash()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index210_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA210_10 = input.LA(1);

                         
                        int index210_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_java_libbash()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index210_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA210_7 = input.LA(1);

                         
                        int index210_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA210_7==BLANK||LA210_7==AMP||(LA210_7>=LOGICAND && LA210_7<=PIPE)||LA210_7==MINUS||(LA210_7>=LESS_THAN && LA210_7<=GREATER_THAN)||(LA210_7>=LSHIFT && LA210_7<=RSHIFT)||(LA210_7>=EQUALS && LA210_7<=DQUOTE)||LA210_7==SLASH||LA210_7==PCT||(LA210_7>=CARET && LA210_7<=COMMA)||(LA210_7>=TIMES && LA210_7<=QMARK)||LA210_7==EXP) ) {s = 2;}

                        else if ( (LA210_7==RSQUARE) ) {s = 10;}

                        else if ( (LA210_7==DIGIT) && (synpred70_java_libbash())) {s = 11;}

                         
                        input.seek(index210_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA210_8 = input.LA(1);

                         
                        int index210_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_java_libbash()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index210_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 210, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\55\uffff";
    static final String DFA220_eofS =
        "\55\uffff";
    static final String DFA220_minS =
        "\1\140\1\0\53\uffff";
    static final String DFA220_maxS =
        "\1\u00b1\1\0\53\uffff";
    static final String DFA220_acceptS =
        "\2\uffff\1\2\52\1";
    static final String DFA220_specialS =
        "\1\0\1\1\53\uffff}>";
    static final String[] DFA220_transitionS = {
            "\1\2\2\uffff\1\25\2\uffff\1\53\1\uffff\1\54\1\15\1\6\4\uffff"+
            "\1\5\6\uffff\1\6\1\26\1\27\1\30\1\22\1\23\1\11\1\14\1\3\1\52"+
            "\1\2\4\54\2\uffff\12\54\1\21\1\7\1\40\1\37\1\6\1\5\1\47\1\4"+
            "\1\uffff\1\46\1\10\1\12\1\13\1\16\1\17\1\20\1\24\1\1\1\31\1"+
            "\32\1\33\1\34\1\35\1\36\1\41\1\42\1\43\1\44\1\45\2\uffff\1\50"+
            "\1\51",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "()* loopback of 903:4: ( (~ COMMA )=> string_expr_part )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_0 = input.LA(1);

                         
                        int index220_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA220_0==COMMA) ) {s = 1;}

                        else if ( (LA220_0==BLANK||LA220_0==RBRACE) ) {s = 2;}

                        else if ( (LA220_0==DQUOTE) && (synpred71_java_libbash())) {s = 3;}

                        else if ( (LA220_0==SINGLE_QUOTED_STRING_TOKEN) && (synpred71_java_libbash())) {s = 4;}

                        else if ( (LA220_0==DIGIT||LA220_0==NUMBER) && (synpred71_java_libbash())) {s = 5;}

                        else if ( (LA220_0==LETTER||LA220_0==NAME||LA220_0==UNDERSCORE) && (synpred71_java_libbash())) {s = 6;}

                        else if ( (LA220_0==ESC) && (synpred71_java_libbash())) {s = 7;}

                        else if ( (LA220_0==OTHER) && (synpred71_java_libbash())) {s = 8;}

                        else if ( (LA220_0==EQUALS) && (synpred71_java_libbash())) {s = 9;}

                        else if ( (LA220_0==PCT) && (synpred71_java_libbash())) {s = 10;}

                        else if ( (LA220_0==PCTPCT) && (synpred71_java_libbash())) {s = 11;}

                        else if ( (LA220_0==PLUS) && (synpred71_java_libbash())) {s = 12;}

                        else if ( (LA220_0==MINUS) && (synpred71_java_libbash())) {s = 13;}

                        else if ( (LA220_0==DOT) && (synpred71_java_libbash())) {s = 14;}

                        else if ( (LA220_0==DOTDOT) && (synpred71_java_libbash())) {s = 15;}

                        else if ( (LA220_0==COLON) && (synpred71_java_libbash())) {s = 16;}

                        else if ( (LA220_0==TILDE) && (synpred71_java_libbash())) {s = 17;}

                        else if ( (LA220_0==LSQUARE) && (synpred71_java_libbash())) {s = 18;}

                        else if ( (LA220_0==RSQUARE) && (synpred71_java_libbash())) {s = 19;}

                        else if ( (LA220_0==CARET) && (synpred71_java_libbash())) {s = 20;}

                        else if ( (LA220_0==POUND) && (synpred71_java_libbash())) {s = 21;}

                        else if ( (LA220_0==EXPORT) && (synpred71_java_libbash())) {s = 22;}

                        else if ( (LA220_0==LOCAL) && (synpred71_java_libbash())) {s = 23;}

                        else if ( (LA220_0==DECLARE) && (synpred71_java_libbash())) {s = 24;}

                        else if ( (LA220_0==AT) && (synpred71_java_libbash())) {s = 25;}

                        else if ( (LA220_0==ESC_RPAREN) && (synpred71_java_libbash())) {s = 26;}

                        else if ( (LA220_0==ESC_LPAREN) && (synpred71_java_libbash())) {s = 27;}

                        else if ( (LA220_0==ESC_RSQUARE) && (synpred71_java_libbash())) {s = 28;}

                        else if ( (LA220_0==ESC_LSQUARE) && (synpred71_java_libbash())) {s = 29;}

                        else if ( (LA220_0==ESC_DOLLAR) && (synpred71_java_libbash())) {s = 30;}

                        else if ( (LA220_0==ESC_GT) && (synpred71_java_libbash())) {s = 31;}

                        else if ( (LA220_0==ESC_LT) && (synpred71_java_libbash())) {s = 32;}

                        else if ( (LA220_0==ESC_TICK) && (synpred71_java_libbash())) {s = 33;}

                        else if ( (LA220_0==ESC_DQUOTE) && (synpred71_java_libbash())) {s = 34;}

                        else if ( (LA220_0==ESC_SQUOTE) && (synpred71_java_libbash())) {s = 35;}

                        else if ( (LA220_0==TIMES) && (synpred71_java_libbash())) {s = 36;}

                        else if ( (LA220_0==QMARK) && (synpred71_java_libbash())) {s = 37;}

                        else if ( (LA220_0==SLASH) && (synpred71_java_libbash())) {s = 38;}

                        else if ( (LA220_0==DOLLAR) && (synpred71_java_libbash())) {s = 39;}

                        else if ( (LA220_0==COMMAND_SUBSTITUTION_PAREN) && (synpred71_java_libbash())) {s = 40;}

                        else if ( (LA220_0==COMMAND_SUBSTITUTION_TICK) && (synpred71_java_libbash())) {s = 41;}

                        else if ( (LA220_0==LBRACE) && (synpred71_java_libbash())) {s = 42;}

                        else if ( (LA220_0==BANG) && (synpred71_java_libbash())) {s = 43;}

                        else if ( (LA220_0==TIME||(LA220_0>=FOR && LA220_0<=DONE)||(LA220_0>=SELECT && LA220_0<=ESAC)) && (synpred71_java_libbash())) {s = 44;}

                         
                        input.seek(index220_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_1 = input.LA(1);

                         
                        int index220_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_java_libbash()) ) {s = 44;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index220_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA222_eotS =
        "\15\uffff";
    static final String DFA222_eofS =
        "\15\uffff";
    static final String DFA222_minS =
        "\1\146\1\0\13\uffff";
    static final String DFA222_maxS =
        "\1\u00b1\1\0\13\uffff";
    static final String DFA222_acceptS =
        "\2\uffff\1\2\11\uffff\1\1";
    static final String DFA222_specialS =
        "\1\uffff\1\0\13\uffff}>";
    static final String[] DFA222_transitionS = {
            "\1\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\1\2\6\uffff"+
            "\2\2\22\uffff\1\2\3\uffff\2\2\1\1\30\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA222_eot = DFA.unpackEncodedString(DFA222_eotS);
    static final short[] DFA222_eof = DFA.unpackEncodedString(DFA222_eofS);
    static final char[] DFA222_min = DFA.unpackEncodedStringToUnsignedChars(DFA222_minS);
    static final char[] DFA222_max = DFA.unpackEncodedStringToUnsignedChars(DFA222_maxS);
    static final short[] DFA222_accept = DFA.unpackEncodedString(DFA222_acceptS);
    static final short[] DFA222_special = DFA.unpackEncodedString(DFA222_specialS);
    static final short[][] DFA222_transition;

    static {
        int numStates = DFA222_transitionS.length;
        DFA222_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA222_transition[i] = DFA.unpackEncodedString(DFA222_transitionS[i]);
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = DFA222_eot;
            this.eof = DFA222_eof;
            this.min = DFA222_min;
            this.max = DFA222_max;
            this.accept = DFA222_accept;
            this.special = DFA222_special;
            this.transition = DFA222_transition;
        }
        public String getDescription() {
            return "907:1: explicit_arithmetic : ( ( DOLLAR ( LLPAREN | LSQUARE ) )=> arithmetic_part | arithmetics );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_1 = input.LA(1);

                         
                        int index222_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_java_libbash()) ) {s = 12;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index222_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA235_eotS =
        "\16\uffff";
    static final String DFA235_eofS =
        "\16\uffff";
    static final String DFA235_minS =
        "\1\146\2\0\13\uffff";
    static final String DFA235_maxS =
        "\1\u00b1\2\0\13\uffff";
    static final String DFA235_acceptS =
        "\3\uffff\1\3\10\uffff\1\1\1\2";
    static final String DFA235_specialS =
        "\1\uffff\1\0\1\1\13\uffff}>";
    static final String[] DFA235_transitionS = {
            "\1\3\2\uffff\1\3\1\1\2\uffff\1\3\1\uffff\1\3\6\uffff\1\1\6\uffff"+
            "\2\3\22\uffff\1\3\3\uffff\1\1\1\3\1\2\30\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA235_eot = DFA.unpackEncodedString(DFA235_eotS);
    static final short[] DFA235_eof = DFA.unpackEncodedString(DFA235_eofS);
    static final char[] DFA235_min = DFA.unpackEncodedStringToUnsignedChars(DFA235_minS);
    static final char[] DFA235_max = DFA.unpackEncodedStringToUnsignedChars(DFA235_maxS);
    static final short[] DFA235_accept = DFA.unpackEncodedString(DFA235_acceptS);
    static final short[] DFA235_special = DFA.unpackEncodedString(DFA235_specialS);
    static final short[][] DFA235_transition;

    static {
        int numStates = DFA235_transitionS.length;
        DFA235_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA235_transition[i] = DFA.unpackEncodedString(DFA235_transitionS[i]);
        }
    }

    class DFA235 extends DFA {

        public DFA235(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 235;
            this.eot = DFA235_eot;
            this.eof = DFA235_eof;
            this.min = DFA235_min;
            this.max = DFA235_max;
            this.accept = DFA235_accept;
            this.special = DFA235_special;
            this.transition = DFA235_transition;
        }
        public String getDescription() {
            return "924:1: arithmetic : ( ( variable_name_no_digit ( BLANK )? arithmetic_assignment_operator )=> variable_name_no_digit ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | ( arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator )=> arithmetic_variable_reference ( BLANK )? arithmetic_assignment_operator ( BLANK )? logicor | cnd= logicor ( QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) | -> $cnd) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA235_1 = input.LA(1);

                         
                        int index235_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_java_libbash()) ) {s = 12;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index235_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA235_2 = input.LA(1);

                         
                        int index235_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_java_libbash()) ) {s = 13;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index235_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 235, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA236_eotS =
        "\14\uffff";
    static final String DFA236_eofS =
        "\14\uffff";
    static final String DFA236_minS =
        "\1\142\13\uffff";
    static final String DFA236_maxS =
        "\1\u00ac\13\uffff";
    static final String DFA236_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String DFA236_specialS =
        "\1\0\13\uffff}>";
    static final String[] DFA236_transitionS = {
            "\1\11\4\uffff\1\13\1\uffff\1\6\7\uffff\1\7\1\10\11\uffff\1\1"+
            "\1\5\34\uffff\1\3\1\uffff\1\4\4\uffff\1\12\12\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA236_eot = DFA.unpackEncodedString(DFA236_eotS);
    static final short[] DFA236_eof = DFA.unpackEncodedString(DFA236_eofS);
    static final char[] DFA236_min = DFA.unpackEncodedStringToUnsignedChars(DFA236_minS);
    static final char[] DFA236_max = DFA.unpackEncodedStringToUnsignedChars(DFA236_maxS);
    static final short[] DFA236_accept = DFA.unpackEncodedString(DFA236_acceptS);
    static final short[] DFA236_special = DFA.unpackEncodedString(DFA236_specialS);
    static final short[][] DFA236_transition;

    static {
        int numStates = DFA236_transitionS.length;
        DFA236_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA236_transition[i] = DFA.unpackEncodedString(DFA236_transitionS[i]);
        }
    }

    class DFA236 extends DFA {

        public DFA236(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 236;
            this.eot = DFA236_eot;
            this.eof = DFA236_eof;
            this.min = DFA236_min;
            this.max = DFA236_max;
            this.accept = DFA236_accept;
            this.special = DFA236_special;
            this.transition = DFA236_transition;
        }
        public String getDescription() {
            return "935:1: arithmetic_assignment_operator : ({...}? => EQUALS | TIMES EQUALS -> MUL_ASSIGN | SLASH EQUALS -> DIVIDE_ASSIGN | PCT EQUALS -> MOD_ASSIGN | PLUS EQUALS -> PLUS_ASSIGN | MINUS EQUALS -> MINUS_ASSIGN | LSHIFT EQUALS -> LSHIFT_ASSIGN | RSHIFT EQUALS -> RSHIFT_ASSIGN | AMP EQUALS -> AND_ASSIGN | CARET EQUALS -> XOR_ASSIGN | PIPE EQUALS -> OR_ASSIGN );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA236_0 = input.LA(1);

                         
                        int index236_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA236_0==EQUALS) && ((LA(1) == EQUALS && LA(2) != EQUALS))) {s = 1;}

                        else if ( (LA236_0==TIMES) ) {s = 2;}

                        else if ( (LA236_0==SLASH) ) {s = 3;}

                        else if ( (LA236_0==PCT) ) {s = 4;}

                        else if ( (LA236_0==PLUS) ) {s = 5;}

                        else if ( (LA236_0==MINUS) ) {s = 6;}

                        else if ( (LA236_0==LSHIFT) ) {s = 7;}

                        else if ( (LA236_0==RSHIFT) ) {s = 8;}

                        else if ( (LA236_0==AMP) ) {s = 9;}

                        else if ( (LA236_0==CARET) ) {s = 10;}

                        else if ( (LA236_0==PIPE) ) {s = 11;}

                         
                        input.seek(index236_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 236, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA243_eotS =
        "\37\uffff";
    static final String DFA243_eofS =
        "\1\4\36\uffff";
    static final String DFA243_minS =
        "\1\137\3\0\33\uffff";
    static final String DFA243_maxS =
        "\1\u00b2\3\0\33\uffff";
    static final String DFA243_acceptS =
        "\4\uffff\1\3\30\uffff\1\1\1\2";
    static final String DFA243_specialS =
        "\1\uffff\1\0\1\1\1\2\33\uffff}>";
    static final String[] DFA243_transitionS = {
            "\1\4\1\1\2\4\1\uffff\4\4\1\uffff\1\3\1\uffff\2\4\1\uffff\1\4"+
            "\2\uffff\2\4\10\uffff\2\4\1\2\2\uffff\1\4\5\uffff\1\4\23\uffff"+
            "\1\4\1\uffff\1\4\3\uffff\3\4\11\uffff\2\4\4\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA243_eot = DFA.unpackEncodedString(DFA243_eotS);
    static final short[] DFA243_eof = DFA.unpackEncodedString(DFA243_eofS);
    static final char[] DFA243_min = DFA.unpackEncodedStringToUnsignedChars(DFA243_minS);
    static final char[] DFA243_max = DFA.unpackEncodedStringToUnsignedChars(DFA243_maxS);
    static final short[] DFA243_accept = DFA.unpackEncodedString(DFA243_acceptS);
    static final short[] DFA243_special = DFA.unpackEncodedString(DFA243_specialS);
    static final short[][] DFA243_transition;

    static {
        int numStates = DFA243_transitionS.length;
        DFA243_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA243_transition[i] = DFA.unpackEncodedString(DFA243_transitionS[i]);
        }
    }

    class DFA243 extends DFA {

        public DFA243(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 243;
            this.eot = DFA243_eot;
            this.eof = DFA243_eof;
            this.min = DFA243_min;
            this.max = DFA243_max;
            this.accept = DFA243_accept;
            this.special = DFA243_special;
            this.transition = DFA243_transition;
        }
        public String getDescription() {
            return "961:3: ( ( PLUS PLUS )=> ( BLANK )? PLUS PLUS -> ^( POST_INCR pre_post_primary ) | ( MINUS MINUS )=> ( BLANK )? MINUS MINUS -> ^( POST_DECR pre_post_primary ) | -> pre_post_primary )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA243_1 = input.LA(1);

                         
                        int index243_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_java_libbash()) ) {s = 29;}

                        else if ( (synpred77_java_libbash()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index243_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA243_2 = input.LA(1);

                         
                        int index243_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_java_libbash()) ) {s = 29;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index243_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA243_3 = input.LA(1);

                         
                        int index243_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_java_libbash()) ) {s = 30;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index243_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 243, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA252_eotS =
        "\15\uffff";
    static final String DFA252_eofS =
        "\15\uffff";
    static final String DFA252_minS =
        "\1\146\7\uffff\2\0\3\uffff";
    static final String DFA252_maxS =
        "\1\u00b1\7\uffff\2\0\3\uffff";
    static final String DFA252_acceptS =
        "\1\uffff\1\1\10\uffff\2\3\1\2";
    static final String DFA252_specialS =
        "\1\0\7\uffff\1\1\1\2\3\uffff}>";
    static final String[] DFA252_transitionS = {
            "\1\13\2\uffff\1\11\1\1\2\uffff\1\1\1\uffff\1\1\6\uffff\1\1\6"+
            "\uffff\1\10\1\1\22\uffff\1\12\3\uffff\3\1\30\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
    static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
    static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
    static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
    static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
    static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
    static final short[][] DFA252_transition;

    static {
        int numStates = DFA252_transitionS.length;
        DFA252_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
        }
    }

    class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = DFA252_eot;
            this.eof = DFA252_eof;
            this.min = DFA252_min;
            this.max = DFA252_max;
            this.accept = DFA252_accept;
            this.special = DFA252_special;
            this.transition = DFA252_transition;
        }
        public String getDescription() {
            return "974:1: unary : ( post_inc_dec | ( PLUS PLUS | MINUS MINUS )=> pre_inc_dec | ( PLUS | MINUS | TILDE | BANG )=> unary_with_operator );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA252_0 = input.LA(1);

                         
                        int index252_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA252_0==LETTER||LA252_0==LPAREN||LA252_0==DIGIT||LA252_0==NAME||LA252_0==DQUOTE||(LA252_0>=UNDERSCORE && LA252_0<=DOLLAR)||(LA252_0>=COMMAND_SUBSTITUTION_PAREN && LA252_0<=COMMAND_SUBSTITUTION_TICK)) ) {s = 1;}

                        else if ( (LA252_0==PLUS) ) {s = 8;}

                        else if ( (LA252_0==MINUS) ) {s = 9;}

                        else if ( (LA252_0==TILDE) && (synpred79_java_libbash())) {s = 10;}

                        else if ( (LA252_0==BANG) && (synpred79_java_libbash())) {s = 11;}

                         
                        input.seek(index252_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA252_8 = input.LA(1);

                         
                        int index252_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_java_libbash()) ) {s = 12;}

                        else if ( (synpred79_java_libbash()) ) {s = 11;}

                         
                        input.seek(index252_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA252_9 = input.LA(1);

                         
                        int index252_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred78_java_libbash()) ) {s = 12;}

                        else if ( (synpred79_java_libbash()) ) {s = 11;}

                         
                        input.seek(index252_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 252, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_first_line_comment_in_start461 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_EOL_in_start465 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BLANK_in_start468 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_start471 = new BitSet(new long[]{0x0000000000000000L,0x0000000780000000L});
    public static final BitSet FOLLOW_BLANK_in_start473 = new BitSet(new long[]{0x0000000000000000L,0x0000000680000000L});
    public static final BitSet FOLLOW_SEMIC_in_start477 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_AMP_in_start479 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOL_in_start481 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_start485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_first_line_comment498 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_first_line_comment500 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_EOL_in_first_line_comment506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_level_2_in_command_list515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pipeline_in_list_level_1531 = new BitSet(new long[]{0x0000000000000002L,0x0000003100000000L});
    public static final BitSet FOLLOW_BLANK_in_list_level_1534 = new BitSet(new long[]{0x0000000000000000L,0x0000003000000000L});
    public static final BitSet FOLLOW_LOGICAND_in_list_level_1538 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_LOGICOR_in_list_level_1541 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BLANK_in_list_level_1545 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_EOL_in_list_level_1548 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_pipeline_in_list_level_1553 = new BitSet(new long[]{0x0000000000000002L,0x0000003100000000L});
    public static final BitSet FOLLOW_list_level_1_in_list_level_2563 = new BitSet(new long[]{0x0000000000000002L,0x0000000780000000L});
    public static final BitSet FOLLOW_BLANK_in_list_level_2566 = new BitSet(new long[]{0x0000000000000000L,0x0000000780000000L});
    public static final BitSet FOLLOW_command_separator_in_list_level_2570 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BLANK_in_list_level_2573 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EOL_in_list_level_2577 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BLANK_in_list_level_2582 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_list_level_1_in_list_level_2586 = new BitSet(new long[]{0x0000000000000002L,0x0000000780000000L});
    public static final BitSet FOLLOW_SEMIC_in_command_separator596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_command_separator602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOL_in_command_separator608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_time_in_pipeline617 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BANG_in_pipeline628 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_pipeline630 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_in_pipeline636 = new BitSet(new long[]{0x0000000000000002L,0x0000008100000000L});
    public static final BitSet FOLLOW_BLANK_in_pipeline640 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_PIPE_in_pipeline644 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_wspace_in_pipeline647 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_in_pipeline651 = new BitSet(new long[]{0x0000000000000002L,0x0000008100000000L});
    public static final BitSet FOLLOW_TIME_in_time662 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_time665 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_time_posix_in_time675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_time_posix685 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_time_posix688 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_time_posix690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redirection_atom_in_redirection700 = new BitSet(new long[]{0x0000000000000002L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_redirection_operator_in_redirection_atom709 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_redirection_destination_in_redirection_atom711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_redirection_atom726 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_process_substitution_in_redirection_atom729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_here_string_in_redirection_atom734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_process_substitution746 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_process_substitution750 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_process_substitution752 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_BLANK_in_process_substitution754 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_process_substitution757 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_BLANK_in_process_substitution759 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_RPAREN_in_process_substitution762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_redirection_destination794 = new BitSet(new long[]{0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_file_descriptor_in_redirection_destination798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_redirection_destination803 = new BitSet(new long[]{0x0000000000000000L,0x0000180000000000L});
    public static final BitSet FOLLOW_process_substitution_in_redirection_destination806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_redirection_destination811 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_redirection_destination815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_file_descriptor823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_file_descriptor836 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_file_descriptor838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_here_string855 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_HERE_STRING_OP_in_here_string859 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_here_string862 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_here_string872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_here_document891 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_here_document_operator_in_here_document900 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFC2E7FF7FFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_BLANK_in_here_document902 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFC2E7FF7FFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_here_document_begin_in_here_document905 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_redirection_in_here_document909 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EOL_in_here_document912 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_here_document_content_in_here_document914 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_here_document_end_in_here_document917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSHIFT_in_here_document_operator945 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_here_document_operator960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_here_document_begin995 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFC2E7FE7FFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_BLANK_in_redirection_operator1069 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_redirection_operator1072 = new BitSet(new long[]{0x0000000000000000L,0x003C180100000000L});
    public static final BitSet FOLLOW_redirection_operator_in_redirection_operator1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_redirection_operator1079 = new BitSet(new long[]{0x0000000000000000L,0x003C180000000000L});
    public static final BitSet FOLLOW_AMP_LESS_THAN_in_redirection_operator1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_redirection_operator1101 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AMP_in_redirection_operator1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_redirection_operator1115 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AMP_in_redirection_operator1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_redirection_operator1129 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_redirection_operator1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSHIFT_in_redirection_operator1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_GREATER_THAN_in_redirection_operator1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_RSHIFT_in_redirection_operator1167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_redirection_operator1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_redirection_operator1191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_atom_in_command1208 = new BitSet(new long[]{0x0000000000000002L,0xFFFFBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_redirection_in_command1217 = new BitSet(new long[]{0x0000000000000002L,0x0002000100000000L});
    public static final BitSet FOLLOW_here_document_in_command1219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_here_document_in_command1240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_command_in_command_atom1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_command_atom1293 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1295 = new BitSet(new long[]{0x0000000000000000L,0xFFC0864800000000L,0x00033FFFFDFE0000L});
    public static final BitSet FOLLOW_string_expr_no_reserved_word_in_command_atom1297 = new BitSet(new long[]{0x0000000000000000L,0x0000200180000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1301 = new BitSet(new long[]{0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_parens_in_command_atom1304 = new BitSet(new long[]{0x0000000000000000L,0x8440200180000000L,0x000000000000E1A2L});
    public static final BitSet FOLLOW_wspace_in_command_atom1306 = new BitSet(new long[]{0x0000000000000000L,0x8440200000000000L,0x000000000000E1A2L});
    public static final BitSet FOLLOW_wspace_in_command_atom1310 = new BitSet(new long[]{0x0000000000000000L,0x8440200000000000L,0x000000000000E1A2L});
    public static final BitSet FOLLOW_compound_command_in_command_atom1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_definitions_in_command_atom1347 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1366 = new BitSet(new long[]{0x0000000000000000L,0xFFC0864800000000L,0x00033FFFFDFE0000L});
    public static final BitSet FOLLOW_bash_command_in_command_atom1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPORT_in_command_atom1404 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1406 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_builtin_variable_definition_item_in_command_atom1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_in_command_atom1436 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1438 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_builtin_variable_definition_item_in_command_atom1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_command_atom1468 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1470 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_builtin_variable_definition_item_in_command_atom1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_name_in_command_atom1494 = new BitSet(new long[]{0x0000000000000002L,0x0000200100000000L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1512 = new BitSet(new long[]{0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_parens_in_command_atom1515 = new BitSet(new long[]{0x0000000000000000L,0x8440200180000000L,0x000000000000E1A2L});
    public static final BitSet FOLLOW_wspace_in_command_atom1517 = new BitSet(new long[]{0x0000000000000000L,0x8440200000000000L,0x000000000000E1A2L});
    public static final BitSet FOLLOW_compound_command_in_command_atom1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_command_atom1552 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9FL});
    public static final BitSet FOLLOW_bash_command_arguments_in_command_atom1554 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_string_expr_no_reserved_word_in_command_name1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_redirection_atom_in_command_name1590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_definition_atom_in_variable_definitions1609 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_variable_definitions1630 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_variable_definition_atom_in_variable_definitions1633 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_name_in_variable_definition_atom1645 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_variable_definition_atom1647 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_variable_definition_atom1649 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_variable_definition_atom1652 = new BitSet(new long[]{0x0000000000000000L,0x0800000100000000L});
    public static final BitSet FOLLOW_BLANK_in_variable_definition_atom1654 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_variable_definition_atom1657 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_variable_definition_atom1659 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_variable_definition_atom1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_definition_atom1685 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_variable_definition_atom1687 = new BitSet(new long[]{0x0000000000000002L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_value_in_variable_definition_atom1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_definition_atom1706 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_variable_definition_atom1708 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_variable_definition_atom1710 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_array_value_in_variable_definition_atom1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_definition_atom1727 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_variable_definition_atom1729 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_variable_definition_atom1731 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_part_in_variable_definition_atom1733 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_value1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_value_in_value1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_array_value1784 = new BitSet(new long[]{0x0000000000000000L,0xFFC0C74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_wspace_in_array_value1786 = new BitSet(new long[]{0x0000000000000000L,0xFFC0C74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_RPAREN_in_array_value1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_atom_in_array_value1811 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_array_value1822 = new BitSet(new long[]{0x0000000000000000L,0xFFC0C74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_array_atom_in_array_value1824 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_LSQUARE_in_array_atom1863 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_array_atom1866 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_array_atom1870 = new BitSet(new long[]{0x0000000000000000L,0x0800000100000000L});
    public static final BitSet FOLLOW_BLANK_in_array_atom1872 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_array_atom1876 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_array_atom1879 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_array_atom1882 = new BitSet(new long[]{0x0000000000000002L,0x0000400180000000L});
    public static final BitSet FOLLOW_string_expr_in_array_atom1889 = new BitSet(new long[]{0x0000000000000002L,0x0000400180000000L});
    public static final BitSet FOLLOW_wspace_in_array_atom1910 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_array_atom1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_array_atom1929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_builtin_variable_definition_item1970 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_builtin_variable_definition_item1984 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_DQUOTE_in_builtin_variable_definition_item1998 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_expansion_base_in_builtin_variable_definition_item2017 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_SEMIC_in_builtin_variable_definition_item2028 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_EOL_in_builtin_variable_definition_item2039 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_builtin_variable_definition_atom_in_builtin_variable_definitions2053 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_variable_definitions2057 = new BitSet(new long[]{0x0000000000000000L,0x0040060000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_builtin_variable_definition_atom_in_builtin_variable_definitions2059 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_variable_definition_atom_in_builtin_variable_definition_atom2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_builtin_variable_definition_atom2107 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_builtin_variable_definition_atom2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_builtin_variable_definition_atom2116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_no_reserved_word_in_bash_command2143 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_bash_command2154 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9FL});
    public static final BitSet FOLLOW_bash_command_arguments_in_bash_command2157 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_bash_command_argument_atom_in_bash_command_arguments2168 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9FL});
    public static final BitSet FOLLOW_brace_expansion_in_bash_command_argument_atom2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_bash_command_argument_atom2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACE_in_bash_command_argument_atom2221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_part_in_bash_command_argument_atom2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parens2235 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_BLANK_in_parens2237 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parens2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_expr_in_compound_command2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expr_in_compound_command2254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_expr_in_compound_command2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_expr_in_compound_command2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_until_expr_in_compound_command2269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expr_in_compound_command2274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subshell_in_compound_command2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_current_shell_in_compound_command2284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_expression_in_compound_command2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_compound_command2294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_semiel2303 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMIC_in_semiel2306 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_semiel2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_semiel2314 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_EOL_in_semiel2317 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_semiel2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_for_expr2329 = new BitSet(new long[]{0x0000000000000000L,0x0040040100000000L,0x0000000000200020L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2331 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200020L});
    public static final BitSet FOLLOW_name_in_for_expr2341 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_wspace_in_for_expr2352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IN_in_for_expr2354 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_for_each_value_in_for_expr2356 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2359 = new BitSet(new long[]{0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_SEMIC_in_for_expr2363 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_EOL_in_for_expr2365 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_wspace_in_for_expr2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_wspace_in_for_expr2377 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMIC_in_for_expr2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_wspace_in_for_expr2382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_wspace_in_for_expr2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_for_expr2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_for_expr2400 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_for_expr2402 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_for_expr2404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DONE_in_for_expr2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLPAREN_in_for_expr2426 = new BitSet(new long[]{0x0000000000000000L,0x6040A64380000000L,0x0003000000E20040L});
    public static final BitSet FOLLOW_EOL_in_for_expr2428 = new BitSet(new long[]{0x0000000000000000L,0x6040A64300000000L,0x0003000000E20040L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2437 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_for_expr2442 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2447 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SEMIC_in_for_expr2457 = new BitSet(new long[]{0x0000000000000000L,0x6040A64300000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2460 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_for_expr2465 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2467 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMIC_in_for_expr2474 = new BitSet(new long[]{0x0000000000000000L,0x6040E64180000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_DOUBLE_SEMIC_in_for_expr2476 = new BitSet(new long[]{0x0000000000000000L,0x6040E64180000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_for_expr2485 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_for_expr2490 = new BitSet(new long[]{0x0000000000000000L,0x0000400180000000L});
    public static final BitSet FOLLOW_wspace_in_for_expr2494 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_for_expr2497 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_for_expr2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_for_expr2501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_for_expr2503 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_for_expr2505 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_for_expr2507 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_for_expr2509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DONE_in_for_expr2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_for_each_value2568 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_for_each_value2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_select_expr2581 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_select_expr2583 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_name_in_select_expr2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_wspace_in_select_expr2588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IN_in_select_expr2590 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_select_expr2592 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_select_expr2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_select_expr2598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_select_expr2600 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_select_expr2602 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_select_expr2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_select_expr2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DONE_in_select_expr2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_expr2633 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_if_expr2635 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_if_expr2639 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_if_expr2641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_THEN_in_if_expr2643 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_if_expr2645 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_if_expr2649 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_if_expr2651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001C00L});
    public static final BitSet FOLLOW_elif_expr_in_if_expr2656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001C00L});
    public static final BitSet FOLLOW_ELSE_in_if_expr2663 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_if_expr2665 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_if_expr2669 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_if_expr2671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_FI_in_if_expr2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELIF_in_elif_expr2715 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_elif_expr2717 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_elif_expr2721 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_elif_expr2723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_THEN_in_elif_expr2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_elif_expr2727 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_elif_expr2731 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_elif_expr2733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_expr2757 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_wspace_in_while_expr2759 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_while_expr2764 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_while_expr2766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_while_expr2768 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_while_expr2770 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_while_expr2774 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_while_expr2776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DONE_in_while_expr2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_until_expr2801 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_wspace_in_until_expr2803 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_until_expr2808 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_until_expr2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DO_in_until_expr2812 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_until_expr2814 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_until_expr2818 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_until_expr2820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DONE_in_until_expr2822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_case_expr2846 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_case_expr2848 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_in_case_expr2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_case_expr2852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IN_in_case_expr2854 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_case_body_in_case_expr2856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wspace_in_case_body2896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ESAC_in_case_body2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_case_body2916 = new BitSet(new long[]{0x0000000000000002L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_wspace_in_case_statement2935 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_LPAREN_in_case_statement2939 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_case_statement2941 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_case_statement2946 = new BitSet(new long[]{0x0000000000000000L,0x0000408100000000L});
    public static final BitSet FOLLOW_BLANK_in_case_statement2949 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_PIPE_in_case_statement2952 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_case_statement2954 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_case_statement2957 = new BitSet(new long[]{0x0000000000000000L,0x0000408100000000L});
    public static final BitSet FOLLOW_BLANK_in_case_statement2961 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_case_statement2964 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_wspace_in_case_statement2969 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_case_statement2971 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_wspace_in_case_statement2982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOUBLE_SEMIC_in_case_statement2985 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_case_statement2996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ESAC_in_case_statement2998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wspace_in_case_statement3008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ESAC_in_case_statement3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subshell3044 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_wspace_in_subshell3046 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_subshell3049 = new BitSet(new long[]{0x0000000000000000L,0x0000400380000000L});
    public static final BitSet FOLLOW_BLANK_in_subshell3052 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SEMIC_in_subshell3055 = new BitSet(new long[]{0x0000000000000000L,0x0000400180000000L});
    public static final BitSet FOLLOW_wspace_in_subshell3059 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subshell3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_current_shell3079 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_current_shell3081 = new BitSet(new long[]{0x0000000000000000L,0xFFFDBF4980000000L,0x00033FFFFDFEE1A2L});
    public static final BitSet FOLLOW_command_list_in_current_shell3083 = new BitSet(new long[]{0x0000000000000000L,0x0000000380000000L});
    public static final BitSet FOLLOW_semiel_in_current_shell3085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACE_in_current_shell3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLPAREN_in_arithmetic_expression3104 = new BitSet(new long[]{0x0000000000000000L,0x6040A64180000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_wspace_in_arithmetic_expression3106 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_arithmetic_expression3109 = new BitSet(new long[]{0x0000000000000000L,0x0000400180000000L});
    public static final BitSet FOLLOW_wspace_in_arithmetic_expression3111 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arithmetic_expression3114 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arithmetic_expression3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expr_in_condition_comparison3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_condition_expr3149 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_condition_expr3151 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_condition_expr3153 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_keyword_condition_in_condition_expr3155 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_condition_expr3157 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_condition_expr3159 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_condition_expr3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_condition_expr3174 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_condition_expr3176 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_in_condition_expr3178 = new BitSet(new long[]{0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_wspace_in_condition_expr3180 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_condition_expr3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_condition_expr3202 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_wspace_in_condition_expr3204 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_in_condition_expr3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_condition_primary_in_keyword_condition_and3224 = new BitSet(new long[]{0x0000000000000002L,0x0000001180000000L});
    public static final BitSet FOLLOW_wspace_in_keyword_condition_and3228 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LOGICAND_in_keyword_condition_and3232 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_wspace_in_keyword_condition_and3235 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_keyword_condition_primary_in_keyword_condition_and3239 = new BitSet(new long[]{0x0000000000000002L,0x0000001180000000L});
    public static final BitSet FOLLOW_keyword_condition_and_in_keyword_condition3249 = new BitSet(new long[]{0x0000000000000002L,0x0000002180000000L});
    public static final BitSet FOLLOW_wspace_in_keyword_condition3253 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LOGICOR_in_keyword_condition3257 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_wspace_in_keyword_condition3260 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_keyword_condition_and_in_keyword_condition3264 = new BitSet(new long[]{0x0000000000000002L,0x0000002180000000L});
    public static final BitSet FOLLOW_BANG_in_keyword_negation_primary3274 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_negation_primary3276 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_keyword_condition_primary_in_keyword_negation_primary3278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_keyword_condition_primary3294 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_primary3297 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_keyword_condition_in_keyword_condition_primary3301 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_primary3303 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_keyword_condition_primary3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_negation_primary_in_keyword_condition_primary3319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_condition_unary_in_keyword_condition_primary3330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_condition_binary_in_keyword_condition_primary3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_keyword_condition_unary3343 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_unary3346 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_condition_part_in_keyword_condition_unary3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_part_in_keyword_condition_binary3357 = new BitSet(new long[]{0x0000000000000002L,0x0000180100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3376 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_keyword_condition_binary3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_TILDE_in_keyword_condition_binary3380 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3382 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_bash_pattern_part_in_keyword_condition_binary3384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyword_binary_string_operator_in_keyword_condition_binary3409 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_condition_part_in_keyword_condition_binary3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3436 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_BANG_in_keyword_condition_binary3439 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_keyword_condition_binary3441 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3444 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_match_in_keyword_condition_binary3446 = new BitSet(new long[]{0x0000000000000002L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3474 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_keyword_condition_binary3477 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_keyword_condition_binary3479 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_condition_binary3482 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_match_in_keyword_condition_binary3484 = new BitSet(new long[]{0x0000000000000002L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_DQUOTE_in_bash_pattern_part3538 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_preserved_tokens_in_bash_pattern_part3551 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_ESC_in_bash_pattern_part3565 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_bash_pattern_part3567 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_LPAREN_in_bash_pattern_part3573 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_LLPAREN_in_bash_pattern_part3581 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_RPAREN_in_bash_pattern_part3593 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_bash_pattern_part3601 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_non_dquote_in_preserved_tokens3632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_non_dquote3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3657 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_binary_operator_in_keyword_binary_string_operator3660 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3668 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_keyword_binary_string_operator3671 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3679 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LESS_THAN_in_keyword_binary_string_operator3683 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3692 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_GREATER_THAN_in_keyword_binary_string_operator3696 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_keyword_binary_string_operator3698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_condition_primary_in_builtin_condition_and3710 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_builtin_logic_and_in_builtin_condition_and3713 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_and3716 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_primary_in_builtin_condition_and3719 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_builtin_condition_and_in_builtin_condition3729 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_builtin_logic_or_in_builtin_condition3732 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition3735 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_and_in_builtin_condition3738 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BANG_in_builtin_negation_primary3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_negation_primary3750 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_primary_in_builtin_negation_primary3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_builtin_condition_primary3768 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_primary3771 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_builtin_condition_in_builtin_condition_primary3775 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_primary3777 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtin_condition_primary3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_negation_primary_in_builtin_condition_primary3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_condition_unary_in_builtin_condition_primary3804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtin_condition_binary_in_builtin_condition_primary3809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_builtin_condition_unary3817 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_unary3820 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_condition_part_in_builtin_condition_unary3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_part_in_builtin_condition_binary3831 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_binary3834 = new BitSet(new long[]{0x0000000000000000L,0x1000024000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_builtin_binary_string_operator_in_builtin_condition_binary3837 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_builtin_condition_binary3840 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_condition_part_in_builtin_condition_binary3843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_binary_operator_in_builtin_binary_string_operator3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_builtin_binary_string_operator3866 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_builtin_binary_string_operator3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_builtin_binary_string_operator3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_builtin_binary_string_operator3882 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_builtin_binary_string_operator3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_LT_in_builtin_binary_string_operator3893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_GT_in_builtin_binary_string_operator3898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_builtin_logic_and3912 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_builtin_logic_and3914 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_builtin_logic_and3916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_builtin_logic_or3935 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_builtin_logic_or3937 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_builtin_logic_or3939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_binary_operator3953 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_NAME_in_binary_operator3956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_operator3965 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_unary_operator3968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_in_condition_part3978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_name0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_num0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_part_in_string_expr4029 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_part_in_string_expr4031 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_quoted_string_in_string_expr_part4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_quoted_string_in_string_expr_part4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reserved_word_in_string_expr_part4058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_non_quoted_string_in_string_expr_no_reserved_word4083 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_part_in_string_expr_no_reserved_word4085 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_quoted_string_in_string_expr_no_reserved_word4105 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_string_expr_part_in_string_expr_no_reserved_word4107 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_set_in_reserved_word0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_part_in_non_quoted_string4170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_non_quoted_string4175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_substitution_in_non_quoted_string4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_expansion_in_non_quoted_string4185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_expansion_in_non_quoted_string4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_non_quoted_string4195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_non_quoted_string4200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_non_quoted_string4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_double_quoted_string_in_quoted_string4219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_quoted_string4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_double_quoted_string4241 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_expansion_base_in_double_quoted_string4251 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_DQUOTE_in_double_quoted_string4255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_expansion_base4302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_substitution_in_expansion_base4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_expansion_in_expansion_base4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_expansion_base4343 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DQUOTE_in_expansion_base4345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_expansion_base4362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_TICK_in_expansion_base4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_expansion_base4381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOLLAR_in_expansion_base4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_expansion_in_expansion_base4398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_expansion_base4411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_expansion_base4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expansion_atom_in_all_expansions4438 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_double_quoted_string_in_expansion_atom4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expansion_base_in_expansion_atom4467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ns_string_part_in_string_part4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_string_part4481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_in_ns_string_part4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_ns_string_part4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escaped_character_in_ns_string_part4494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OTHER_in_ns_string_part4498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_ns_string_part4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PCT_in_ns_string_part4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PCTPCT_in_ns_string_part4504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_ns_string_part4506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_ns_string_part4508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_ns_string_part4510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTDOT_in_ns_string_part4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_ns_string_part4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_ns_string_part4518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_ns_string_part4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSQUARE_in_ns_string_part4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_ns_string_part4524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_ns_string_part4526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_ns_string_part4528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPORT_in_ns_string_part4530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_in_ns_string_part4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_ns_string_part4534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_ns_string_part4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_RPAREN_in_ns_string_part4541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_LPAREN_in_ns_string_part4543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_RSQUARE_in_ns_string_part4545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_LSQUARE_in_ns_string_part4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_DOLLAR_in_ns_string_part4549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_GT_in_ns_string_part4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_LT_in_ns_string_part4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_TICK_in_ns_string_part4555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_DQUOTE_in_ns_string_part4557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_SQUOTE_in_ns_string_part4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_ns_string_part4564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_ns_string_part4566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_escaped_character4575 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4605 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4624 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4626 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_escaped_character4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LETTER_in_escaped_character4635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_ALPHANUM_in_escaped_character4637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_ALPHANUM_in_escaped_character4639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_extended_pattern_match4668 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4670 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4672 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4675 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4677 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_extended_pattern_match4706 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4708 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4710 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4713 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4715 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_extended_pattern_match4744 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4746 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4748 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4751 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4753 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_extended_pattern_match4782 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4784 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4786 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4789 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4791 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_extended_pattern_match4820 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4822 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4824 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4827 = new BitSet(new long[]{0x0000000000000000L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_extended_pattern_in_extended_pattern_match4829 = new BitSet(new long[]{0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_match_in_extended_pattern_match4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_class_match_in_extended_pattern_match4867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_part_in_extended_pattern_match4872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extended_pattern_match_in_extended_pattern4893 = new BitSet(new long[]{0x0000000000000002L,0xFFC0A74980000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_LSQUARE_in_bracket_pattern_match4913 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_bracket_pattern_match_operator_in_bracket_pattern_match4916 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_bracket_pattern_in_bracket_pattern_match4919 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match4921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_bracket_pattern_match4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_bracket_pattern_match4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_bracket_pattern_match_operator4954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_bracket_pattern_match_operator4969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_class_match_in_bracket_pattern_part4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_part_in_bracket_pattern_part5000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_part_in_bracket_pattern5017 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match5028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_pattern_class_match5030 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_NAME_in_pattern_class_match5032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_pattern_class_match5034 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match5036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match5049 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_pattern_class_match5051 = new BitSet(new long[]{0x0000000000000000L,0xEC38FECE00000000L,0x0000B00D5E800001L});
    public static final BitSet FOLLOW_pattern_char_in_pattern_class_match5053 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_pattern_class_match5055 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match5057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match5070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_DOT_in_pattern_class_match5072 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_NAME_in_pattern_class_match5074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_DOT_in_pattern_class_match5076 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match5078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pattern_char0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5177 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_LBRACE_in_variable_reference5179 = new BitSet(new long[]{0x0000000000000000L,0x0040844800000000L,0x0000300800E00000L});
    public static final BitSet FOLLOW_parameter_expansion_in_variable_reference5181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACE_in_variable_reference5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5196 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_name_in_variable_reference5198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5211 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_num_in_variable_reference5213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_TIMES_in_variable_reference5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_AT_in_variable_reference5243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5256 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_POUND_in_variable_reference5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QMARK_in_variable_reference5273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5286 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_variable_reference5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_reference5316 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_BANG_in_variable_reference5318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_parameter_expansion5335 = new BitSet(new long[]{0x0000000000000002L,0x3000020900000000L,0x0000200134000000L});
    public static final BitSet FOLLOW_parameter_value_operator_in_parameter_expansion5350 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_parameter_expansion_value_in_parameter_expansion5352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_expansion5373 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000100E20000L});
    public static final BitSet FOLLOW_BLANK_in_parameter_expansion5375 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000100E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_parameter_expansion5391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_parameter_expansion5394 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_parameter_expansion5396 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_parameter_expansion5401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_expansion5446 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_parameter_expansion5448 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_parameter_expansion5453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_delete_operator_in_parameter_expansion5497 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_parameter_delete_pattern_in_parameter_expansion5499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_replace_operator_in_parameter_expansion5520 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_parameter_replace_pattern_in_parameter_expansion5522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SLASH_in_parameter_expansion5525 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_parameter_expansion_value_in_parameter_expansion5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_parameter_expansion5553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_parameter_expansion5568 = new BitSet(new long[]{0x0000000000000000L,0x0040840800000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_variable_name_for_bang_in_parameter_expansion5570 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000100800000000L});
    public static final BitSet FOLLOW_TIMES_in_parameter_expansion5581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_parameter_expansion5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_parameter_expansion5617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100800000000L});
    public static final BitSet FOLLOW_TIMES_in_parameter_expansion5622 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AT_in_parameter_expansion5626 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_parameter_expansion5629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_size_ref_in_parameter_expansion5655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_parameter_delete_operator5671 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_POUND_in_parameter_delete_operator5673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_parameter_delete_operator5682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PCT_in_parameter_delete_operator5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PCTPCT_in_parameter_delete_operator5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_value_operator5712 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_parameter_value_operator5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_value_operator5723 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_parameter_value_operator5725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_value_operator5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QMARK_in_parameter_value_operator5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_parameter_value_operator5745 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_parameter_value_operator5747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_parameter_value_operator5756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_parameter_value_operator5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_parameter_value_operator5774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_parameter_value_operator5783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_pattern_part_in_parameter_replace_pattern5820 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_parameter_pattern_part_in_parameter_delete_pattern5839 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_extended_pattern_match_in_parameter_pattern_part5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_expansion_value_atom_in_parameter_expansion_value5877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_parameter_replace_operator5955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SLASH_in_parameter_replace_operator5957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_parameter_replace_operator5974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PCT_in_parameter_replace_operator5976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_parameter_replace_operator5993 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_POUND_in_parameter_replace_operator5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_parameter_replace_operator6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_in_variable_name6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_name6022 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_variable_name6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_AT_in_variable_name6026 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_variable_name6028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_name6043 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_variable_name6045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_TIMES_in_variable_name6047 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_variable_name6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_variable_name6064 = new BitSet(new long[]{0x0000000000000000L,0x0040840800000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_variable_name_for_bang_in_variable_name6066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_no_digit_in_variable_name6079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable_name6084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_variable_name6089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_variable_name6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_variable_name6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_variable_name6104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_name_no_digit6113 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_variable_name_no_digit6115 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_variable_name_no_digit6117 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_explicit_arithmetic_in_variable_name_no_digit6120 = new BitSet(new long[]{0x0000000000000000L,0x0800000100000000L});
    public static final BitSet FOLLOW_BLANK_in_variable_name_no_digit6122 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_variable_name_no_digit6125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_name_no_digit6138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_in_variable_name_for_bang6147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_variable_name_for_bang6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_variable_name_for_bang6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_variable_size_ref6169 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_name_in_variable_size_ref6171 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_variable_size_ref6173 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L,0x0000100800000000L});
    public static final BitSet FOLLOW_array_size_index_in_variable_size_ref6175 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_variable_size_ref6177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_variable_size_ref6194 = new BitSet(new long[]{0x0000000000000000L,0x0040844800000000L,0x0000300800E00000L});
    public static final BitSet FOLLOW_variable_name_in_variable_size_ref6197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_array_size_index6205 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_AT_in_array_size_index6212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_array_size_index6214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_wspace6228 = new BitSet(new long[]{0x0000000000000002L,0x0000000180000000L});
    public static final BitSet FOLLOW_COMMAND_SUBSTITUTION_PAREN_in_command_substitution6242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMAND_SUBSTITUTION_TICK_in_command_substitution6255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_brace_expansion6272 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_BLANK_in_brace_expansion6274 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_brace_expansion_inside_in_brace_expansion6277 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_BLANK_in_brace_expansion6279 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_RBRACE_in_brace_expansion6282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commasep_in_brace_expansion_inside6298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_brace_expansion_inside6300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_range6308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOTDOT_in_range6310 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_range6313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LETTER_in_range6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DOTDOT_in_range6320 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_range6323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_part_in_brace_expansion_part6339 = new BitSet(new long[]{0x0000000000000002L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_brace_expansion_part_in_commasep6358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COMMA_in_commasep6361 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9EL});
    public static final BitSet FOLLOW_brace_expansion_part_in_commasep6364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_arithmetic_part_in_explicit_arithmetic6387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetics_in_explicit_arithmetic6392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_part_in_arithmetic_expansion6401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_arithmetic_part6418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LLPAREN_in_arithmetic_part6420 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic_part6422 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_arithmetic_part6425 = new BitSet(new long[]{0x0000000000000000L,0x0000400100000000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic_part6427 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arithmetic_part6430 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_arithmetic_part6432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_arithmetic_part6441 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_arithmetic_part6443 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic_part6445 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_arithmetic_part6448 = new BitSet(new long[]{0x0000000000000000L,0x0800000100000000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic_part6450 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_RSQUARE_in_arithmetic_part6453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_in_arithmetics6466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_COMMA_in_arithmetics6469 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetics6471 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetic_in_arithmetics6474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_arithmetics_in_arithmetics_test6494 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_arithmetics_test6496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_no_digit_in_arithmetic6518 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic6520 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_arithmetic_assignment_operator_in_arithmetic6524 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic6527 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_logicor_in_arithmetic6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_variable_reference_in_arithmetic6550 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic6552 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_arithmetic_assignment_operator_in_arithmetic6556 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_arithmetic6559 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_logicor_in_arithmetic6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicor_in_arithmetic6570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QMARK_in_arithmetic6579 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_logicor_in_arithmetic6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COLON_in_arithmetic6585 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_logicor_in_arithmetic6589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_arithmetic_assignment_operator6636 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_arithmetic_assignment_operator6647 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PCT_in_arithmetic_assignment_operator6658 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_arithmetic_assignment_operator6669 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_arithmetic_assignment_operator6680 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSHIFT_in_arithmetic_assignment_operator6691 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSHIFT_in_arithmetic_assignment_operator6702 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMP_in_arithmetic_assignment_operator6713 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_arithmetic_assignment_operator6724 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PIPE_in_arithmetic_assignment_operator6735 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment_operator6737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_arithmetic_variable_reference6750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_in_primary6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_substitution_in_primary6771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_no_digit_in_primary6776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_reference_in_primary6789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_expansion_in_primary6794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_primary6799 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_arithmetics_in_primary6803 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primary6806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_pre_post_primary6815 = new BitSet(new long[]{0x0000000000000000L,0x4040A40000000000L,0x0003000000E00000L});
    public static final BitSet FOLLOW_primary_in_pre_post_primary6819 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_DQUOTE_in_pre_post_primary6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_post_primary_in_post_inc_dec6831 = new BitSet(new long[]{0x0000000000000002L,0x2000020100000000L});
    public static final BitSet FOLLOW_BLANK_in_post_inc_dec6840 = new BitSet(new long[]{0x0000000000000002L,0x2000020100000000L});
    public static final BitSet FOLLOW_BLANK_in_post_inc_dec6859 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_post_inc_dec6862 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_post_inc_dec6864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_post_inc_dec6887 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_post_inc_dec6890 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_post_inc_dec6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_pre_inc_dec6921 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_pre_inc_dec6923 = new BitSet(new long[]{0x0000000000000000L,0x4040A40100000000L,0x0003000000E00000L});
    public static final BitSet FOLLOW_BLANK_in_pre_inc_dec6925 = new BitSet(new long[]{0x0000000000000000L,0x4040A40000000000L,0x0003000000E00000L});
    public static final BitSet FOLLOW_pre_post_primary_in_pre_inc_dec6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_pre_inc_dec6941 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_pre_inc_dec6943 = new BitSet(new long[]{0x0000000000000000L,0x4040A40100000000L,0x0003000000E00000L});
    public static final BitSet FOLLOW_BLANK_in_pre_inc_dec6945 = new BitSet(new long[]{0x0000000000000000L,0x4040A40000000000L,0x0003000000E00000L});
    public static final BitSet FOLLOW_pre_post_primary_in_pre_inc_dec6948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_unary_with_operator6964 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_unary_with_operator6966 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_unary_in_unary_with_operator6969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_unary_with_operator6982 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_unary_with_operator6984 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_unary_in_unary_with_operator6987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unary_with_operator7000 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_unary_with_operator7002 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_unary_in_unary_with_operator7005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_unary_with_operator7018 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_unary_with_operator7020 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_unary_in_unary_with_operator7023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_post_inc_dec_in_unary7039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pre_inc_dec_in_unary7056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_with_operator_in_unary7073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_in_exponential7081 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_EXP_in_exponential7084 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_exponential7087 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_unary_in_exponential7091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_exponential_in_times_division_modulus7102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100014000000L});
    public static final BitSet FOLLOW_TIMES_in_times_division_modulus7106 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_SLASH_in_times_division_modulus7109 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_PCT_in_times_division_modulus7112 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_times_division_modulus7116 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_exponential_in_times_division_modulus7120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100014000000L});
    public static final BitSet FOLLOW_times_division_modulus_in_addsub7130 = new BitSet(new long[]{0x0000000000000002L,0x2000020000000000L});
    public static final BitSet FOLLOW_PLUS_in_addsub7134 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_MINUS_in_addsub7137 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_addsub7141 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_times_division_modulus_in_addsub7145 = new BitSet(new long[]{0x0000000000000002L,0x2000020000000000L});
    public static final BitSet FOLLOW_addsub_in_shifts7155 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_LSHIFT_in_shifts7159 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_RSHIFT_in_shifts7162 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_shifts7166 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_addsub_in_shifts7170 = new BitSet(new long[]{0x0000000000000002L,0x0006000000000000L});
    public static final BitSet FOLLOW_shifts_in_compare7180 = new BitSet(new long[]{0x0000000000000002L,0x1000184000000000L});
    public static final BitSet FOLLOW_compare_operator_in_compare7183 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_compare7186 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_shifts_in_compare7190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_compare_operator7200 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_compare_operator7202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_compare_operator7211 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_compare_operator7213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_THAN_in_compare_operator7222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_THAN_in_compare_operator7227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_compare_operator7232 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_compare_operator7234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_compare_operator7243 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_compare_operator7245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compare_in_bitwiseand7257 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_AMP_in_bitwiseand7260 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_bitwiseand7263 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_compare_in_bitwiseand7267 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_bitwiseand_in_bitwisexor7277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_CARET_in_bitwisexor7280 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_bitwisexor7283 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_bitwiseand_in_bitwisexor7287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_bitwisexor_in_bitwiseor7297 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_PIPE_in_bitwiseor7300 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_bitwiseor7303 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_bitwisexor_in_bitwiseor7307 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_bitwiseor_in_logicand7317 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_LOGICAND_in_logicand7320 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_logicand7323 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_bitwiseor_in_logicand7327 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_logicand_in_logicor7337 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_LOGICOR_in_logicor7340 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_BLANK_in_logicor7343 = new BitSet(new long[]{0x0000000000000000L,0x6040A64100000000L,0x0003000000E20000L});
    public static final BitSet FOLLOW_logicand_in_logicor7347 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_POUND_in_synpred1_java_libbash457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred2_java_libbash622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_time_posix_in_synpred3_java_libbash670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred4_java_libbash786 = new BitSet(new long[]{0x0000000000000000L,0x0000800100000000L});
    public static final BitSet FOLLOW_file_descriptor_in_synpred4_java_libbash789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_expr_in_synpred5_java_libbash867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_here_document_operator_in_synpred6_java_libbash895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred7_java_libbash955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_java_libbash1332 = new BitSet(new long[]{0x0000000000000000L,0x3400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred8_java_libbash1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred8_java_libbash1337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred8_java_libbash1339 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_synpred8_java_libbash1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred9_java_libbash1359 = new BitSet(new long[]{0x0000000000000000L,0xFFC0864800000000L,0x00033FFFFDFE0000L});
    public static final BitSet FOLLOW_bash_command_in_synpred9_java_libbash1361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPORT_in_synpred10_java_libbash1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCAL_in_synpred11_java_libbash1431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_synpred12_java_libbash1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred13_java_libbash1504 = new BitSet(new long[]{0x0000000000000000L,0x0000200100000000L});
    public static final BitSet FOLLOW_parens_in_synpred13_java_libbash1507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred14_java_libbash1613 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_name_in_synpred14_java_libbash1615 = new BitSet(new long[]{0x0000000000000000L,0x3400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred14_java_libbash1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred14_java_libbash1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred14_java_libbash1622 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_synpred14_java_libbash1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred15_java_libbash1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wspace_in_synpred16_java_libbash1903 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred16_java_libbash1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_synpred17_java_libbash1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred18_java_libbash1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RPAREN_in_synpred19_java_libbash1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred20_java_libbash1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred21_java_libbash2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred22_java_libbash2098 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LETTER_in_synpred22_java_libbash2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_synpred22_java_libbash2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred23_java_libbash2147 = new BitSet(new long[]{0x0000000000000000L,0xFFC0874900000000L,0x00033FFFFDFFFF9FL});
    public static final BitSet FOLLOW_bash_command_arguments_in_synpred23_java_libbash2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACE_in_synpred24_java_libbash2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_expansion_in_synpred25_java_libbash2201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wspace_in_synpred26_java_libbash2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ESAC_in_synpred26_java_libbash2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wspace_in_synpred27_java_libbash2989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ESAC_in_synpred27_java_libbash2991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred28_java_libbash3314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_synpred29_java_libbash3325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred30_java_libbash3367 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_synpred30_java_libbash3369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_TILDE_in_synpred30_java_libbash3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_synpred31_java_libbash3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BLANK_in_synpred31_java_libbash3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred32_java_libbash3788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_in_synpred33_java_libbash3799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred34_java_libbash3859 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_synpred34_java_libbash3861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred37_java_libbash4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred38_java_libbash4275 = new BitSet(new long[]{0x0000000000000000L,0x8040864800000000L,0x0000300800E00000L});
    public static final BitSet FOLLOW_LBRACE_in_synpred38_java_libbash4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred38_java_libbash4280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_num_in_synpred38_java_libbash4282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_synpred38_java_libbash4284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_synpred38_java_libbash4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_synpred38_java_libbash4288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_synpred38_java_libbash4290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred38_java_libbash4292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred38_java_libbash4294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred38_java_libbash4296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_command_substitution_in_synpred39_java_libbash4308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred40_java_libbash4319 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_set_in_synpred40_java_libbash4321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_synpred41_java_libbash4336 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred41_java_libbash4338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_synpred42_java_libbash4355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_TICK_in_synpred42_java_libbash4357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESC_in_synpred43_java_libbash4374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred43_java_libbash4376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_expansion_in_synpred44_java_libbash4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred45_java_libbash4404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_SINGLE_QUOTED_STRING_TOKEN_in_synpred45_java_libbash4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQUOTE_in_synpred46_java_libbash4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_synpred47_java_libbash4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_synpred48_java_libbash4598 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_synpred48_java_libbash4600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_synpred49_java_libbash4615 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_synpred49_java_libbash4617 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DIGIT_in_synpred49_java_libbash4619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QMARK_in_synpred50_java_libbash4661 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred50_java_libbash4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMES_in_synpred51_java_libbash4699 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred51_java_libbash4701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred52_java_libbash4737 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred52_java_libbash4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_synpred53_java_libbash4775 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred53_java_libbash4777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred54_java_libbash4813 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred54_java_libbash4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_pattern_match_in_synpred55_java_libbash4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_class_match_in_synpred56_java_libbash4862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred57_java_libbash4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BANG_in_synpred58_java_libbash4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CARET_in_synpred59_java_libbash4964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pattern_class_match_in_synpred60_java_libbash4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred61_java_libbash5011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_value_operator_in_synpred62_java_libbash5345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_synpred63_java_libbash5664 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_POUND_in_synpred63_java_libbash5666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred64_java_libbash5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred65_java_libbash5814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred66_java_libbash5895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred67_java_libbash5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SLASH_in_synpred67_java_libbash5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred68_java_libbash5967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PCT_in_synpred68_java_libbash5969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred69_java_libbash5986 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_POUND_in_synpred69_java_libbash5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POUND_in_synpred70_java_libbash6160 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_name_in_synpred70_java_libbash6162 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred70_java_libbash6164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred71_java_libbash6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_synpred72_java_libbash6376 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_set_in_synpred72_java_libbash6378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_no_digit_in_synpred73_java_libbash6506 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_BLANK_in_synpred73_java_libbash6508 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_arithmetic_assignment_operator_in_synpred73_java_libbash6511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arithmetic_variable_reference_in_synpred74_java_libbash6537 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_BLANK_in_synpred74_java_libbash6539 = new BitSet(new long[]{0x0000000000000000L,0x3006028500000000L,0x0000100214000000L});
    public static final BitSet FOLLOW_arithmetic_assignment_operator_in_synpred74_java_libbash6542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLANK_in_synpred75_java_libbash6835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred76_java_libbash6852 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_synpred76_java_libbash6854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred77_java_libbash6880 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_synpred77_java_libbash6882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred78_java_libbash7045 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_PLUS_in_synpred78_java_libbash7047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_synpred78_java_libbash7049 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_MINUS_in_synpred78_java_libbash7051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred79_java_libbash7061 = new BitSet(new long[]{0x0000000000000002L});

}
